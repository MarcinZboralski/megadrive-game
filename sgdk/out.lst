0001   0000             ; eXtended Genesis Music (XGM) Z80 driver - Stéphane Dallongeville @2014
0002   0000             ;
0003   0000             ; XGM is a music format dedicated to the Sega Megadrive/Genesis system.
0004   0000             ; It has been designed to minimize CPU decoding resource and keep reasonable data size (should be smaller than VGM file).
0005   0000             ; It supports both FM and PSG chip and allow up to 4 PCM channels (8 bits signed at 14 Khz) to be played at once.
0006   0000             ; These 4 PCM channels are obtained by software mixing in the FM DAC in replacement of the 6th FM channel (so at best you can have 5FM + 4PCM + 4PSG = 13 channels)
0007   0000             ;
0008   0000             ; The driver supports playing SFX in PCM format with 16 priority levels and also allow PSG channel reservation so you can use them from the 68000 to play SFX or whatever you want.
0009   0000             ; PCM samples can be >32KB, the only restriction is that they should have their address and size aligned to 256 bytes.
0010   0000             ;
0011   0000             ; we have to do 254 cycles per sample output which consist of :
0012   0000             ; - bufferize 4 PCM samples from the rom and mix them in write buffer
0013   0000             ; - read 1 sample from read buffer and output it to the DAC
0014   0000             ; - handle loop
0015   0000             ; - bufferize XGM data / parse and apply XGM command / handle extern command
0016   0000             ;
0017   0000             ; register usage :
0018   0000             ; HL  = sample source (in ROM)
0019   0000             ; DE  = write buffer / XGM buffer
0020   0000             ; BC  = counter
0021   0000             ; B = $80 (used for overflow and sample unsign)
0022   0000             ; IYL = vint counter
0023   0000             ; HL' = YMPORT1
0024   0000             ; BC' = read buffer
0025   0000             
0026   0000             ; ###########################      define      ##############################
0027   0000             
0028   0000                         INCLUDE "z80_def.i80"   ; basic definitions
0001+  0000             ; ############################ define ##############################
0002+  0000             
0003+  0000             YMPORT0     EQU     $4000           ; YM2612 port 0
0004+  0000             YMPORT1     EQU     $4001           ; YM2612 port 1
0005+  0000             YMPORT2     EQU     $4002           ; YM2612 port 2
0006+  0000             YMPORT3     EQU     $4003           ; YM2612 port 3
0007+  0000             PSGPORT     EQU     $7F11           ; PSG port
0008+  0000             BANKREG     EQU     $6000           ; bank register
0009+  0000             
0010+  0000             COMPLAY_SFT EQU     0               ; start play command
0011+  0000             COMSTOP_SFT EQU     4               ; stop play command
0012+  0000             
0013+  0000             STATPLAY_SFT  EQU   0               ; playing status
0014+  0000             STATREADY_SFT EQU   7               ; driver ready status
0015+  0000             
0016+  0000             CH0_SFT     EQU     0               ; channel 0
0017+  0000             CH1_SFT     EQU     1               ; channel 1
0018+  0000             CH2_SFT     EQU     2               ; channel 2
0019+  0000             CH3_SFT     EQU     3               ; channel 3
0020+  0000             
0021+  0000             COMPLAY     EQU     1<<COMPLAY_SFT
0022+  0000             COMSTOP     EQU     1<<COMSTOP_SFT
0023+  0000             
0024+  0000             STATPLAY    EQU     1<<STATPLAY_SFT
0025+  0000             STATREADY   EQU     1<<STATREADY_SFT
0026+  0000             
0027+  0000             CH0         EQU     1<<CH0_SFT
0028+  0000             CH1         EQU     1<<CH1_SFT
0029+  0000             CH2         EQU     1<<CH2_SFT
0030+  0000             CH3         EQU     1<<CH3_SFT
0031+  0000             
0032+  0000             
0033+  0000             ; ########################### variable #############################
0034+  0000             
0035+  0000             COMMAND     EQU     $0100           ; command from 68K
0036+  0000             STATUS      EQU     $0102           ; status from Z80
0037+  0000             PARAMS      EQU     $0104           ; parameters (68K and Z80)
0029   0000             
0030   0000             
0031   0000             ; ###########################       var        ##############################
0032   0000             
0033   0000             XGM_PLAY_SFT    EQU     6           ; XGM music play command bit
0034   0000             XGM_RESUME_SFT  EQU     5           ; XGM music resume command bit
0035   0000             XGM_STOP_SFT    EQU     4           ; XGM music stop command bit
0036   0000             
0037   0000                                                 ; COMMAND b0 = play PCM0   STATUS b0 = PCM0 playing
0038   0000                                                 ; COMMAND b1 = play PCM1   STATUS b1 = PCM1 playing
0039   0000                                                 ; COMMAND b2 = play PCM2   STATUS b2 = PCM2 playing
0040   0000                                                 ; COMMAND b3 = play PCM3   STATUS b3 = PCM3 playing
0041   0000                                                 ; COMMAND b6 = stop XGM
0042   0000                                                 ; COMMAND b7 = play XGM    STATUS b7 = XGM playing
0043   0000             
0044   0000             XGM_ARG_A   EQU     PARAMS+$00      ; XGM address (bit 0 --> bit 23)
0045   0000             
0046   0000             PCM0_ARG_P  EQU     PARAMS+$04      ; priority (0 to 15)
0047   0000             PCM0_ARG_ID EQU     PARAMS+$05      ; PCM id (0 to 255)
0048   0000             PCM1_ARG_P  EQU     PARAMS+$06      ; priority (0 to 15)
0049   0000             PCM1_ARG_ID EQU     PARAMS+$07      ; PCM id (0 to 255)
0050   0000             PCM2_ARG_P  EQU     PARAMS+$08      ; priority (0 to 15)
0051   0000             PCM2_ARG_ID EQU     PARAMS+$09      ; PCM id (0 to 255)
0052   0000             PCM3_ARG_P  EQU     PARAMS+$0A      ; priority (0 to 15)
0053   0000             PCM3_ARG_ID EQU     PARAMS+$0B      ; PCM id (0 to 255)
0054   0000             
0055   0000             PCM_ARG_P   EQU     PCM0_ARG_P
0056   0000             PCM_ARG_ID  EQU     PCM0_ARG_ID
0057   0000             
0058   0000             PSG_ARG     EQU     PARAMS+$0C      ; xxxx CCCC  where 'CCCC' is PSG channel '3210'
0059   0000                                                 ; PSG channel reservation for 68k
0060   0000             
0061   0000             PCM0_PRIO   EQU     PARAMS+$10      ; PCM0 internal priority
0062   0000             PCM0_ADDR   EQU     PARAMS+$12      ; PCM0 internal addr (bit8 --> bit23)
0063   0000             PCM0_LEN    EQU     PARAMS+$14      ; PCM0 internal len (bit8 --> bit23)
0064   0000             PCM1_PRIO   EQU     PARAMS+$18      ; PCM1 internal priority
0065   0000             PCM1_ADDR   EQU     PARAMS+$1A      ; PCM1 internal addr (bit8 --> bit23)
0066   0000             PCM1_LEN    EQU     PARAMS+$1C      ; PCM1 internal len (bit8 --> bit23)
0067   0000             PCM2_PRIO   EQU     PARAMS+$20      ; PCM2 internal priority
0068   0000             PCM2_ADDR   EQU     PARAMS+$22      ; PCM2 internal addr (bit8 --> bit23)
0069   0000             PCM2_LEN    EQU     PARAMS+$24      ; PCM2 internal len (bit8 --> bit23)
0070   0000             PCM3_PRIO   EQU     PARAMS+$28      ; PCM3 internal priority
0071   0000             PCM3_ADDR   EQU     PARAMS+$2A      ; PCM3 internal addr (bit8 --> bit23)
0072   0000             PCM3_LEN    EQU     PARAMS+$2C      ; PCM3 internal len (bit8 --> bit23)
0073   0000             
0074   0000             PCM_PRIO    EQU     PCM0_PRIO
0075   0000             PCM_ADDR    EQU     PCM0_ADDR
0076   0000             PCM_LEN     EQU     PCM0_LEN
0077   0000             
0078   0000             XGM_ADDR    EQU     PARAMS+$30      ; XGM internal addr (bit0 --> bit23)
0079   0000             
0080   0000             WRITEBUF    EQU     PARAMS+$34      ; PCM write buffer pointer (bit8 --> bit9)
0081   0000             READBUF     EQU     PARAMS+$36      ; PCM read buffer pointer (bit8 --> bit9)
0082   0000             
0083   0000             YM_RR_SAV   EQU     PARAMS+$40      ; YM RR save (4 slots * 6 channels)
0084   0000             PSG_ENV_SAV EQU     PARAMS+$58      ; PSG env save (4 channels)
0085   0000             YM_2B_SAV   EQU     PARAMS+$5C      ; YM register $2B last write save
0086   0000             
0087   0000             YM_RR_OFF   EQU     PARAMS+$60      ; YM RR off (4 slots * 6 channels)
0088   0000             PSG_ENV_OFF EQU     PARAMS+$78      ; PSG env off (4 channels)
0089   0000             
0090   0000             YM_2B_PT    EQU     PARAMS+$5D      ; YM register $2B save buffer pointer
0091   0000             YM_2B_BUF   EQU     PARAMS+$7C      ; YM register $2B save buffer
0092   0000             
0093   0000             VINT_OVER   EQU     PARAMS+$5E      ; contains number of vint to process (just for info)
0094   0000             IDLE_LOOP   EQU     PARAMS+$5F      ; idle loop counter (just for info)
0095   0000             
0096   0000             JUMP_TABLE  EQU     $1600           ; XGM command jump table (size = $100)
0097   0000             XGM_BUFFER  EQU     $1700           ; XGM music data buffer (size = $100)
0098   0000             
0099   0000             PCM_BUFFER0 EQU     $1800           ; PCM buffer 0
0100   0000             PCM_BUFFER1 EQU     $1900           ; PCM buffer 1
0101   0000             PCM_BUFFER2 EQU     $1A00           ; PCM buffer 2
0102   0000             PCM_BUFFER3 EQU     $1B00           ; PCM buffer 3
0103   0000             
0104   0000             PCM_BUFFER  EQU     PCM_BUFFER0     ; PCM buffer
0105   0000             
0106   0000             
0107   0000             ID_TABLE    EQU     $1C00           ; sample id table (size = $400)
0108   0000             
0109   0000             STACK       EQU     JUMP_TABLE      ; stack pointer above buffer region ($1600 --> $15XX)
0110   0000             
0111   0000             
0112   0000             ; ###########################      macro       ##############################
0113   0000             
0114   0000                         INCLUDE "z80_mac.i80"  ; basic macros
0001+  0000             ; ############################     macro     ##############################
0002+  0000             
0003+  0000             
0004+  0000             ; setBank
0005+  0000             ; -------
0006+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0007+  0000             ; HL  <-  BANKREG
0008+  0000             ;
0009+  0000             ; set the bank register for ROM area
0010+  0000             ; = 101 cycles
0011+  0000             
0012+  0000                         macro   setBank
0013+  0000~            
0014+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
0015+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
0016+  0000~                        RRA                     ;                           ' 4
0017+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
0018+  0000~                        RRA                     ;                           ' 4
0019+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
0020+  0000~                        RRA                     ;                           ' 4
0021+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
0022+  0000~                        RRA                     ;                           ' 4
0023+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
0024+  0000~                        RRA                     ;                           ' 4
0025+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
0026+  0000~                        RRA                     ;                           ' 4
0027+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
0028+  0000~                        RRA                     ;                           ' 4
0029+  0000~                        LD  (HL), A             ; #8 (bit 22)               ' 7
0030+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
0031+  0000~            
0032+  0000                         endm                    ;                           ' 101
0033+  0000             
0034+  0000             
0035+  0000             ; setBankFast
0036+  0000             ; -----------
0037+  0000             ; A    -> bit 21-15 of rom address to set in the bank register
0038+  0000             ; HL  <-  BANKREG
0039+  0000             ;
0040+  0000             ; set the bank register for ROM area
0041+  0000             ; = 97 cycles
0042+  0000             
0043+  0000                         macro   setBankFast
0044+  0000~            
0045+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
0046+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
0047+  0000~                        RRA                     ;                           ' 4
0048+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
0049+  0000~                        RRA                     ;                           ' 4
0050+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
0051+  0000~                        RRA                     ;                           ' 4
0052+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
0053+  0000~                        RRA                     ;                           ' 4
0054+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
0055+  0000~                        RRA                     ;                           ' 4
0056+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
0057+  0000~                        RRA                     ;                           ' 4
0058+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
0059+  0000~                        LD  (HL), L             ; #8 (bit 22 = 0)           ' 7
0060+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
0061+  0000~            
0062+  0000                         endm                    ;                           ' 97
0063+  0000             
0064+  0000             
0065+  0000             ; setBank_BC
0066+  0000             ; ----------
0067+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0068+  0000             ; BC  <-  BANKREG
0069+  0000             ; A   <-  0
0070+  0000             ;
0071+  0000             ; set the bank register for ROM area
0072+  0000             ; = 105 cycles
0073+  0000             
0074+  0000                         macro   setBank_BC
0075+  0000~            
0076+  0000~                        LD  BC, BANKREG         ; BC = BANKREG              ' 10
0077+  0000~                        LD  (BC), A             ; #1 (bit 15)               ' 7
0078+  0000~                        RRA                     ;                           ' 4
0079+  0000~                        LD  (BC), A             ; #2 (bit 16)               ' 7
0080+  0000~                        RRA                     ;                           ' 4
0081+  0000~                        LD  (BC), A             ; #3 (bit 17)               ' 7
0082+  0000~                        RRA                     ;                           ' 4
0083+  0000~                        LD  (BC), A             ; #4 (bit 18)               ' 7
0084+  0000~                        RRA                     ;                           ' 4
0085+  0000~                        LD  (BC), A             ; #5 (bit 19)               ' 7
0086+  0000~                        RRA                     ;                           ' 4
0087+  0000~                        LD  (BC), A             ; #6 (bit 20)               ' 7
0088+  0000~                        RRA                     ;                           ' 4
0089+  0000~                        LD  (BC), A             ; #7 (bit 21)               ' 7
0090+  0000~                        RRA                     ;                           ' 4
0091+  0000~                        LD  (BC), A             ; #8 (bit 22)               ' 7
0092+  0000~                        RRA                     ;                           ' 4
0093+  0000~                        LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0094+  0000~            
0095+  0000                         endm                    ;                           ' 105
0096+  0000             
0097+  0000             
0098+  0000             ; setBank_DE
0099+  0000             ; ----------
0100+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0101+  0000             ; DE  <-  BANKREG
0102+  0000             ; A   <-  0
0103+  0000             ;
0104+  0000             ; set the bank register for ROM area
0105+  0000             ; = 105 cycles
0106+  0000             
0107+  0000                         macro   setBank_DE
0108+  0000~            
0109+  0000~                        LD  DE, BANKREG         ; DE = BANKREG              ' 10
0110+  0000~                        LD  (DE), A             ; #1 (bit 15)               ' 7
0111+  0000~                        RRA                     ;                           ' 4
0112+  0000~                        LD  (DE), A             ; #2 (bit 16)               ' 7
0113+  0000~                        RRA                     ;                           ' 4
0114+  0000~                        LD  (DE), A             ; #3 (bit 17)               ' 7
0115+  0000~                        RRA                     ;                           ' 4
0116+  0000~                        LD  (DE), A             ; #4 (bit 18)               ' 7
0117+  0000~                        RRA                     ;                           ' 4
0118+  0000~                        LD  (DE), A             ; #5 (bit 19)               ' 7
0119+  0000~                        RRA                     ;                           ' 4
0120+  0000~                        LD  (DE), A             ; #6 (bit 20)               ' 7
0121+  0000~                        RRA                     ;                           ' 4
0122+  0000~                        LD  (DE), A             ; #7 (bit 21)               ' 7
0123+  0000~                        RRA                     ;                           ' 4
0124+  0000~                        LD  (DE), A             ; #8 (bit 22)               ' 7
0125+  0000~                        RRA                     ;                           ' 4
0126+  0000~                        LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0127+  0000~            
0128+  0000                         endm                    ;                           ' 105
0129+  0000             
0130+  0000             
0131+  0000             ; writeYM
0132+  0000             ; -------
0133+  0000             ; HL   -> YM port where to write
0134+  0000             ; D    -> address
0135+  0000             ; E    -> value
0136+  0000             ;
0137+  0000             ; write to YM2612
0138+  0000             
0139+  0000                         macro   writeYM
0140+  0000~            
0141+  0000~            .wait0
0142+  0000~                        BIT     7, (HL)         ; test YM not busy
0143+  0000~                        JR      NZ, .wait0
0144+  0000~                        LD      (HL), D         ; write address
0145+  0000~            .wait1
0146+  0000~                        BIT     7, (HL)         ; test YM not busy
0147+  0000~                        JR      NZ, .wait1
0148+  0000~                        INC     L
0149+  0000~                        LD      (HL), E         ; write value
0150+  0000~            
0151+  0000                         endm
0152+  0000             
0153+  0000             
0154+  0000             ; getPlayCommand
0155+  0000             ; --------------
0156+  0000             ; HL  <-  point to COMMAND
0157+  0000             ; zf  <-  channel 'ch' play command
0158+  0000             ;
0159+  0000             ; Z flag reset if play command for channel 'ch'
0160+  0000             ; = 22 cycles
0161+  0000             
0162+  0000                         macro   getPlayCommand ch
0163+  0000~            
0164+  0000~                        LD      HL, COMMAND             ;                   ' 10
0165+  0000~                        BIT     COMPLAY_SFT+ch, (HL)    ; play command ?    ' 12
0166+  0000~            
0167+  0000                         endm                            ;                   ' 22
0168+  0000             
0169+  0000             
0170+  0000             ; getStopCommand
0171+  0000             ; --------------
0172+  0000             ; HL  <-  point to COMMAND
0173+  0000             ; zf  <-  channel 'ch' stop command
0174+  0000             ;
0175+  0000             ; Z flag reset if stop command for channel 'ch'
0176+  0000             ; = 22 cycles
0177+  0000             
0178+  0000                         macro   getStopCommand ch
0179+  0000~            
0180+  0000~                        LD      HL, COMMAND             ;                   ' 10
0181+  0000~                        BIT     COMSTOP_SFT+ch, (HL)    ; stop command ?    ' 12
0182+  0000~            
0183+  0000                         endm                            ;                   ' 22
0184+  0000             
0185+  0000             
0186+  0000             ; setPlayCommand
0187+  0000             ; ----------------
0188+  0000             ; HL  <-  point to COMMAND
0189+  0000             ;
0190+  0000             ; set the play command for channel 'ch'
0191+  0000             ; = 25 cycles
0192+  0000             
0193+  0000                         macro   setPlayCommand ch
0194+  0000~            
0195+  0000~                        LD      HL, COMMAND             ;                   ' 10
0196+  0000~                        SET     COMPLAY_SFT+ch, (HL)    ; set command       ' 15
0197+  0000~            
0198+  0000                         endm                            ;                   ' 25
0199+  0000             
0200+  0000             
0201+  0000             ; setStopCommand
0202+  0000             ; ----------------
0203+  0000             ; HL  <-  point to COMMAND
0204+  0000             ;
0205+  0000             ; set the stop command for channel 'ch'
0206+  0000             ; = 25 cycles
0207+  0000             
0208+  0000                         macro   setStopCommand ch
0209+  0000~            
0210+  0000~                        LD      HL, COMMAND             ;                   ' 10
0211+  0000~                        SET     COMSTOP_SFT+ch, (HL)    ; set command       ' 15
0212+  0000~            
0213+  0000                         endm                            ;                   ' 25
0214+  0000             
0215+  0000             
0216+  0000             ; clearPlayCommand
0217+  0000             ; ----------------
0218+  0000             ; HL  <-  point to COMMAND
0219+  0000             ;
0220+  0000             ; clear the play command for channel 'ch'
0221+  0000             ; = 25 cycles
0222+  0000             
0223+  0000                         macro   clearPlayCommand ch
0224+  0000~            
0225+  0000~                        LD      HL, COMMAND             ;                   ' 10
0226+  0000~                        RES     COMPLAY_SFT+ch, (HL)    ; clear command     ' 15
0227+  0000~            
0228+  0000                         endm                            ;                   ' 25
0229+  0000             
0230+  0000             
0231+  0000             ; clearStopCommand
0232+  0000             ; ----------------
0233+  0000             ; HL  <-  point to COMMAND
0234+  0000             ;
0235+  0000             ; clear the stop command for channel 'ch'
0236+  0000             ; = 25 cycles
0237+  0000             
0238+  0000                         macro   clearStopCommand ch
0239+  0000~            
0240+  0000~                        LD      HL, COMMAND             ;                   ' 10
0241+  0000~                        RES     COMSTOP_SFT+ch, (HL)    ; clear command     ' 15
0242+  0000~            
0243+  0000                         endm                            ;                   ' 25
0244+  0000             
0245+  0000             
0246+  0000             ; getPlayStatus
0247+  0000             ; -------------
0248+  0000             ; HL  <- point to STATUS
0249+  0000             ; zf  <-  channel 'ch' is playing
0250+  0000             ;
0251+  0000             ; Z flag reset if play status for channel 'ch'
0252+  0000             ; = 22 cycles
0253+  0000             
0254+  0000                         macro   getPlayStatus ch
0255+  0000~            
0256+  0000~                        LD      HL, STATUS              ;                   ' 10
0257+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
0258+  0000~            
0259+  0000                         endm                            ;                   ' 22
0260+  0000             
0261+  0000             
0262+  0000             ; setPlayStatus
0263+  0000             ; -------------
0264+  0000             ; HL  <- point to STATUS
0265+  0000             ;
0266+  0000             ; set the play status for channel 'ch'
0267+  0000             ; = 25 cycles
0268+  0000             
0269+  0000                         macro   setPlayStatus ch
0270+  0000~            
0271+  0000~                        LD      HL, STATUS              ;                   ' 10
0272+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
0273+  0000~            
0274+  0000                         endm                            ;                   ' 25
0275+  0000             
0276+  0000             
0277+  0000             ; clearPlayStatus
0278+  0000             ; ---------------
0279+  0000             ; HL  <- point to STATUS
0280+  0000             ;
0281+  0000             ; clear play status for channel 'ch'
0282+  0000             ; = 25 cycles
0283+  0000             
0284+  0000                         macro   clearPlayStatus ch
0285+  0000~            
0286+  0000~                        LD      HL, STATUS              ;                   ' 10
0287+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
0288+  0000~            
0289+  0000                         endm                            ;                   ' 25
0290+  0000             
0291+  0000             
0292+  0000             ; getLoopStatus
0293+  0000             ; -------------
0294+  0000             ; HL  <- point to STATUS+1
0295+  0000             ; zf  <-  channel 'ch' is playing
0296+  0000             ;
0297+  0000             ; Z flag reset if loop status for channel 'ch'
0298+  0000             ; = 22 cycles
0299+  0000             
0300+  0000                         macro   getLoopStatus ch
0301+  0000~            
0302+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0303+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
0304+  0000~            
0305+  0000                         endm                            ;                   ' 22
0306+  0000             
0307+  0000             
0308+  0000             ; setLoopStatus
0309+  0000             ; -------------
0310+  0000             ; HL  <- point to STATUS+1
0311+  0000             ;
0312+  0000             ; set the loop status for channel 'ch'
0313+  0000             ; = 25 cycles
0314+  0000             
0315+  0000                         macro   setLoopStatus ch
0316+  0000~            
0317+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0318+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
0319+  0000~            
0320+  0000                         endm                            ;                   ' 25
0321+  0000             
0322+  0000             
0323+  0000             ; clearLoopStatus
0324+  0000             ; ---------------
0325+  0000             ; HL  <- point to STATUS+1
0326+  0000             ;
0327+  0000             ; clear loop status for channel 'ch'
0328+  0000             ; = 25 cycles
0329+  0000             
0330+  0000                         macro   clearLoopStatus ch
0331+  0000~            
0332+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0333+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
0334+  0000~            
0335+  0000                         endm                            ;                   ' 25
0336+  0000             
0337+  0000             
0338+  0000             ; clearAllStatus
0339+  0000             ; --------------
0340+  0000             ; HL  <- 0
0341+  0000             ;
0342+  0000             ; clear play and loop status for all channel
0343+  0000             ; = 26 cycles
0344+  0000             
0345+  0000                         macro   clearAllStatus
0346+  0000~            
0347+  0000~                        LD      HL, $00                 ;                   ' 10
0348+  0000~                        LD      (STATUS), HL            ; clear status      ' 16
0349+  0000~            
0350+  0000                         endm                            ;                   ' 26
0351+  0000             
0352+  0000             
0353+  0000             ; ############################  macro wait macro  ##############################
0354+  0000             
0355+  0000             
0356+  0000             ; wait2p16x
0357+  0000             ; ---------
0358+  0000             ; wait for ((w * 16) + 2) cycles
0359+  0000             ;
0360+  0000                         macro   wait2p16x w
0361+  0000~            
0362+  0000~                        LD      A, w            ; 7-2
0363+  0000~            .loop
0364+  0000~                        DEC     A               ; 4
0365+  0000~                        JR      NZ, .loop       ; 12
0366+  0000~            
0367+  0000                         endm
0368+  0000             
0369+  0000             
0370+  0000                         macro   wait4
0371+  0000~                        NOP
0372+  0000                         endm
0373+  0000             
0374+  0000                         macro   wait6
0375+  0000~                        INC     DE
0376+  0000                         endm
0377+  0000             
0378+  0000                         macro   wait7
0379+  0000~                        LD      A, (DE)
0380+  0000                         endm
0381+  0000             
0382+  0000                         macro   wait8
0383+  0000~                        wait4
0384+  0000~                        wait4
0385+  0000                         endm
0386+  0000             
0387+  0000                         macro   wait9
0388+  0000~                        LD      R, A
0389+  0000                         endm
0390+  0000             
0391+  0000                         macro   wait10
0392+  0000~                        JP      .loop
0393+  0000~            .loop
0394+  0000                         endm
0395+  0000             
0396+  0000                         macro   wait11
0397+  0000~                        wait7
0398+  0000~                        wait4
0399+  0000                         endm
0400+  0000             
0401+  0000                         macro   wait12
0402+  0000~                        JR      .loop
0403+  0000~            .loop
0404+  0000                         endm
0405+  0000             
0406+  0000                         macro   wait13
0407+  0000~                        wait9
0408+  0000~                        wait4
0409+  0000                         endm
0410+  0000             
0411+  0000                         macro   wait14
0412+  0000~                        wait7
0413+  0000~                        wait7
0414+  0000                         endm
0415+  0000             
0416+  0000                         macro   wait15
0417+  0000~                        wait8
0418+  0000~                        wait7
0419+  0000                         endm
0420+  0000             
0421+  0000                         macro   wait16
0422+  0000~                        wait12
0423+  0000~                        wait4
0424+  0000                         endm
0425+  0000             
0426+  0000                         macro   wait17
0427+  0000~                        wait10
0428+  0000~                        wait7
0429+  0000                         endm
0430+  0000             
0431+  0000                         macro   wait18
0432+  0000~                        wait9
0433+  0000~                        wait9
0434+  0000                         endm
0435+  0000             
0436+  0000                         macro   wait19
0437+  0000~                        wait12
0438+  0000~                        wait7
0439+  0000                         endm
0440+  0000             
0441+  0000                         macro   wait20
0442+  0000~                        wait11
0443+  0000~                        wait9
0444+  0000                         endm
0445+  0000             
0446+  0000                         macro   wait21
0447+  0000~                        wait12
0448+  0000~                        wait9
0449+  0000                         endm
0450+  0000             
0451+  0000                         macro   wait22
0452+  0000~                        wait18
0453+  0000~                        wait4
0454+  0000                         endm
0455+  0000             
0456+  0000                         macro   wait23
0457+  0000~                        wait14
0458+  0000~                        wait9
0459+  0000                         endm
0460+  0000             
0461+  0000                         macro   wait24
0462+  0000~                        wait12
0463+  0000~                        wait12
0464+  0000                         endm
0465+  0000             
0466+  0000                         macro   wait25
0467+  0000~                        wait18
0468+  0000~                        wait7
0469+  0000                         endm
0470+  0000             
0471+  0000                         macro   wait26
0472+  0000~                        wait18
0473+  0000~                        wait8
0474+  0000                         endm
0475+  0000             
0476+  0000                         macro   wait27
0477+  0000~                        wait18
0478+  0000~                        wait9
0479+  0000                         endm
0480+  0000             
0481+  0000                         macro   wait28
0482+  0000~                        wait21
0483+  0000~                        wait7
0484+  0000                         endm
0485+  0000             
0486+  0000                         macro   wait29
0487+  0000~                        wait21
0488+  0000~                        wait8
0489+  0000                         endm
0490+  0000             
0491+  0000                         macro   wait30
0492+  0000~                        wait21
0493+  0000~                        wait9
0494+  0000                         endm
0495+  0000             
0496+  0000                         macro   wait31
0497+  0000~                        wait21
0498+  0000~                        wait10
0499+  0000                         endm
0500+  0000             
0501+  0000                         macro   wait32
0502+  0000~                        wait20
0503+  0000~                        wait12
0504+  0000                         endm
0505+  0000             
0506+  0000                         macro   wait33
0507+  0000~                        wait21
0508+  0000~                        wait12
0509+  0000                         endm
0510+  0000             
0511+  0000                         macro   wait34
0512+  0000~                        wait2p16x 2
0513+  0000                         endm
0514+  0000             
0515+  0000                         macro   wait35
0516+  0000~                        wait28
0517+  0000~                        wait7
0518+  0000                         endm
0519+  0000             
0520+  0000                         macro   wait36
0521+  0000~                        wait27
0522+  0000~                        wait9
0523+  0000                         endm
0524+  0000             
0525+  0000                         macro   wait37
0526+  0000~                        wait28
0527+  0000~                        wait9
0528+  0000                         endm
0529+  0000             
0530+  0000                         macro   wait38
0531+  0000~                        wait27
0532+  0000~                        wait11
0533+  0000                         endm
0534+  0000             
0535+  0000                         macro   wait39
0536+  0000~                        wait27
0537+  0000~                        wait12
0538+  0000                         endm
0539+  0000             
0540+  0000                         macro   wait40
0541+  0000~                        wait27
0542+  0000~                        wait13
0543+  0000                         endm
0544+  0000             
0545+  0000                         macro   wait41
0546+  0000~                        wait34
0547+  0000~                        wait7
0548+  0000                         endm
0549+  0000             
0550+  0000                         macro   wait42
0551+  0000~                        wait34
0552+  0000~                        wait8
0553+  0000                         endm
0554+  0000             
0555+  0000                         macro   wait43
0556+  0000~                        wait36
0557+  0000~                        wait7
0558+  0000                         endm
0559+  0000             
0560+  0000                         macro   wait44
0561+  0000~                        wait34
0562+  0000~                        wait10
0563+  0000                         endm
0564+  0000             
0565+  0000                         macro   wait45
0566+  0000~                        wait36
0567+  0000~                        wait9
0568+  0000                         endm
0569+  0000             
0570+  0000                         macro   wait46
0571+  0000~                        wait34
0572+  0000~                        wait12
0573+  0000                         endm
0574+  0000             
0575+  0000                         macro   wait47
0576+  0000~                        wait34
0577+  0000~                        wait13
0578+  0000                         endm
0579+  0000             
0580+  0000                         macro   wait48
0581+  0000~                        wait36
0582+  0000~                        wait12
0583+  0000                         endm
0584+  0000             
0585+  0000                         macro   wait49
0586+  0000~                        wait36
0587+  0000~                        wait13
0588+  0000                         endm
0589+  0000             
0590+  0000                         macro   wait50
0591+  0000~                        wait2p16x 3
0592+  0000                         endm
0593+  0000             
0594+  0000                         macro   wait51
0595+  0000~                        wait34
0596+  0000~                        wait17
0597+  0000                         endm
0598+  0000             
0599+  0000                         macro   wait52
0600+  0000~                        wait34
0601+  0000~                        wait18
0602+  0000                         endm
0603+  0000             
0604+  0000                         macro   wait53
0605+  0000~                        wait36
0606+  0000~                        wait17
0607+  0000                         endm
0608+  0000             
0609+  0000                         macro   wait54
0610+  0000~                        wait50
0611+  0000~                        wait4
0612+  0000                         endm
0613+  0000             
0614+  0000                         macro   wait55
0615+  0000~                        wait34
0616+  0000~                        wait21
0617+  0000                         endm
0618+  0000             
0619+  0000                         macro   wait56
0620+  0000~                        wait34
0621+  0000~                        wait22
0622+  0000                         endm
0623+  0000             
0624+  0000                         macro   wait57
0625+  0000~                        wait50
0626+  0000~                        wait7
0627+  0000                         endm
0628+  0000             
0629+  0000                         macro   wait58
0630+  0000~                        wait50
0631+  0000~                        wait8
0632+  0000                         endm
0633+  0000             
0634+  0000                         macro   wait59
0635+  0000~                        wait50
0636+  0000~                        wait9
0637+  0000                         endm
0638+  0000             
0639+  0000                         macro   wait60
0640+  0000~                        wait50
0641+  0000~                        wait10
0642+  0000                         endm
0643+  0000             
0644+  0000                         macro   wait61
0645+  0000~                        wait50
0646+  0000~                        wait11
0647+  0000                         endm
0648+  0000             
0649+  0000                         macro   wait62
0650+  0000~                        wait50
0651+  0000~                        wait12
0652+  0000                         endm
0653+  0000             
0654+  0000                         macro   wait63
0655+  0000~                        wait50
0656+  0000~                        wait13
0657+  0000                         endm
0658+  0000             
0659+  0000                         macro   wait64
0660+  0000~                        wait50
0661+  0000~                        wait14
0662+  0000                         endm
0663+  0000             
0664+  0000                         macro   wait65
0665+  0000~                        wait50
0666+  0000~                        wait15
0667+  0000                         endm
0668+  0000             
0669+  0000                         macro   wait66
0670+  0000~                        wait2p16x 4
0671+  0000                         endm
0672+  0000             
0673+  0000                         macro   wait67
0674+  0000~                        wait50
0675+  0000~                        wait17
0676+  0000                         endm
0677+  0000             
0678+  0000                         macro   wait68
0679+  0000~                        wait50
0680+  0000~                        wait18
0681+  0000                         endm
0682+  0000             
0683+  0000                         macro   wait70
0684+  0000~                        wait66
0685+  0000~                        wait4
0686+  0000                         endm
0687+  0000             
0688+  0000                         macro   wait72
0689+  0000~                        wait50
0690+  0000~                        wait22
0691+  0000                         endm
0692+  0000             
0693+  0000                         macro   wait73
0694+  0000~                        wait66
0695+  0000~                        wait7
0696+  0000                         endm
0697+  0000             
0698+  0000                         macro   wait74
0699+  0000~                        wait66
0700+  0000~                        wait8
0701+  0000                         endm
0702+  0000             
0703+  0000                         macro   wait75
0704+  0000~                        wait66
0705+  0000~                        wait9
0706+  0000                         endm
0707+  0000             
0708+  0000                         macro   wait76
0709+  0000~                        wait66
0710+  0000~                        wait10
0711+  0000                         endm
0712+  0000             
0713+  0000                         macro   wait77
0714+  0000~                        wait66
0715+  0000~                        wait11
0716+  0000                         endm
0717+  0000             
0718+  0000                         macro   wait78
0719+  0000~                        wait66
0720+  0000~                        wait12
0721+  0000                         endm
0722+  0000             
0723+  0000                         macro   wait79
0724+  0000~                        wait66
0725+  0000~                        wait13
0726+  0000                         endm
0727+  0000             
0728+  0000                         macro   wait80
0729+  0000~                        wait66
0730+  0000~                        wait14
0731+  0000                         endm
0732+  0000             
0733+  0000                         macro   wait81
0734+  0000~                        wait66
0735+  0000~                        wait15
0736+  0000                         endm
0737+  0000             
0738+  0000                         macro   wait82
0739+  0000~                        wait2p16x 5
0740+  0000                         endm
0741+  0000             
0742+  0000                         macro   wait83
0743+  0000~                        wait66
0744+  0000~                        wait17
0745+  0000                         endm
0746+  0000             
0747+  0000                         macro   wait84
0748+  0000~                        wait66
0749+  0000~                        wait18
0750+  0000                         endm
0751+  0000             
0752+  0000                         macro   wait85
0753+  0000~                        wait66
0754+  0000~                        wait19
0755+  0000                         endm
0756+  0000             
0757+  0000                         macro   wait86
0758+  0000~                        wait82
0759+  0000~                        wait4
0760+  0000                         endm
0761+  0000             
0762+  0000                         macro   wait87
0763+  0000~                        wait66
0764+  0000~                        wait21
0765+  0000                         endm
0766+  0000             
0767+  0000                         macro   wait88
0768+  0000~                        wait66
0769+  0000~                        wait22
0770+  0000                         endm
0771+  0000             
0772+  0000                         macro   wait89
0773+  0000~                        wait82
0774+  0000~                        wait7
0775+  0000                         endm
0776+  0000             
0777+  0000                         macro   wait90
0778+  0000~                        wait82
0779+  0000~                        wait8
0780+  0000                         endm
0781+  0000             
0782+  0000                         macro   wait91
0783+  0000~                        wait82
0784+  0000~                        wait9
0785+  0000                         endm
0786+  0000             
0787+  0000                         macro   wait92
0788+  0000~                        wait82
0789+  0000~                        wait10
0790+  0000                         endm
0791+  0000             
0792+  0000                         macro   wait94
0793+  0000~                        wait82
0794+  0000~                        wait12
0795+  0000                         endm
0796+  0000             
0797+  0000                         macro   wait95
0798+  0000~                        wait82
0799+  0000~                        wait13
0800+  0000                         endm
0801+  0000             
0802+  0000                         macro   wait96
0803+  0000~                        wait82
0804+  0000~                        wait14
0805+  0000                         endm
0806+  0000             
0807+  0000                         macro   wait97
0808+  0000~                        wait82
0809+  0000~                        wait15
0810+  0000                         endm
0811+  0000             
0812+  0000                         macro   wait98
0813+  0000~                        wait2p16x 6
0814+  0000                         endm
0815+  0000             
0816+  0000                         macro   wait99
0817+  0000~                        wait82
0818+  0000~                        wait17
0819+  0000                         endm
0820+  0000             
0821+  0000                         macro   wait100
0822+  0000~                        wait82
0823+  0000~                        wait18
0824+  0000                         endm
0825+  0000             
0826+  0000                         macro   wait102
0827+  0000~                        wait98
0828+  0000~                        wait4
0829+  0000                         endm
0830+  0000             
0831+  0000                         macro   wait103
0832+  0000~                        wait82
0833+  0000~                        wait21
0834+  0000                         endm
0835+  0000             
0836+  0000                         macro   wait104
0837+  0000~                        wait82
0838+  0000~                        wait22
0839+  0000                         endm
0840+  0000             
0841+  0000                         macro   wait105
0842+  0000~                        wait98
0843+  0000~                        wait7
0844+  0000                         endm
0845+  0000             
0846+  0000                         macro   wait106
0847+  0000~                        wait98
0848+  0000~                        wait8
0849+  0000                         endm
0850+  0000             
0851+  0000                         macro   wait107
0852+  0000~                        wait98
0853+  0000~                        wait9
0854+  0000                         endm
0855+  0000             
0856+  0000                         macro   wait108
0857+  0000~                        wait98
0858+  0000~                        wait10
0859+  0000                         endm
0860+  0000             
0861+  0000                         macro   wait109
0862+  0000~                        wait98
0863+  0000~                        wait11
0864+  0000                         endm
0865+  0000             
0866+  0000                         macro   wait110
0867+  0000~                        wait98
0868+  0000~                        wait12
0869+  0000                         endm
0870+  0000             
0871+  0000                         macro   wait111
0872+  0000~                        wait98
0873+  0000~                        wait13
0874+  0000                         endm
0875+  0000             
0876+  0000                         macro   wait112
0877+  0000~                        wait98
0878+  0000~                        wait14
0879+  0000                         endm
0880+  0000             
0881+  0000                         macro   wait114
0882+  0000~                        wait2p16x 7
0883+  0000                         endm
0884+  0000             
0885+  0000                         macro   wait115
0886+  0000~                        wait98
0887+  0000~                        wait17
0888+  0000                         endm
0889+  0000             
0890+  0000                         macro   wait116
0891+  0000~                        wait98
0892+  0000~                        wait18
0893+  0000                         endm
0894+  0000             
0895+  0000                         macro   wait117
0896+  0000~                        wait98
0897+  0000~                        wait19
0898+  0000                         endm
0899+  0000             
0900+  0000                         macro   wait118
0901+  0000~                        wait114
0902+  0000~                        wait4
0903+  0000                         endm
0904+  0000             
0905+  0000                         macro   wait119
0906+  0000~                        wait98
0907+  0000~                        wait21
0908+  0000                         endm
0909+  0000             
0910+  0000                         macro   wait120
0911+  0000~                        wait98
0912+  0000~                        wait22
0913+  0000                         endm
0914+  0000             
0915+  0000                         macro   wait121
0916+  0000~                        wait114
0917+  0000~                        wait7
0918+  0000                         endm
0919+  0000             
0920+  0000                         macro   wait122
0921+  0000~                        wait114
0922+  0000~                        wait8
0923+  0000                         endm
0924+  0000             
0925+  0000                         macro   wait123
0926+  0000~                        wait114
0927+  0000~                        wait9
0928+  0000                         endm
0929+  0000             
0930+  0000                         macro   wait124
0931+  0000~                        wait114
0932+  0000~                        wait10
0933+  0000                         endm
0934+  0000             
0935+  0000                         macro   wait125
0936+  0000~                        wait114
0937+  0000~                        wait11
0938+  0000                         endm
0939+  0000             
0940+  0000                         macro   wait126
0941+  0000~                        wait114
0942+  0000~                        wait12
0943+  0000                         endm
0944+  0000             
0945+  0000                         macro   wait127
0946+  0000~                        wait114
0947+  0000~                        wait13
0948+  0000                         endm
0949+  0000             
0950+  0000                         macro   wait128
0951+  0000~                        wait114
0952+  0000~                        wait14
0953+  0000                         endm
0954+  0000             
0955+  0000                         macro   wait129
0956+  0000~                        wait114
0957+  0000~                        wait15
0958+  0000                         endm
0959+  0000             
0960+  0000                         macro   wait130
0961+  0000~                        wait2p16x 8
0962+  0000                         endm
0963+  0000             
0964+  0000                         macro   wait131
0965+  0000~                        wait114
0966+  0000~                        wait17
0967+  0000                         endm
0968+  0000             
0969+  0000                         macro   wait132
0970+  0000~                        wait114
0971+  0000~                        wait18
0972+  0000                         endm
0973+  0000             
0974+  0000                         macro   wait133
0975+  0000~                        wait114
0976+  0000~                        wait19
0977+  0000                         endm
0978+  0000             
0979+  0000                         macro   wait134
0980+  0000~                        wait130
0981+  0000~                        wait4
0982+  0000                         endm
0983+  0000             
0984+  0000                         macro   wait135
0985+  0000~                        wait114
0986+  0000~                        wait21
0987+  0000                         endm
0988+  0000             
0989+  0000                         macro   wait136
0990+  0000~                        wait114
0991+  0000~                        wait22
0992+  0000                         endm
0993+  0000             
0994+  0000                         macro   wait137
0995+  0000~                        wait130
0996+  0000~                        wait7
0997+  0000                         endm
0998+  0000             
0999+  0000                         macro   wait138
1000+  0000~                        wait130
1001+  0000~                        wait8
1002+  0000                         endm
1003+  0000             
1004+  0000                         macro   wait139
1005+  0000~                        wait130
1006+  0000~                        wait9
1007+  0000                         endm
1008+  0000             
1009+  0000                         macro   wait140
1010+  0000~                        wait130
1011+  0000~                        wait10
1012+  0000                         endm
1013+  0000             
1014+  0000                         macro   wait141
1015+  0000~                        wait130
1016+  0000~                        wait11
1017+  0000                         endm
1018+  0000             
1019+  0000                         macro   wait144
1020+  0000~                        wait130
1021+  0000~                        wait14
1022+  0000                         endm
1023+  0000             
1024+  0000                         macro   wait145
1025+  0000~                        wait130
1026+  0000~                        wait15
1027+  0000                         endm
1028+  0000             
1029+  0000                         macro   wait146
1030+  0000~                        wait2p16x 9
1031+  0000                         endm
1032+  0000             
1033+  0000                         macro   wait147
1034+  0000~                        wait130
1035+  0000~                        wait17
1036+  0000                         endm
1037+  0000             
1038+  0000                         macro   wait148
1039+  0000~                        wait130
1040+  0000~                        wait18
1041+  0000                         endm
1042+  0000             
1043+  0000                         macro   wait149
1044+  0000~                        wait130
1045+  0000~                        wait19
1046+  0000                         endm
1047+  0000             
1048+  0000                         macro   wait150
1049+  0000~                        wait146
1050+  0000~                        wait4
1051+  0000                         endm
1052+  0000             
1053+  0000                         macro   wait154
1054+  0000~                        wait146
1055+  0000~                        wait8
1056+  0000                         endm
1057+  0000             
1058+  0000                         macro   wait155
1059+  0000~                        wait146
1060+  0000~                        wait9
1061+  0000                         endm
1062+  0000             
1063+  0000                         macro   wait156
1064+  0000~                        wait146
1065+  0000~                        wait10
1066+  0000                         endm
1067+  0000             
1068+  0000                         macro   wait157
1069+  0000~                        wait146
1070+  0000~                        wait11
1071+  0000                         endm
1072+  0000             
1073+  0000                         macro   wait158
1074+  0000~                        wait146
1075+  0000~                        wait12
1076+  0000                         endm
1077+  0000             
1078+  0000                         macro   wait160
1079+  0000~                        wait146
1080+  0000~                        wait14
1081+  0000                         endm
1082+  0000             
1083+  0000                         macro   wait161
1084+  0000~                        wait146
1085+  0000~                        wait15
1086+  0000                         endm
1087+  0000             
1088+  0000                         macro   wait162
1089+  0000~                        wait2p16x 10
1090+  0000                         endm
1091+  0000             
1092+  0000                         macro   wait164
1093+  0000~                        wait146
1094+  0000~                        wait18
1095+  0000                         endm
1096+  0000             
1097+  0000                         macro   wait165
1098+  0000~                        wait146
1099+  0000~                        wait19
1100+  0000                         endm
1101+  0000             
1102+  0000                         macro   wait166
1103+  0000~                        wait162
1104+  0000~                        wait4
1105+  0000                         endm
1106+  0000             
1107+  0000                         macro   wait172
1108+  0000~                        wait162
1109+  0000~                        wait10
1110+  0000                         endm
1111+  0000             
1112+  0000                         macro   wait174
1113+  0000~                        wait162
1114+  0000~                        wait12
1115+  0000                         endm
1116+  0000             
1117+  0000                         macro   wait175
1118+  0000~                        wait162
1119+  0000~                        wait13
1120+  0000                         endm
1121+  0000             
1122+  0000                         macro   wait176
1123+  0000~                        wait162
1124+  0000~                        wait14
1125+  0000                         endm
1126+  0000             
1127+  0000                         macro   wait178
1128+  0000~                        wait2p16x 11
1129+  0000                         endm
1130+  0000             
1131+  0000                         macro   wait179
1132+  0000~                        wait162
1133+  0000~                        wait17
1134+  0000                         endm
1135+  0000             
1136+  0000                         macro   wait180
1137+  0000~                        wait162
1138+  0000~                        wait18
1139+  0000                         endm
1140+  0000             
1141+  0000                         macro   wait182
1142+  0000~                        wait178
1143+  0000~                        wait4
1144+  0000                         endm
1145+  0000             
1146+  0000                         macro   wait183
1147+  0000~                        wait162
1148+  0000~                        wait121
1149+  0000                         endm
1150+  0000             
1151+  0000                         macro   wait186
1152+  0000~                        wait178
1153+  0000~                        wait8
1154+  0000                         endm
1155+  0000             
1156+  0000                         macro   wait187
1157+  0000~                        wait178
1158+  0000~                        wait9
1159+  0000                         endm
1160+  0000             
1161+  0000                         macro   wait189
1162+  0000~                        wait178
1163+  0000~                        wait11
1164+  0000                         endm
1165+  0000             
1166+  0000                         macro   wait191
1167+  0000~                        wait178
1168+  0000~                        wait13
1169+  0000                         endm
1170+  0000             
1171+  0000                         macro   wait192
1172+  0000~                        wait178
1173+  0000~                        wait14
1174+  0000                         endm
1175+  0000             
1176+  0000                         macro   wait193
1177+  0000~                        wait178
1178+  0000~                        wait15
1179+  0000                         endm
1180+  0000             
1181+  0000                         macro   wait194
1182+  0000~                        wait2p16x 12
1183+  0000                         endm
1184+  0000             
1185+  0000                         macro   wait197
1186+  0000~                        wait178
1187+  0000~                        wait19
1188+  0000                         endm
1189+  0000             
1190+  0000                         macro   wait203
1191+  0000~                        wait194
1192+  0000~                        wait9
1193+  0000                         endm
1194+  0000             
1195+  0000                         macro   wait210
1196+  0000~                        wait2p16x 13
1197+  0000                         endm
1198+  0000             
1199+  0000                         macro   wait226
1200+  0000~                        wait2p16x 14
1201+  0000                         endm
1202+  0000             
1203+  0000                         macro   wait234
1204+  0000~                        wait226
1205+  0000~                        wait8
1206+  0000                         endm
1207+  0000             
1208+  0000                         macro   wait242
1209+  0000~                        wait2p16x 15
1210+  0000                         endm
1211+  0000             
1212+  0000                         macro   wait244
1213+  0000~                        wait226
1214+  0000~                        wait18
1215+  0000                         endm
1216+  0000             
1217+  0000                         macro   wait246
1218+  0000~                        wait242
1219+  0000~                        wait4
1220+  0000                         endm
1221+  0000             
1222+  0000                         macro   wait254
1223+  0000~                        wait242
1224+  0000~                        wait12
1225+  0000                         endm
1226+  0000             
1227+  0000                         macro   wait258
1228+  0000~                        wait2p16x 16
1229+  0000                         endm
1230+  0000             
1231+  0000                         macro   wait260
1232+  0000~                        wait242
1233+  0000~                        wait18
1234+  0000                         endm
1235+  0000             
1236+  0000                         macro   wait262
1237+  0000~                        wait258
1238+  0000~                        wait4
1239+  0000                         endm
1240+  0000             
1241+  0000                         macro   wait264
1242+  0000~                        wait242
1243+  0000~                        wait22
1244+  0000                         endm
1245+  0000             
1246+  0000                         macro   wait268
1247+  0000~                        wait258
1248+  0000~                        wait10
1249+  0000                         endm
1250+  0000             
1251+  0000                         macro   wait274
1252+  0000~                        wait2p16x 17
1253+  0000                         endm
1254+  0000             
1255+  0000                         macro   wait276
1256+  0000~                        wait258
1257+  0000~                        wait18
1258+  0000                         endm
1259+  0000             
1260+  0000                         macro   wait278
1261+  0000~                        wait274
1262+  0000~                        wait4
1263+  0000                         endm
1264+  0000             
1265+  0000                         macro   wait282
1266+  0000~                        wait274
1267+  0000~                        wait8
1268+  0000                         endm
1269+  0000             
1270+  0000                         macro   wait283
1271+  0000~                        wait274
1272+  0000~                        wait9
1273+  0000                         endm
1274+  0000             
1275+  0000                         macro   wait285
1276+  0000~                        wait274
1277+  0000~                        wait11
1278+  0000                         endm
1279+  0000             
1280+  0000                         macro   wait287
1281+  0000~                        wait274
1282+  0000~                        wait13
1283+  0000                         endm
1284+  0000             
1285+  0000                         macro   wait290
1286+  0000~                        wait2p16x 18
1287+  0000                         endm
1288+  0000             
1289+  0000                         macro   wait294
1290+  0000~                        wait290
1291+  0000~                        wait4
1292+  0000                         endm
1293+  0000             
1294+  0000                         macro   wait295
1295+  0000~                        wait274
1296+  0000~                        wait21
1297+  0000                         endm
1298+  0000             
1299+  0000                         macro   wait298
1300+  0000~                        wait290
1301+  0000~                        wait8
1302+  0000                         endm
1303+  0000             
1304+  0000                         macro   wait305
1305+  0000~                        wait290
1306+  0000~                        wait15
1307+  0000                         endm
1308+  0000             
1309+  0000                         macro   wait306
1310+  0000~                        wait2p16x 19
1311+  0000                         endm
1312+  0000             
1313+  0000                         macro   wait308
1314+  0000~                        wait290
1315+  0000~                        wait18
1316+  0000                         endm
1317+  0000             
1318+  0000                         macro   wait320
1319+  0000~                        wait306
1320+  0000~                        wait14
1321+  0000                         endm
1322+  0000             
1323+  0000                         macro   wait322
1324+  0000~                        wait2p16x 20
1325+  0000                         endm
1326+  0000             
1327+  0000                         macro   wait324
1328+  0000~                        wait306
1329+  0000~                        wait18
1330+  0000                         endm
1331+  0000             
1332+  0000                         macro   wait329
1333+  0000~                        wait322
1334+  0000~                        wait7
1335+  0000                         endm
1336+  0000             
1337+  0000                         macro   wait337
1338+  0000~                        wait322
1339+  0000~                        wait15
1340+  0000                         endm
1341+  0000             
1342+  0000                         macro   wait338
1343+  0000~                        wait2p16x 21
1344+  0000                         endm
1345+  0000             
1346+  0000                         macro   wait345
1347+  0000~                        wait338
1348+  0000~                        wait7
1349+  0000                         endm
1350+  0000             
1351+  0000                         macro   wait434
1352+  0000~                        wait2p16x 27
1353+  0000                         endm
1354+  0000             
1355+  0000                         macro   wait450
1356+  0000~                        wait2p16x 28
1357+  0000                         endm
1358+  0000             
1359+  0000                         macro   wait454
1360+  0000~                        wait450
1361+  0000~                        wait4
1362+  0000                         endm
1363+  0000             
1364+  0000                         macro   wait455
1365+  0000~                        wait434
1366+  0000~                        wait21
1367+  0000                         endm
1368+  0000             
1369+  0000                         macro   wait546
1370+  0000~                        wait2p16x 34
1371+  0000                         endm
1372+  0000             
1373+  0000                         macro   wait562
1374+  0000~                        wait2p16x 35
1375+  0000                         endm
1376+  0000             
1377+  0000                         macro   wait567
1378+  0000~                        wait546
1379+  0000~                        wait21
1380+  0000                         endm
1381+  0000             
1382+  0000                         macro   wait578
1383+  0000~                        wait2p16x 36
1384+  0000                         endm
1385+  0000             
1386+  0000                         macro   wait586
1387+  0000~                        wait578
1388+  0000~                        wait8
1389+  0000                         endm
1390+  0000             
1391+  0000                         macro   wait590
1392+  0000~                        wait578
1393+  0000~                        wait12
1394+  0000                         endm
1395+  0000             
1396+  0000                         macro   wait594
1397+  0000~                        wait2p16x 37
1398+  0000                         endm
1399+  0000             
1400+  0000                         macro   wait595
1401+  0000~                        wait578
1402+  0000~                        wait17
1403+  0000                         endm
1404+  0000             
1405+  0000                         macro   wait598
1406+  0000~                        wait594
1407+  0000~                        wait4
1408+  0000                         endm
1409+  0000             
1410+  0000                         macro   wait599
1411+  0000~                        wait578
1412+  0000~                        wait21
1413+  0000                         endm
1414+  0000             
1415+  0000                         macro   wait602
1416+  0000~                        wait594
1417+  0000~                        wait8
1418+  0000                         endm
1419+  0000             
1420+  0000                         macro   wait609
1421+  0000~                        wait594
1422+  0000~                        wait15
1423+  0000                         endm
1424+  0000             
1425+  0000                         macro   wait610
1426+  0000~                        wait2p16x 38
1427+  0000                         endm
1428+  0000             
1429+  0000                         macro   wait614
1430+  0000~                        wait610
1431+  0000~                        wait4
1432+  0000                         endm
1433+  0000             
1434+  0000                         macro   wait618
1435+  0000~                        wait610
1436+  0000~                        wait8
1437+  0000                         endm
1438+  0000             
1439+  0000                         macro   wait619
1440+  0000~                        wait610
1441+  0000~                        wait9
1442+  0000                         endm
1443+  0000             
1444+  0000                         macro   wait622
1445+  0000~                        wait610
1446+  0000~                        wait12
1447+  0000                         endm
1448+  0000             
1449+  0000                         macro   wait623
1450+  0000~                        wait610
1451+  0000~                        wait13
1452+  0000                         endm
1453+  0000             
1454+  0000                         macro   wait626
1455+  0000~                        wait2p16x 39
1456+  0000                         endm
1457+  0000             
1458+  0000                         macro   wait634
1459+  0000~                        wait626
1460+  0000~                        wait8
1461+  0000                         endm
1462+  0000             
1463+  0000                         macro   wait638
1464+  0000~                        wait626
1465+  0000~                        wait12
1466+  0000                         endm
0115   0000             
0116   0000             
0117   0000             ; handlePCMCommand
0118   0000             ; ----------------
0119   0000             ; ? ->  HL  -> ?
0120   0000             ; ? ->  BC  -> ?
0121   0000             ; ? ->  DE  -> ?
0122   0000             ;
0123   0000             ; handle PCM command for channel 'ch' (PCM id < 0x100)
0124   0000             ; = 173 cycles
0125   0000             
0126   0000                         macro handlePCMCommand ch
0127   0000~            
0128   0000~                        LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
0129   0000~                        LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
0130   0000~            
0131   0000~                        LD      A, C                    ; A = new prio              ' 4     |
0132   0000~                        CP      (HL)                    ; compare to old prio       ' 7     |
0133   0000~                        LD      A, B                    ; A = SFX id                ' 4     | 25 (55)
0134   0000~                        JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
0135   0000~            
0136   0000~                        OR      A                       ; silent PCM ?              ' 4     |
0137   0000~                        JP      Z, .play_new            ; always play               ' 10    | 14 (69)
0138   0000~            
0139   0000~                        wait94                          ; sync                      ' 94    |
0140   0000~                        JP      .end                    ;                           ' 10    | 88 (173)
0141   0000~            
0142   0000~            .play_new_wait
0143   0000~                        NOP                             ;                           ' 4     |
0144   0000~                        JP      .play_new               ; sync                      ' 10    | 14 (69)
0145   0000~            
0146   0000~            .play_new
0147   0000~                        LD      (HL), C                 ; set new prio              ' 7     | (76)
0148   0000~            
0149   0000~                        LD      H, (ID_TABLE>>10)       ;                           ' 7     |
0150   0000~                        LD      L, A                    ;                           ' 4     |
0151   0000~                        ADD     HL, HL                  ;                           ' 6     | 33 (109)
0152   0000~                        ADD     HL, HL                  ; HL point on new PCM addr  ' 6     |
0153   0000~                        LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    |
0154   0000~            
0155   0000~                        LDI                             ; copy params               ' 16    |
0156   0000~                        LDI                             ;                           ' 16    | 64 (173)
0157   0000~                        LDI                             ;                           ' 16    |
0158   0000~                        LDI                             ;                           ' 16    |
0159   0000~            
0160   0000~            .end
0161   0000                         endm
0162   0000             
0163   0000             
0164   0000             ; handlePCMCommandXGM
0165   0000             ; -------------------
0166   0000             ; XGM buffer ->  DE
0167   0000             ; PCM prio   ->  C   -> ?
0168   0000             ; PCM id     ->  B   -> ?
0169   0000             ; ?          ->  HL  -> ?
0170   0000             ;
0171   0000             ; handle PCM command for channel 'ch' for XGM music (PCM id < 0x40)
0172   0000             ; = 170 cycles
0173   0000             
0174   0000                         macro handlePCMCommandXGM ch
0175   0000~            
0176   0000~                        LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (10)
0177   0000~            
0178   0000~                        LD      A, C                    ; A = new prio              ' 4     |
0179   0000~                        CP      (HL)                    ; compare new and old prio  ' 7     | 25 (35)
0180   0000~                        LD      A, B                    ; A = SFX id (max = $3F)    ' 4     |
0181   0000~                        JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
0182   0000~            
0183   0000~                        OR      A                       ; silent PCM ?              ' 4     |
0184   0000~                        JP      Z, .play_new            ; always play               ' 10    | 14 (49)
0185   0000~            
0186   0000~                        wait111                         ; sync                      ' 111   |
0187   0000~                        JP      .end                    ;                           ' 10    | 121 (170)
0188   0000~            
0189   0000~            .play_new_wait
0190   0000~                        OR      0                       ;                           ' 7     |
0191   0000~                        OR      0                       ; sync without changing A   ' 7     | 14 (49)
0192   0000~            
0193   0000~            .play_new
0194   0000~                        LD      (HL), C                 ; set new prio              ' 7     | (56)
0195   0000~            
0196   0000~                        LD      H, (ID_TABLE>>8)        ;                           ' 7     |
0197   0000~                        ADD     A                       ;                           ' 4     |
0198   0000~                        ADD     A                       ;                           ' 4     | 19 (75)
0199   0000~                        LD      L, A                    ; HL point on new PCM addr  ' 4     |
0200   0000~            
0201   0000~                        PUSH    DE                      ; save DE                   ' 11    |
0202   0000~                        LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    | 21 (96)
0203   0000~            
0204   0000~                        LDI                             ; copy params               ' 16    |
0205   0000~                        LDI                             ;                           ' 16    | 64 (160)
0206   0000~                        LDI                             ;                           ' 16    |
0207   0000~                        LDI                             ;                           ' 16    |
0208   0000~            
0209   0000~                        POP     DE                      ; restore DE                ' 10    | (170)
0210   0000~            
0211   0000~            .end
0212   0000                         endm
0213   0000             
0214   0000             
0215   0000             ; prepareChannel
0216   0000             ; --------------
0217   0000             ; ? ->  HL  ->  point to the sample source (ROM)
0218   0000             ; ? ->  DE  ->  point to write buffer
0219   0000             ;
0220   0000             ; set bank and prepare registers to play PCM channel 'ch'
0221   0000             ; = 176 cycles
0222   0000             
0223   0000                         macro prepareChannel ch
0224   0000~            
0225   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0226   0000~            
0227   0000~                        LD      A, L                    ; A = bit 8-15          ' 4     |
0228   0000~                        RLA                             ; C flag = bit 15       ' 4     |
0229   0000~                        LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0230   0000~                        RLA                             ; A = bit 15-22         ' 4     |
0231   0000~            
0232   0000~                        setBank_DE                      ; set bank              ' 105   | (137)
0233   0000~            
0234   0000~                        LD      H, L                    ;                       ' 4     |
0235   0000~                        SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0236   0000~                        LD      L, 0                    ; HL = sample addr bank ' 7     |
0237   0000~            
0238   0000~                        LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0239   0000~            
0240   0000                         endm
0241   0000             
0242   0000             
0243   0000             ; stopChannel
0244   0000             ; -----------
0245   0000             ; ? ->  HL  -> STATUS
0246   0000             ;
0247   0000             ; set null sample play for channel 'ch'
0248   0000             ; = 100 cycles
0249   0000             
0250   0000                         macro stopChannel ch
0251   0000~            
0252   0000~                        LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0253   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0254   0000~                        LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0255   0000~                        LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0256   0000~            
0257   0000~                        XOR     A                       ;                           ' 4     |
0258   0000~                        LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0259   0000~            
0260   0000~                        LD      HL, STATUS              ; HL = STATUS               ' 10    |
0261   0000~                        RES     ch, (HL)                ; clear play status         ' 15    | 25 (100)
0262   0000~            
0263   0000                         endm
0264   0000             
0265   0000             
0266   0000             ; updateChannelData
0267   0000             ; -----------------
0268   0000             ; ? ->  HL  -> ?
0269   0000             ;
0270   0000             ; update sample address and sample lenght
0271   0000             ; check is sample is done and stop it if needed
0272   0000             ; = 178 cycles
0273   0000             
0274   0000                         macro updateChannelData ch
0275   0000~            
0276   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0277   0000~                        INC     HL                      ;                       ' 6     | (38)
0278   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0279   0000~            
0280   0000~                        LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0281   0000~                        DEC     HL                      ;                       ' 6     | 22 (60)
0282   0000~            
0283   0000~                        LD      A, H                    ;                       ' 4     |
0284   0000~                        OR      L                       ;                       ' 4     | 18 (78)
0285   0000~                        JP      Z, .done                ; sample done ?         ' 10    |
0286   0000~            
0287   0000~                        wait74                          ;                       ' 74    |
0288   0000~                        JP      .end                    ;                       ' 10    | 84 (162)
0289   0000~            
0290   0000~            .done
0291   0000~                        LD      HL, STATUS              ; HL = STATUS           ' 10    |
0292   0000~                        RES     ch, (HL)                ; clear play status     ' 15    | 25 (103)
0293   0000~            
0294   0000~                        XOR     A                       ;                       ' 4     |
0295   0000~                        LD      (PCM_PRIO+(ch*8)), A    ; clear prio            ' 13    | 17 (120)
0296   0000~            
0297   0000~                        LD      HL, (ID_TABLE+0)        ; HL = null PCM addr    ' 16    |
0298   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr      ' 16    | 42 (162)
0299   0000~                        LD      HL, $0001               ; HL = null PCM len     ' 10    |
0300   0000~            
0301   0000~            .end
0302   0000~                        LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    | (178)
0303   0000~            
0304   0000                         endm
0305   0000             
0306   0000             
0307   0000             ; compareReadWrite
0308   0000             ; ----------------
0309   0000             ; read buffer  -> BC'
0310   0000             ; write buffer -> DE
0311   0000             ;                 ZF ->  Write == Read buffer
0312   0000             ;
0313   0000             ; compare read and write buffer
0314   0000             ; = 16 cycles
0315   0000             
0316   0000                         macro compareReadWrite
0317   0000~            
0318   0000~                        EXX                     ;                           ' 4     |
0319   0000~                        LD      A, B            ; A = read buffer high      ' 4     |
0320   0000~                        EXX                     ;                           ' 4     | 16
0321   0000~                        CP      D               ; compare write buffer high ' 4     |
0322   0000~            
0323   0000                         endm
0324   0000             
0325   0000             
0326   0000             ; readAndClear2
0327   0000             ; -------------
0328   0000             ; ? ->  HL  ->  point to the sample source (ROM)
0329   0000             ; ? ->  DE  ->  point to write buffer
0330   0000             ; ? ->  PF  ->  0=done 1=not done
0331   0000             ;
0332   0000             ; read 2 samples from rom and write them in output buffer
0333   0000             ; = 34 cycles
0334   0000             
0335   0000                         macro readAndClear2
0336   0000~            
0337   0000~                        LDI                     ;                           ' 16+1  |
0338   0000~                        LDI                     ;                           ' 16+1  | 34
0339   0000~            
0340   0000                         endm
0341   0000             
0342   0000             
0343   0000             ; readAndMix
0344   0000             ; ----------
0345   0000             ; ?   ->  HL  ->  point to the sample source (ROM)
0346   0000             ; ?   ->  DE  ->  point to write buffer
0347   0000             ; $80 ->  B
0348   0000             ;
0349   0000             ; read 1 sample and mix it in output buffer
0350   0000             ; = 40 (+11 when overflow)
0351   0000             
0352   0000                         macro readAndMix
0353   0000~            
0354   0000~                        LD      A, (DE)         ; read value in write buf   ' 7     |
0355   0000~                        ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0356   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0357   0000~            
0358   0000~                        LD      A, B            ; fix overflow              ' 4     |
0359   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0360   0000~            
0361   0000~            .ok
0362   0000~                        LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0363   0000~                        INC     E               ;                           ' 4     |
0364   0000~                        INC     L               ; next                      ' 4     |
0365   0000~            
0366   0000                         endm                    ;                           ' 40 (+11)
0367   0000             
0368   0000             
0369   0000             ; readMixAndUnsign
0370   0000             ; ----------------
0371   0000             ; ?   ->  HL  ->  point to the sample source (ROM)
0372   0000             ; ?   ->  DE  ->  point to write buffer
0373   0000             ; $80 ->  B
0374   0000             ;
0375   0000             ; read 1 sample and mix it with output buffer, then unsign it
0376   0000             ; = 40 (+11 when overflow)
0377   0000             
0378   0000                         macro readMixAndUnsign
0379   0000~            
0380   0000~                        LD      A, (DE)         ; read value in write buf   ' 7     |
0381   0000~                        ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0382   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0383   0000~            
0384   0000~                        LD      A, B            ; fix overflow              ' 4     |
0385   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0386   0000~            
0387   0000~            .ok
0388   0000~                        ADD     B               ; unsign                    ' 4     |
0389   0000~                        LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0390   0000~                        INC     E               ;                           ' 4     |
0391   0000~                        INC     L               ; next                      ' 4     |
0392   0000~            
0393   0000                         endm                    ;                           ' 44 (+11)
0394   0000             
0395   0000             
0396   0000             ; sampleOutput
0397   0000             ; ------------
0398   0000             ; YMPORT0     -> HL'
0399   0000             ; YMPORT1     -> DE'
0400   0000             ; read buffer -> BC' ->  read buffer
0401   0000             ;
0402   0000             ; output a sample to the DAC
0403   0000             ; = 36 cycles
0404   0000             
0405   0000                         macro sampleOutput
0406   0000~            
0407   0000~                        EXX                     ;                           ' 4     | 4
0408   0000~            
0409   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7     |
0410   0000~                        INC     BC              ; increment read address    ' 6     |
0411   0000~                        RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0412   0000~                        LD      (DE), A         ; play sample               ' 7     |
0413   0000~            
0414   0000~                        EXX                     ;                           ' 4     | (36)
0415   0000~            
0416   0000                         endm
0417   0000             
0418   0000             
0419   0000             ; sampleOutputSafe
0420   0000             ; ----------------
0421   0000             ; YMPORT0     -> HL'
0422   0000             ; YMPORT1     -> DE'
0423   0000             ; read buffer -> BC' ->  read buffer
0424   0000             ;
0425   0000             ; output a sample to the DAC
0426   0000             ; = 46 cycles
0427   0000             
0428   0000                         macro sampleOutputSafe
0429   0000~            
0430   0000~                        EXX                     ;                           ' 4     | 4
0431   0000~            
0432   0000~                        LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
0433   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7     |
0434   0000~                        INC     BC              ; increment read address    ' 6     | 38 (42)
0435   0000~                        RES     2, B            ; read_address &= 0x03FF    ' 8     |
0436   0000~                        LD      (DE), A         ; play sample               ' 7     |
0437   0000~            
0438   0000~                        EXX                     ;                           ' 4     | (46)
0439   0000~            
0440   0000                         endm
0441   0000             
0442   0000             
0443   0000             ; waitYMReady
0444   0000             ; -----------
0445   0000             ; YMPORT     -> HL
0446   0000             ;
0447   0000             ; wait until YM ready
0448   0000             ; = 22 cycles minimum (22 * X)
0449   0000             
0450   0000                         macro waitYMReady
0451   0000~            
0452   0000~            .wait
0453   0000~                        BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
0454   0000~                        JP      NZ, .wait       ; wait while busy           ' 10    |
0455   0000~            
0456   0000                         endm
0457   0000             
0458   0000             
0459   0000             ; ###########################       init       ##############################
0460   0000             
0461   0000                         ORG     $0000
0462   0000             
0463   0000             init
0464   0000 F3                      DI                      ; disable ints
0465   0001 31 00 16                LD      SP, STACK       ; setup stack
0466   0004 ED 56                   IM      $01             ; set int mode 1
0467   0006 AF                      XOR     A
0468   0007 32 02 01                LD      (STATUS), A     ; driver not ready
0469   000A 32 00 01                LD      (COMMAND), A    ; command cleared
0470   000D C3 00 02                JP      start           ; jump to start
0471   0010             
0472   0010             
0473   0010             ; ###########################     interrupt    ##############################
0474   0010             
0475   0010 00                      BLOCK   $0038-$
0476   0038             
0477   0038             interrupt
0478   0038 F5                      PUSH    AF              ;                       ' 11    |
0479   0039 FD 2C                   INC     IYL             ; inc vint counter      ' 8     |
0480   003B             
0481   003B                         ; we should wait at least 180 cycles so the IRQ line goes down
0482   003B                         ; else we will take the interrupt several time
0483   003B             
0484   003B                         wait120                 ;
0484   003B 3E 06       >            LD      A, w            ; 7-2
0484   003D 3D          >            DEC     A               ; 4
0484   003E 20 FD       >            JR      NZ, .loop       ; 12
0484   0040 ED 4F       >            LD      R, A
0484   0042 ED 4F       >            LD      R, A
0484   0044 00          >            NOP
0485   0045             
0486   0045 F1                      POP     AF              ;                       ' 10    |
0487   0046 FB                      EI                      ;                       ' 4     |
0488   0047 C9                      RET                     ;                       ' 10    | +180
0489   0048             
0490   0048             
0491   0048             ; ###########################       main       ##############################
0492   0048             
0493   0048 00                      BLOCK   $0200-$
0494   0200             
0495   0200             start
0496   0200             
0497   0200 21 04 01                LD      HL, PARAMS
0498   0203 3E 00                   LD      A, $00
0499   0205 06 40                   LD      B, $40
0500   0207             
0501   0207             cp_loop
0502   0207 77                      LD      (HL), A         ; clear parameters
0503   0208 23                      INC     HL
0504   0209 10 FC                   DJNZ    cp_loop
0505   020B             
0506   020B 21 64 01                LD      HL, YM_RR_OFF
0507   020E 3E FF                   LD      A, $FF
0508   0210 06 18                   LD      B, (6 * 4)
0509   0212             
0510   0212             off_loop
0511   0212 77                      LD      (HL), A         ; clear off settings
0512   0213 23                      INC     HL
0513   0214 10 FC                   DJNZ    off_loop
0514   0216             
0515   0216 21 7C 01                LD      HL, PSG_ENV_OFF
0516   0219             
0517   0219 36 9F                   LD      (HL), $9F       ; PSG channel 0 off
0518   021B 23                      INC     HL
0519   021C 36 BF                   LD      (HL), $BF       ; PSG channel 1 off
0520   021E 23                      INC     HL
0521   021F 36 DF                   LD      (HL), $DF       ; PSG channel 2 off
0522   0221 23                      INC     HL
0523   0222 36 FF                   LD      (HL), $FF       ; PSG channel 3 off
0524   0224             
0525   0224 21 64 01                LD      HL, YM_RR_OFF
0526   0227 11 44 01                LD      DE, YM_RR_SAV
0527   022A 01 1C 00                LD      BC, (6 * 4) + 4
0528   022D ED B0                   LDIR                    ; copy off settings to sav settings
0529   022F             
0530   022F 21 00 18                LD      HL, PCM_BUFFER
0531   0232 3E 80                   LD      A, $80
0532   0234 06 00                   LD      B, $00          ; for 256 * 4 bytes to clear
0533   0236             
0534   0236             cb_loop
0535   0236 77                      LD      (HL), A         ; initialise buffers to silent
0536   0237 23                      INC     HL
0537   0238 77                      LD      (HL), A
0538   0239 23                      INC     HL
0539   023A 77                      LD      (HL), A
0540   023B 23                      INC     HL
0541   023C 77                      LD      (HL), A
0542   023D 23                      INC     HL
0543   023E 10 F6                   DJNZ    cb_loop
0544   0240             
0545   0240 3E 00                   LD      A, $00
0546   0242             
0547   0242 21 60 01                LD      HL, YM_2B_SAV
0548   0245 77                      LD      (HL), A         ; DAC disabled by default
0549   0246 21 80 01                LD      HL, YM_2B_BUF
0550   0249 22 61 01                LD      (YM_2B_PT), HL  ; YM_2B_PT = YM_2B_BUF
0551   024C             
0552   024C 21 80 01                LD      HL, YM_2B_BUF
0553   024F 06 04                   LD      B, 4
0554   0251             
0555   0251             buf2b_loop
0556   0251 77                      LD      (HL), A         ; reg $2B buffer = DAC disabled
0557   0252 23                      INC     HL
0558   0253 10 FC                   DJNZ    buf2b_loop
0559   0255             
0560   0255 CD DF 13                CALL    initDAC         ; prepare DAC for output
0561   0258             
0562   0258 21 00 18                LD      HL, PCM_BUFFER0 ; initialise write and read buffer
0563   025B 22 38 01                LD      (WRITEBUF), HL
0564   025E 21 00 19                LD      HL, PCM_BUFFER1
0565   0261 22 3A 01                LD      (READBUF), HL
0566   0264 FD 2E 00                LD      IYL, $0         ; clear vint counter
0567   0267             
0568   0267 44 4D                   LD      BC, HL          ; BC' point to read buffer
0569   0269 21 00 40                LD      HL, YMPORT0     ; HL' point to YMPORT0
0570   026C 11 01 40                LD      DE, YMPORT1     ; DE' point to YMPORT1
0571   026F D9                      EXX
0572   0270             
0573   0270                         stopChannel 0           ; stop all channels
0573   0270 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0573   0273 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0573   0276 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0573   0279 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0573   027C AF          >            XOR     A                       ;                           ' 4     |
0573   027D 32 14 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0573   0280 21 02 01    >            LD      HL, STATUS              ; HL = STATUS               ' 10    |
0573   0283 CB 86       >            RES     ch, (HL)                ; clear play status         ' 15    | 25 (100)
0574   0285                         stopChannel 1
0574   0285 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0574   0288 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0574   028B 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0574   028E 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0574   0291 AF          >            XOR     A                       ;                           ' 4     |
0574   0292 32 1C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0574   0295 21 02 01    >            LD      HL, STATUS              ; HL = STATUS               ' 10    |
0574   0298 CB 8E       >            RES     ch, (HL)                ; clear play status         ' 15    | 25 (100)
0575   029A                         stopChannel 2
0575   029A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0575   029D 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0575   02A0 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0575   02A3 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0575   02A6 AF          >            XOR     A                       ;                           ' 4     |
0575   02A7 32 24 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0575   02AA 21 02 01    >            LD      HL, STATUS              ; HL = STATUS               ' 10    |
0575   02AD CB 96       >            RES     ch, (HL)                ; clear play status         ' 15    | 25 (100)
0576   02AF                         stopChannel 3
0576   02AF 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0576   02B2 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0576   02B5 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0576   02B8 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0576   02BB AF          >            XOR     A                       ;                           ' 4     |
0576   02BC 32 2C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0576   02BF 21 02 01    >            LD      HL, STATUS              ; HL = STATUS               ' 10    |
0576   02C2 CB 9E       >            RES     ch, (HL)                ; clear play status         ' 15    | 25 (100)
0577   02C4             
0578   02C4 3E 80                   LD      A, STATREADY
0579   02C6 32 02 01                LD      (STATUS), A     ; driver ready
0580   02C9 FB                      EI                      ; enable interrupt
0581   02CA             
0582   02CA             main_loop
0583   02CA             
0584   02CA             ; PCM channel 0
0585   02CA             ; -------------
0586   02CA             
0587   02CA             ; $00
0588   02CA                         sampleOutput                ;                       ' 36    |
0588   02CA D9          >            EXX                     ;                           ' 4     | 4
0588   02CB 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0588   02CC 03          >            INC     BC              ; increment read address    ' 6     |
0588   02CD CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0588   02CF 12          >            LD      (DE), A         ; play sample               ' 7     |
0588   02D0 D9          >            EXX                     ;                           ' 4     | (36)
0589   02D1                         prepareChannel 0            ;                       ' 176   |
0589   02D1 2A 16 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0589   02D4 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
0589   02D5 17          >            RLA                             ; C flag = bit 15       ' 4     |
0589   02D6 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0589   02D7 17          >            RLA                             ; A = bit 15-22         ' 4     |
0589   02D8 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
0589   02DB 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
0589   02DC 1F          >            RRA                     ;                           ' 4
0589   02DD 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
0589   02DE 1F          >            RRA                     ;                           ' 4
0589   02DF 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
0589   02E0 1F          >            RRA                     ;                           ' 4
0589   02E1 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
0589   02E2 1F          >            RRA                     ;                           ' 4
0589   02E3 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
0589   02E4 1F          >            RRA                     ;                           ' 4
0589   02E5 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
0589   02E6 1F          >            RRA                     ;                           ' 4
0589   02E7 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
0589   02E8 1F          >            RRA                     ;                           ' 4
0589   02E9 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
0589   02EA 1F          >            RRA                     ;                           ' 4
0589   02EB 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0589   02EC 65          >            LD      H, L                    ;                       ' 4     |
0589   02ED CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0589   02EF 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
0589   02F1 ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0590   02F5 01 FC 00                LD      BC, 252             ; prepare loop counter  ' 10    | 254
0591   02F8                         wait32                      ; sync                  ' 32    |
0591   02F8 1A          >            LD      A, (DE)
0591   02F9 00          >            NOP
0591   02FA ED 4F       >            LD      R, A
0591   02FC 18 00       >            JR      .loop
0592   02FE             
0593   02FE             ; $01-$15
0594   02FE             .loop_ch0
0595   02FE                         sampleOutput                ;                       ' 36    |
0595   02FE D9          >            EXX                     ;                           ' 4     | 4
0595   02FF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0595   0300 03          >            INC     BC              ; increment read address    ' 6     |
0595   0301 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0595   0303 12          >            LD      (DE), A         ; play sample               ' 7     |
0595   0304 D9          >            EXX                     ;                           ' 4     | (36)
0596   0305                         readAndClear2               ; process 12 samples    ' 34    |
0596   0305 ED A0       >            LDI                     ;                           ' 16+1  |
0596   0307 ED A0       >            LDI                     ;                           ' 16+1  | 34
0597   0309                         readAndClear2               ;                       ' 34    |
0597   0309 ED A0       >            LDI                     ;                           ' 16+1  |
0597   030B ED A0       >            LDI                     ;                           ' 16+1  | 34
0598   030D                         readAndClear2               ;                       ' 34    |
0598   030D ED A0       >            LDI                     ;                           ' 16+1  |
0598   030F ED A0       >            LDI                     ;                           ' 16+1  | 34
0599   0311                         readAndClear2               ;                       ' 34    | 254
0599   0311 ED A0       >            LDI                     ;                           ' 16+1  |
0599   0313 ED A0       >            LDI                     ;                           ' 16+1  | 34
0600   0315                         readAndClear2               ;                       ' 34    |
0600   0315 ED A0       >            LDI                     ;                           ' 16+1  |
0600   0317 ED A0       >            LDI                     ;                           ' 16+1  | 34
0601   0319                         readAndClear2               ;                       ' 34    |
0601   0319 ED A0       >            LDI                     ;                           ' 16+1  |
0601   031B ED A0       >            LDI                     ;                           ' 16+1  | 34
0602   031D                         wait4                       ; sync                  ' 4     |
0602   031D 00          >            NOP
0603   031E EA FE 02                JP      PE, .loop_ch0       ;                       ' 10    |
0604   0321             
0605   0321             ; $16
0606   0321                         sampleOutput                ;                       ' 36    |
0606   0321 D9          >            EXX                     ;                           ' 4     | 4
0606   0322 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0606   0323 03          >            INC     BC              ; increment read address    ' 6     |
0606   0324 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0606   0326 12          >            LD      (DE), A         ; play sample               ' 7     |
0606   0327 D9          >            EXX                     ;                           ' 4     | (36)
0607   0328                         readAndClear2               ; process 4 samples     ' 34    | 254
0607   0328 ED A0       >            LDI                     ;                           ' 16+1  |
0607   032A ED A0       >            LDI                     ;                           ' 16+1  | 34
0608   032C                         readAndClear2               ;                       ' 34    |
0608   032C ED A0       >            LDI                     ;                           ' 16+1  |
0608   032E ED A0       >            LDI                     ;                           ' 16+1  | 34
0609   0330                         wait150                     ; sync                  ' 150   |
0609   0330 3E 09       >            LD      A, w            ; 7-2
0609   0332 3D          >            DEC     A               ; 4
0609   0333 20 FD       >            JR      NZ, .loop       ; 12
0609   0335 00          >            NOP
0610   0336             
0611   0336             ; $17
0612   0336                         sampleOutput                ;                       ' 36    |
0612   0336 D9          >            EXX                     ;                           ' 4     | 4
0612   0337 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0612   0338 03          >            INC     BC              ; increment read address    ' 6     |
0612   0339 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0612   033B 12          >            LD      (DE), A         ; play sample               ' 7     |
0612   033C D9          >            EXX                     ;                           ' 4     | (36)
0613   033D                         updateChannelData 0         ; update channel data   ' 178   | 254
0613   033D 2A 16 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0613   0340 23          >            INC     HL                      ;                       ' 6     | (38)
0613   0341 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0613   0344 2A 18 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0613   0347 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
0613   0348 7C          >            LD      A, H                    ;                       ' 4     |
0613   0349 B5          >            OR      L                       ;                       ' 4     | 18 (78)
0613   034A CA 57 03    >            JP      Z, .done                ; sample done ?         ' 10    |
0613   034D 3E 04       >            LD      A, w            ; 7-2
0613   034F 3D          >            DEC     A               ; 4
0613   0350 20 FD       >            JR      NZ, .loop       ; 12
0613   0352 00          >            NOP
0613   0353 00          >            NOP
0613   0354 C3 69 03    >            JP      .end                    ;                       ' 10    | 84 (162)
0613   0357 21 02 01    >            LD      HL, STATUS              ; HL = STATUS           ' 10    |
0613   035A CB 86       >            RES     ch, (HL)                ; clear play status     ' 15    | 25 (103)
0613   035C AF          >            XOR     A                       ;                       ' 4     |
0613   035D 32 14 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio            ' 13    | 17 (120)
0613   0360 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr    ' 16    |
0613   0363 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr      ' 16    | 42 (162)
0613   0366 21 01 00    >            LD      HL, $0001               ; HL = null PCM len     ' 10    |
0613   0369 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    | (178)
0614   036C                         wait40                      ; sync                  ' 40    |
0614   036C ED 4F       >            LD      R, A
0614   036E ED 4F       >            LD      R, A
0614   0370 ED 4F       >            LD      R, A
0614   0372 ED 4F       >            LD      R, A
0614   0374 00          >            NOP
0615   0375             
0616   0375             ; PCM channel 1
0617   0375             ; -------------
0618   0375             
0619   0375             ; $18
0620   0375                         sampleOutput                ;                       ' 36    |
0620   0375 D9          >            EXX                     ;                           ' 4     | 4
0620   0376 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0620   0377 03          >            INC     BC              ; increment read address    ' 6     |
0620   0378 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0620   037A 12          >            LD      (DE), A         ; play sample               ' 7     |
0620   037B D9          >            EXX                     ;                           ' 4     | (36)
0621   037C                         prepareChannel 1            ;                       ' 176   | 254
0621   037C 2A 1E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0621   037F 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
0621   0380 17          >            RLA                             ; C flag = bit 15       ' 4     |
0621   0381 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0621   0382 17          >            RLA                             ; A = bit 15-22         ' 4     |
0621   0383 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
0621   0386 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
0621   0387 1F          >            RRA                     ;                           ' 4
0621   0388 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
0621   0389 1F          >            RRA                     ;                           ' 4
0621   038A 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
0621   038B 1F          >            RRA                     ;                           ' 4
0621   038C 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
0621   038D 1F          >            RRA                     ;                           ' 4
0621   038E 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
0621   038F 1F          >            RRA                     ;                           ' 4
0621   0390 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
0621   0391 1F          >            RRA                     ;                           ' 4
0621   0392 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
0621   0393 1F          >            RRA                     ;                           ' 4
0621   0394 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
0621   0395 1F          >            RRA                     ;                           ' 4
0621   0396 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0621   0397 65          >            LD      H, L                    ;                       ' 4     |
0621   0398 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0621   039A 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
0621   039C ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0622   03A0 01 10 80                LD      BC, $8010           ; prepare loop counter  ' 10    |
0623   03A3                         wait32                      ; sync                  ' 32    |
0623   03A3 1A          >            LD      A, (DE)
0623   03A4 00          >            NOP
0623   03A5 ED 4F       >            LD      R, A
0623   03A7 18 00       >            JR      .loop
0624   03A9             
0625   03A9             ; $19-48
0626   03A9             .loop_ch1
0627   03A9                         sampleOutput                ;                       ' 36    |
0627   03A9 D9          >            EXX                     ;                           ' 4     | 4
0627   03AA 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0627   03AB 03          >            INC     BC              ; increment read address    ' 6     |
0627   03AC CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0627   03AE 12          >            LD      (DE), A         ; play sample               ' 7     |
0627   03AF D9          >            EXX                     ;                           ' 4     | (36)
0628   03B0                         readAndMix                  ; mix 16 samples        ' 40    |
0628   03B0 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0628   03B1 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0628   03B2 E2 B8 03    >            JP      PO, .ok         ; check overflow            ' 10    |
0628   03B5 78          >            LD      A, B            ; fix overflow              ' 4     |
0628   03B6 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0628   03B8 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0628   03B9 1C          >            INC     E               ;                           ' 4     |
0628   03BA 2C          >            INC     L               ; next                      ' 4     |
0629   03BB                         readAndMix                  ;                       ' 40    |
0629   03BB 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0629   03BC 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0629   03BD E2 C3 03    >            JP      PO, .ok         ; check overflow            ' 10    |
0629   03C0 78          >            LD      A, B            ; fix overflow              ' 4     |
0629   03C1 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0629   03C3 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0629   03C4 1C          >            INC     E               ;                           ' 4     |
0629   03C5 2C          >            INC     L               ; next                      ' 4     |
0630   03C6                         readAndMix                  ;                       ' 40    | 254-18
0630   03C6 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0630   03C7 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0630   03C8 E2 CE 03    >            JP      PO, .ok         ; check overflow            ' 10    |
0630   03CB 78          >            LD      A, B            ; fix overflow              ' 4     |
0630   03CC CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0630   03CE 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0630   03CF 1C          >            INC     E               ;                           ' 4     |
0630   03D0 2C          >            INC     L               ; next                      ' 4     |
0631   03D1                         readAndMix                  ;                       ' 40    |
0631   03D1 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0631   03D2 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0631   03D3 E2 D9 03    >            JP      PO, .ok         ; check overflow            ' 10    |
0631   03D6 78          >            LD      A, B            ; fix overflow              ' 4     |
0631   03D7 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0631   03D9 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0631   03DA 1C          >            INC     E               ;                           ' 4     |
0631   03DB 2C          >            INC     L               ; next                      ' 4     |
0632   03DC                         readAndMix                  ;                       ' 40    |
0632   03DC 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0632   03DD 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0632   03DE E2 E4 03    >            JP      PO, .ok         ; check overflow            ' 10    |
0632   03E1 78          >            LD      A, B            ; fix overflow              ' 4     |
0632   03E2 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0632   03E4 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0632   03E5 1C          >            INC     E               ;                           ' 4     |
0632   03E6 2C          >            INC     L               ; next                      ' 4     |
0633   03E7             
0634   03E7                         sampleOutput                ; -18 --> too soon      ' 36    |
0634   03E7 D9          >            EXX                     ;                           ' 4     | 4
0634   03E8 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0634   03E9 03          >            INC     BC              ; increment read address    ' 6     |
0634   03EA CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0634   03EC 12          >            LD      (DE), A         ; play sample               ' 7     |
0634   03ED D9          >            EXX                     ;                           ' 4     | (36)
0635   03EE                         readAndMix                  ;                       ' 40    |
0635   03EE 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0635   03EF 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0635   03F0 E2 F6 03    >            JP      PO, .ok         ; check overflow            ' 10    |
0635   03F3 78          >            LD      A, B            ; fix overflow              ' 4     |
0635   03F4 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0635   03F6 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0635   03F7 1C          >            INC     E               ;                           ' 4     |
0635   03F8 2C          >            INC     L               ; next                      ' 4     |
0636   03F9                         readAndMix                  ;                       ' 40    |
0636   03F9 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0636   03FA 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0636   03FB E2 01 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0636   03FE 78          >            LD      A, B            ; fix overflow              ' 4     |
0636   03FF CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0636   0401 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0636   0402 1C          >            INC     E               ;                           ' 4     |
0636   0403 2C          >            INC     L               ; next                      ' 4     |
0637   0404                         readAndMix                  ;                       ' 40    |
0637   0404 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0637   0405 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0637   0406 E2 0C 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0637   0409 78          >            LD      A, B            ; fix overflow              ' 4     |
0637   040A CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0637   040C 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0637   040D 1C          >            INC     E               ;                           ' 4     |
0637   040E 2C          >            INC     L               ; next                      ' 4     |
0638   040F                         readAndMix                  ;                       ' 40    |
0638   040F 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0638   0410 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0638   0411 E2 17 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0638   0414 78          >            LD      A, B            ; fix overflow              ' 4     |
0638   0415 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0638   0417 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0638   0418 1C          >            INC     E               ;                           ' 4     |
0638   0419 2C          >            INC     L               ; next                      ' 4     |
0639   041A                         readAndMix                  ;                       ' 40    | 254+4
0639   041A 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0639   041B 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0639   041C E2 22 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0639   041F 78          >            LD      A, B            ; fix overflow              ' 4     |
0639   0420 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0639   0422 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0639   0423 1C          >            INC     E               ;                           ' 4     |
0639   0424 2C          >            INC     L               ; next                      ' 4     |
0640   0425                         readAndMix                  ;                       ' 40    |
0640   0425 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0640   0426 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0640   0427 E2 2D 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0640   042A 78          >            LD      A, B            ; fix overflow              ' 4     |
0640   042B CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0640   042D 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0640   042E 1C          >            INC     E               ;                           ' 4     |
0640   042F 2C          >            INC     L               ; next                      ' 4     |
0641   0430             
0642   0430                         sampleOutput                ; +4 --> late           ' 36    |
0642   0430 D9          >            EXX                     ;                           ' 4     | 4
0642   0431 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0642   0432 03          >            INC     BC              ; increment read address    ' 6     |
0642   0433 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0642   0435 12          >            LD      (DE), A         ; play sample               ' 7     |
0642   0436 D9          >            EXX                     ;                           ' 4     | (36)
0643   0437                         readAndMix                  ;                       ' 40    |
0643   0437 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0643   0438 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0643   0439 E2 3F 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0643   043C 78          >            LD      A, B            ; fix overflow              ' 4     |
0643   043D CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0643   043F 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0643   0440 1C          >            INC     E               ;                           ' 4     |
0643   0441 2C          >            INC     L               ; next                      ' 4     |
0644   0442                         readAndMix                  ;                       ' 40    |
0644   0442 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0644   0443 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0644   0444 E2 4A 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0644   0447 78          >            LD      A, B            ; fix overflow              ' 4     |
0644   0448 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0644   044A 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0644   044B 1C          >            INC     E               ;                           ' 4     |
0644   044C 2C          >            INC     L               ; next                      ' 4     |
0645   044D                         readAndMix                  ;                       ' 40    |
0645   044D 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0645   044E 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0645   044F E2 55 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0645   0452 78          >            LD      A, B            ; fix overflow              ' 4     |
0645   0453 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0645   0455 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0645   0456 1C          >            INC     E               ;                           ' 4     |
0645   0457 2C          >            INC     L               ; next                      ' 4     |
0646   0458                         readAndMix                  ;                       ' 40    | 254
0646   0458 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0646   0459 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0646   045A E2 60 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0646   045D 78          >            LD      A, B            ; fix overflow              ' 4     |
0646   045E CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0646   0460 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0646   0461 1C          >            INC     E               ;                           ' 4     |
0646   0462 2C          >            INC     L               ; next                      ' 4     |
0647   0463                         readAndMix                  ;                       ' 40    |
0647   0463 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0647   0464 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0647   0465 E2 6B 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0647   0468 78          >            LD      A, B            ; fix overflow              ' 4     |
0647   0469 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0647   046B 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0647   046C 1C          >            INC     E               ;                           ' 4     |
0647   046D 2C          >            INC     L               ; next                      ' 4     |
0648   046E 0D                      DEC     C                   ;                       ' 4     |
0649   046F C2 A9 03                JP      NZ, .loop_ch1       ;                       ' 10    |
0650   0472             
0651   0472             ; $49
0652   0472                         sampleOutput                ;                       ' 36    |
0652   0472 D9          >            EXX                     ;                           ' 4     | 4
0652   0473 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0652   0474 03          >            INC     BC              ; increment read address    ' 6     |
0652   0475 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0652   0477 12          >            LD      (DE), A         ; play sample               ' 7     |
0652   0478 D9          >            EXX                     ;                           ' 4     | (36)
0653   0479                         updateChannelData 1         ; update channel data   ' 178   | 254
0653   0479 2A 1E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0653   047C 23          >            INC     HL                      ;                       ' 6     | (38)
0653   047D 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0653   0480 2A 20 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0653   0483 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
0653   0484 7C          >            LD      A, H                    ;                       ' 4     |
0653   0485 B5          >            OR      L                       ;                       ' 4     | 18 (78)
0653   0486 CA 93 04    >            JP      Z, .done                ; sample done ?         ' 10    |
0653   0489 3E 04       >            LD      A, w            ; 7-2
0653   048B 3D          >            DEC     A               ; 4
0653   048C 20 FD       >            JR      NZ, .loop       ; 12
0653   048E 00          >            NOP
0653   048F 00          >            NOP
0653   0490 C3 A5 04    >            JP      .end                    ;                       ' 10    | 84 (162)
0653   0493 21 02 01    >            LD      HL, STATUS              ; HL = STATUS           ' 10    |
0653   0496 CB 8E       >            RES     ch, (HL)                ; clear play status     ' 15    | 25 (103)
0653   0498 AF          >            XOR     A                       ;                       ' 4     |
0653   0499 32 1C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio            ' 13    | 17 (120)
0653   049C 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr    ' 16    |
0653   049F 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr      ' 16    | 42 (162)
0653   04A2 21 01 00    >            LD      HL, $0001               ; HL = null PCM len     ' 10    |
0653   04A5 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    | (178)
0654   04A8                         wait40                      ; sync                  ' 40    |
0654   04A8 ED 4F       >            LD      R, A
0654   04AA ED 4F       >            LD      R, A
0654   04AC ED 4F       >            LD      R, A
0654   04AE ED 4F       >            LD      R, A
0654   04B0 00          >            NOP
0655   04B1             
0656   04B1             ; PCM channel 2
0657   04B1             ; -------------
0658   04B1             
0659   04B1             ; $4A
0660   04B1                         sampleOutput                ;                       ' 36    |
0660   04B1 D9          >            EXX                     ;                           ' 4     | 4
0660   04B2 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0660   04B3 03          >            INC     BC              ; increment read address    ' 6     |
0660   04B4 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0660   04B6 12          >            LD      (DE), A         ; play sample               ' 7     |
0660   04B7 D9          >            EXX                     ;                           ' 4     | (36)
0661   04B8                         prepareChannel 2            ;                       ' 176   | 254
0661   04B8 2A 26 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0661   04BB 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
0661   04BC 17          >            RLA                             ; C flag = bit 15       ' 4     |
0661   04BD 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0661   04BE 17          >            RLA                             ; A = bit 15-22         ' 4     |
0661   04BF 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
0661   04C2 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
0661   04C3 1F          >            RRA                     ;                           ' 4
0661   04C4 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
0661   04C5 1F          >            RRA                     ;                           ' 4
0661   04C6 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
0661   04C7 1F          >            RRA                     ;                           ' 4
0661   04C8 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
0661   04C9 1F          >            RRA                     ;                           ' 4
0661   04CA 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
0661   04CB 1F          >            RRA                     ;                           ' 4
0661   04CC 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
0661   04CD 1F          >            RRA                     ;                           ' 4
0661   04CE 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
0661   04CF 1F          >            RRA                     ;                           ' 4
0661   04D0 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
0661   04D1 1F          >            RRA                     ;                           ' 4
0661   04D2 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0661   04D3 65          >            LD      H, L                    ;                       ' 4     |
0661   04D4 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0661   04D6 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
0661   04D8 ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0662   04DC 01 10 80                LD      BC, $8010           ; prepare loop counter  ' 10    |
0663   04DF                         wait32                      ; sync                  ' 32    |
0663   04DF 1A          >            LD      A, (DE)
0663   04E0 00          >            NOP
0663   04E1 ED 4F       >            LD      R, A
0663   04E3 18 00       >            JR      .loop
0664   04E5             
0665   04E5             ; $4B-$7A
0666   04E5             .loop_ch2
0667   04E5                         sampleOutput                ;                       ' 36    |
0667   04E5 D9          >            EXX                     ;                           ' 4     | 4
0667   04E6 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0667   04E7 03          >            INC     BC              ; increment read address    ' 6     |
0667   04E8 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0667   04EA 12          >            LD      (DE), A         ; play sample               ' 7     |
0667   04EB D9          >            EXX                     ;                           ' 4     | (36)
0668   04EC                         readAndMix                  ; mix 16 samples        ' 40    |
0668   04EC 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0668   04ED 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0668   04EE E2 F4 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0668   04F1 78          >            LD      A, B            ; fix overflow              ' 4     |
0668   04F2 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0668   04F4 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0668   04F5 1C          >            INC     E               ;                           ' 4     |
0668   04F6 2C          >            INC     L               ; next                      ' 4     |
0669   04F7                         readAndMix                  ;                       ' 40    |
0669   04F7 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0669   04F8 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0669   04F9 E2 FF 04    >            JP      PO, .ok         ; check overflow            ' 10    |
0669   04FC 78          >            LD      A, B            ; fix overflow              ' 4     |
0669   04FD CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0669   04FF 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0669   0500 1C          >            INC     E               ;                           ' 4     |
0669   0501 2C          >            INC     L               ; next                      ' 4     |
0670   0502                         readAndMix                  ;                       ' 40    | 254-18
0670   0502 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0670   0503 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0670   0504 E2 0A 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0670   0507 78          >            LD      A, B            ; fix overflow              ' 4     |
0670   0508 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0670   050A 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0670   050B 1C          >            INC     E               ;                           ' 4     |
0670   050C 2C          >            INC     L               ; next                      ' 4     |
0671   050D                         readAndMix                  ;                       ' 40    |
0671   050D 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0671   050E 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0671   050F E2 15 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0671   0512 78          >            LD      A, B            ; fix overflow              ' 4     |
0671   0513 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0671   0515 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0671   0516 1C          >            INC     E               ;                           ' 4     |
0671   0517 2C          >            INC     L               ; next                      ' 4     |
0672   0518                         readAndMix                  ;                       ' 40    |
0672   0518 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0672   0519 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0672   051A E2 20 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0672   051D 78          >            LD      A, B            ; fix overflow              ' 4     |
0672   051E CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0672   0520 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0672   0521 1C          >            INC     E               ;                           ' 4     |
0672   0522 2C          >            INC     L               ; next                      ' 4     |
0673   0523             
0674   0523                         sampleOutput                ; -18 --> too soon      ' 36    |
0674   0523 D9          >            EXX                     ;                           ' 4     | 4
0674   0524 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0674   0525 03          >            INC     BC              ; increment read address    ' 6     |
0674   0526 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0674   0528 12          >            LD      (DE), A         ; play sample               ' 7     |
0674   0529 D9          >            EXX                     ;                           ' 4     | (36)
0675   052A                         readAndMix                  ;                       ' 40    |
0675   052A 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0675   052B 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0675   052C E2 32 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0675   052F 78          >            LD      A, B            ; fix overflow              ' 4     |
0675   0530 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0675   0532 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0675   0533 1C          >            INC     E               ;                           ' 4     |
0675   0534 2C          >            INC     L               ; next                      ' 4     |
0676   0535                         readAndMix                  ;                       ' 40    |
0676   0535 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0676   0536 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0676   0537 E2 3D 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0676   053A 78          >            LD      A, B            ; fix overflow              ' 4     |
0676   053B CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0676   053D 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0676   053E 1C          >            INC     E               ;                           ' 4     |
0676   053F 2C          >            INC     L               ; next                      ' 4     |
0677   0540                         readAndMix                  ;                       ' 40    |
0677   0540 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0677   0541 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0677   0542 E2 48 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0677   0545 78          >            LD      A, B            ; fix overflow              ' 4     |
0677   0546 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0677   0548 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0677   0549 1C          >            INC     E               ;                           ' 4     |
0677   054A 2C          >            INC     L               ; next                      ' 4     |
0678   054B                         readAndMix                  ;                       ' 40    |
0678   054B 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0678   054C 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0678   054D E2 53 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0678   0550 78          >            LD      A, B            ; fix overflow              ' 4     |
0678   0551 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0678   0553 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0678   0554 1C          >            INC     E               ;                           ' 4     |
0678   0555 2C          >            INC     L               ; next                      ' 4     |
0679   0556                         readAndMix                  ;                       ' 40    | 254+4
0679   0556 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0679   0557 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0679   0558 E2 5E 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0679   055B 78          >            LD      A, B            ; fix overflow              ' 4     |
0679   055C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0679   055E 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0679   055F 1C          >            INC     E               ;                           ' 4     |
0679   0560 2C          >            INC     L               ; next                      ' 4     |
0680   0561                         readAndMix                  ;                       ' 40    |
0680   0561 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0680   0562 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0680   0563 E2 69 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0680   0566 78          >            LD      A, B            ; fix overflow              ' 4     |
0680   0567 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0680   0569 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0680   056A 1C          >            INC     E               ;                           ' 4     |
0680   056B 2C          >            INC     L               ; next                      ' 4     |
0681   056C             
0682   056C                         sampleOutput                ; +4 --> late           ' 36    |
0682   056C D9          >            EXX                     ;                           ' 4     | 4
0682   056D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0682   056E 03          >            INC     BC              ; increment read address    ' 6     |
0682   056F CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0682   0571 12          >            LD      (DE), A         ; play sample               ' 7     |
0682   0572 D9          >            EXX                     ;                           ' 4     | (36)
0683   0573                         readAndMix                  ;                       ' 40    |
0683   0573 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0683   0574 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0683   0575 E2 7B 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0683   0578 78          >            LD      A, B            ; fix overflow              ' 4     |
0683   0579 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0683   057B 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0683   057C 1C          >            INC     E               ;                           ' 4     |
0683   057D 2C          >            INC     L               ; next                      ' 4     |
0684   057E                         readAndMix                  ;                       ' 40    |
0684   057E 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0684   057F 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0684   0580 E2 86 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0684   0583 78          >            LD      A, B            ; fix overflow              ' 4     |
0684   0584 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0684   0586 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0684   0587 1C          >            INC     E               ;                           ' 4     |
0684   0588 2C          >            INC     L               ; next                      ' 4     |
0685   0589                         readAndMix                  ;                       ' 40    |
0685   0589 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0685   058A 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0685   058B E2 91 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0685   058E 78          >            LD      A, B            ; fix overflow              ' 4     |
0685   058F CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0685   0591 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0685   0592 1C          >            INC     E               ;                           ' 4     |
0685   0593 2C          >            INC     L               ; next                      ' 4     |
0686   0594                         readAndMix                  ;                       ' 40    | 254
0686   0594 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0686   0595 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0686   0596 E2 9C 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0686   0599 78          >            LD      A, B            ; fix overflow              ' 4     |
0686   059A CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0686   059C 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0686   059D 1C          >            INC     E               ;                           ' 4     |
0686   059E 2C          >            INC     L               ; next                      ' 4     |
0687   059F                         readAndMix                  ;                       ' 40    |
0687   059F 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0687   05A0 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0687   05A1 E2 A7 05    >            JP      PO, .ok         ; check overflow            ' 10    |
0687   05A4 78          >            LD      A, B            ; fix overflow              ' 4     |
0687   05A5 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0687   05A7 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 15 (40)
0687   05A8 1C          >            INC     E               ;                           ' 4     |
0687   05A9 2C          >            INC     L               ; next                      ' 4     |
0688   05AA 0D                      DEC     C                   ;                       ' 4     |
0689   05AB C2 E5 04                JP      NZ, .loop_ch2       ;                       ' 10    |
0690   05AE             
0691   05AE             ; $7B
0692   05AE                         sampleOutput                ;                       ' 36    |
0692   05AE D9          >            EXX                     ;                           ' 4     | 4
0692   05AF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0692   05B0 03          >            INC     BC              ; increment read address    ' 6     |
0692   05B1 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0692   05B3 12          >            LD      (DE), A         ; play sample               ' 7     |
0692   05B4 D9          >            EXX                     ;                           ' 4     | (36)
0693   05B5                         updateChannelData 2         ; update channel data   ' 178   | 254
0693   05B5 2A 26 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0693   05B8 23          >            INC     HL                      ;                       ' 6     | (38)
0693   05B9 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0693   05BC 2A 28 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0693   05BF 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
0693   05C0 7C          >            LD      A, H                    ;                       ' 4     |
0693   05C1 B5          >            OR      L                       ;                       ' 4     | 18 (78)
0693   05C2 CA CF 05    >            JP      Z, .done                ; sample done ?         ' 10    |
0693   05C5 3E 04       >            LD      A, w            ; 7-2
0693   05C7 3D          >            DEC     A               ; 4
0693   05C8 20 FD       >            JR      NZ, .loop       ; 12
0693   05CA 00          >            NOP
0693   05CB 00          >            NOP
0693   05CC C3 E1 05    >            JP      .end                    ;                       ' 10    | 84 (162)
0693   05CF 21 02 01    >            LD      HL, STATUS              ; HL = STATUS           ' 10    |
0693   05D2 CB 96       >            RES     ch, (HL)                ; clear play status     ' 15    | 25 (103)
0693   05D4 AF          >            XOR     A                       ;                       ' 4     |
0693   05D5 32 24 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio            ' 13    | 17 (120)
0693   05D8 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr    ' 16    |
0693   05DB 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr      ' 16    | 42 (162)
0693   05DE 21 01 00    >            LD      HL, $0001               ; HL = null PCM len     ' 10    |
0693   05E1 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    | (178)
0694   05E4                         wait40                      ; sync                  ' 40    |
0694   05E4 ED 4F       >            LD      R, A
0694   05E6 ED 4F       >            LD      R, A
0694   05E8 ED 4F       >            LD      R, A
0694   05EA ED 4F       >            LD      R, A
0694   05EC 00          >            NOP
0695   05ED             
0696   05ED             ; PCM channel 3
0697   05ED             ; -------------
0698   05ED             
0699   05ED             ; $7C
0700   05ED                         sampleOutput                ;                       ' 36    |
0700   05ED D9          >            EXX                     ;                           ' 4     | 4
0700   05EE 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0700   05EF 03          >            INC     BC              ; increment read address    ' 6     |
0700   05F0 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0700   05F2 12          >            LD      (DE), A         ; play sample               ' 7     |
0700   05F3 D9          >            EXX                     ;                           ' 4     | (36)
0701   05F4                         prepareChannel 3            ;                       ' 176   | 254
0701   05F4 2A 2E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0701   05F7 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
0701   05F8 17          >            RLA                             ; C flag = bit 15       ' 4     |
0701   05F9 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0701   05FA 17          >            RLA                             ; A = bit 15-22         ' 4     |
0701   05FB 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
0701   05FE 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
0701   05FF 1F          >            RRA                     ;                           ' 4
0701   0600 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
0701   0601 1F          >            RRA                     ;                           ' 4
0701   0602 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
0701   0603 1F          >            RRA                     ;                           ' 4
0701   0604 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
0701   0605 1F          >            RRA                     ;                           ' 4
0701   0606 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
0701   0607 1F          >            RRA                     ;                           ' 4
0701   0608 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
0701   0609 1F          >            RRA                     ;                           ' 4
0701   060A 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
0701   060B 1F          >            RRA                     ;                           ' 4
0701   060C 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
0701   060D 1F          >            RRA                     ;                           ' 4
0701   060E 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0701   060F 65          >            LD      H, L                    ;                       ' 4     |
0701   0610 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0701   0612 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
0701   0614 ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0702   0618 01 12 80                LD      BC, $8012           ; prepare loop counter  ' 10    |
0703   061B                         wait32                      ; sync                  ' 32    |
0703   061B 1A          >            LD      A, (DE)
0703   061C 00          >            NOP
0703   061D ED 4F       >            LD      R, A
0703   061F 18 00       >            JR      .loop
0704   0621             
0705   0621             ; $7D-$B2
0706   0621             .loop_ch3
0707   0621                         sampleOutput                ;                       ' 36    |
0707   0621 D9          >            EXX                     ;                           ' 4     | 4
0707   0622 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0707   0623 03          >            INC     BC              ; increment read address    ' 6     |
0707   0624 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0707   0626 12          >            LD      (DE), A         ; play sample               ' 7     |
0707   0627 D9          >            EXX                     ;                           ' 4     | (36)
0708   0628                         readMixAndUnsign            ; mix/unsign 14 samples ' 44    |
0708   0628 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0708   0629 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0708   062A E2 30 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0708   062D 78          >            LD      A, B            ; fix overflow              ' 4     |
0708   062E CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0708   0630 80          >            ADD     B               ; unsign                    ' 4     |
0708   0631 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0708   0632 1C          >            INC     E               ;                           ' 4     |
0708   0633 2C          >            INC     L               ; next                      ' 4     |
0709   0634                         readMixAndUnsign            ;                       ' 44    |
0709   0634 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0709   0635 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0709   0636 E2 3C 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0709   0639 78          >            LD      A, B            ; fix overflow              ' 4     |
0709   063A CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0709   063C 80          >            ADD     B               ; unsign                    ' 4     |
0709   063D 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0709   063E 1C          >            INC     E               ;                           ' 4     |
0709   063F 2C          >            INC     L               ; next                      ' 4     |
0710   0640                         readMixAndUnsign            ;                       ' 44    | 254+2
0710   0640 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0710   0641 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0710   0642 E2 48 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0710   0645 78          >            LD      A, B            ; fix overflow              ' 4     |
0710   0646 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0710   0648 80          >            ADD     B               ; unsign                    ' 4     |
0710   0649 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0710   064A 1C          >            INC     E               ;                           ' 4     |
0710   064B 2C          >            INC     L               ; next                      ' 4     |
0711   064C                         readMixAndUnsign            ;                       ' 44    |
0711   064C 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0711   064D 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0711   064E E2 54 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0711   0651 78          >            LD      A, B            ; fix overflow              ' 4     |
0711   0652 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0711   0654 80          >            ADD     B               ; unsign                    ' 4     |
0711   0655 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0711   0656 1C          >            INC     E               ;                           ' 4     |
0711   0657 2C          >            INC     L               ; next                      ' 4     |
0712   0658                         readMixAndUnsign            ;                       ' 44    |
0712   0658 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0712   0659 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0712   065A E2 60 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0712   065D 78          >            LD      A, B            ; fix overflow              ' 4     |
0712   065E CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0712   0660 80          >            ADD     B               ; unsign                    ' 4     |
0712   0661 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0712   0662 1C          >            INC     E               ;                           ' 4     |
0712   0663 2C          >            INC     L               ; next                      ' 4     |
0713   0664             
0714   0664                         sampleOutput                ; +2 --> a bit late     ' 36    |
0714   0664 D9          >            EXX                     ;                           ' 4     | 4
0714   0665 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0714   0666 03          >            INC     BC              ; increment read address    ' 6     |
0714   0667 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0714   0669 12          >            LD      (DE), A         ; play sample               ' 7     |
0714   066A D9          >            EXX                     ;                           ' 4     | (36)
0715   066B                         readMixAndUnsign            ;                       ' 44    |
0715   066B 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0715   066C 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0715   066D E2 73 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0715   0670 78          >            LD      A, B            ; fix overflow              ' 4     |
0715   0671 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0715   0673 80          >            ADD     B               ; unsign                    ' 4     |
0715   0674 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0715   0675 1C          >            INC     E               ;                           ' 4     |
0715   0676 2C          >            INC     L               ; next                      ' 4     |
0716   0677                         readMixAndUnsign            ;                       ' 44    |
0716   0677 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0716   0678 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0716   0679 E2 7F 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0716   067C 78          >            LD      A, B            ; fix overflow              ' 4     |
0716   067D CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0716   067F 80          >            ADD     B               ; unsign                    ' 4     |
0716   0680 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0716   0681 1C          >            INC     E               ;                           ' 4     |
0716   0682 2C          >            INC     L               ; next                      ' 4     |
0717   0683                         readMixAndUnsign            ;                       ' 44    | 254+2
0717   0683 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0717   0684 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0717   0685 E2 8B 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0717   0688 78          >            LD      A, B            ; fix overflow              ' 4     |
0717   0689 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0717   068B 80          >            ADD     B               ; unsign                    ' 4     |
0717   068C 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0717   068D 1C          >            INC     E               ;                           ' 4     |
0717   068E 2C          >            INC     L               ; next                      ' 4     |
0718   068F                         readMixAndUnsign            ;                       ' 44    |
0718   068F 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0718   0690 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0718   0691 E2 97 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0718   0694 78          >            LD      A, B            ; fix overflow              ' 4     |
0718   0695 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0718   0697 80          >            ADD     B               ; unsign                    ' 4     |
0718   0698 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0718   0699 1C          >            INC     E               ;                           ' 4     |
0718   069A 2C          >            INC     L               ; next                      ' 4     |
0719   069B                         readMixAndUnsign            ;                       ' 44    |
0719   069B 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0719   069C 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0719   069D E2 A3 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0719   06A0 78          >            LD      A, B            ; fix overflow              ' 4     |
0719   06A1 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0719   06A3 80          >            ADD     B               ; unsign                    ' 4     |
0719   06A4 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0719   06A5 1C          >            INC     E               ;                           ' 4     |
0719   06A6 2C          >            INC     L               ; next                      ' 4     |
0720   06A7             
0721   06A7                         sampleOutput                ; +4 --> a bit late     ' 36    |
0721   06A7 D9          >            EXX                     ;                           ' 4     | 4
0721   06A8 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0721   06A9 03          >            INC     BC              ; increment read address    ' 6     |
0721   06AA CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0721   06AC 12          >            LD      (DE), A         ; play sample               ' 7     |
0721   06AD D9          >            EXX                     ;                           ' 4     | (36)
0722   06AE                         readMixAndUnsign            ;                       ' 44    |
0722   06AE 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0722   06AF 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0722   06B0 E2 B6 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0722   06B3 78          >            LD      A, B            ; fix overflow              ' 4     |
0722   06B4 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0722   06B6 80          >            ADD     B               ; unsign                    ' 4     |
0722   06B7 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0722   06B8 1C          >            INC     E               ;                           ' 4     |
0722   06B9 2C          >            INC     L               ; next                      ' 4     |
0723   06BA                         readMixAndUnsign            ;                       ' 44    | 254-4
0723   06BA 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0723   06BB 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0723   06BC E2 C2 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0723   06BF 78          >            LD      A, B            ; fix overflow              ' 4     |
0723   06C0 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0723   06C2 80          >            ADD     B               ; unsign                    ' 4     |
0723   06C3 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0723   06C4 1C          >            INC     E               ;                           ' 4     |
0723   06C5 2C          >            INC     L               ; next                      ' 4     |
0724   06C6                         readMixAndUnsign            ;                       ' 44    |
0724   06C6 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0724   06C7 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0724   06C8 E2 CE 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0724   06CB 78          >            LD      A, B            ; fix overflow              ' 4     |
0724   06CC CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0724   06CE 80          >            ADD     B               ; unsign                    ' 4     |
0724   06CF 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0724   06D0 1C          >            INC     E               ;                           ' 4     |
0724   06D1 2C          >            INC     L               ; next                      ' 4     |
0725   06D2                         readMixAndUnsign            ;                       ' 44    |
0725   06D2 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0725   06D3 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0725   06D4 E2 DA 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0725   06D7 78          >            LD      A, B            ; fix overflow              ' 4     |
0725   06D8 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0725   06DA 80          >            ADD     B               ; unsign                    ' 4     |
0725   06DB 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0725   06DC 1C          >            INC     E               ;                           ' 4     |
0725   06DD 2C          >            INC     L               ; next                      ' 4     |
0726   06DE                         wait24                      ;                       ' 24    |
0726   06DE 18 00       >            JR      .loop
0726   06E0 18 00       >            JR      .loop
0727   06E2 0D                      DEC     C                   ;                       ' 4     |
0728   06E3 C2 21 06                JP      NZ, .loop_ch3       ;                       ' 10    |
0729   06E6             
0730   06E6             ; $B3
0731   06E6                         sampleOutput                ;                       ' 36    |
0731   06E6 D9          >            EXX                     ;                           ' 4     | 4
0731   06E7 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0731   06E8 03          >            INC     BC              ; increment read address    ' 6     |
0731   06E9 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0731   06EB 12          >            LD      (DE), A         ; play sample               ' 7     |
0731   06EC D9          >            EXX                     ;                           ' 4     | (36)
0732   06ED                         readMixAndUnsign            ;                       ' 44    |
0732   06ED 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0732   06EE 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0732   06EF E2 F5 06    >            JP      PO, .ok         ; check overflow            ' 10    |
0732   06F2 78          >            LD      A, B            ; fix overflow              ' 4     |
0732   06F3 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0732   06F5 80          >            ADD     B               ; unsign                    ' 4     |
0732   06F6 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0732   06F7 1C          >            INC     E               ;                           ' 4     |
0732   06F8 2C          >            INC     L               ; next                      ' 4     |
0733   06F9                         readMixAndUnsign            ;                       ' 44    | 254
0733   06F9 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0733   06FA 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0733   06FB E2 01 07    >            JP      PO, .ok         ; check overflow            ' 10    |
0733   06FE 78          >            LD      A, B            ; fix overflow              ' 4     |
0733   06FF CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0733   0701 80          >            ADD     B               ; unsign                    ' 4     |
0733   0702 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0733   0703 1C          >            INC     E               ;                           ' 4     |
0733   0704 2C          >            INC     L               ; next                      ' 4     |
0734   0705                         readMixAndUnsign            ;                       ' 44    |
0734   0705 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0734   0706 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0734   0707 E2 0D 07    >            JP      PO, .ok         ; check overflow            ' 10    |
0734   070A 78          >            LD      A, B            ; fix overflow              ' 4     |
0734   070B CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0734   070D 80          >            ADD     B               ; unsign                    ' 4     |
0734   070E 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0734   070F 1C          >            INC     E               ;                           ' 4     |
0734   0710 2C          >            INC     L               ; next                      ' 4     |
0735   0711                         readMixAndUnsign            ;                       ' 44    |
0735   0711 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
0735   0712 86          >            ADD     (HL)            ; mix with source sample    ' 7+1   | (25)
0735   0713 E2 19 07    >            JP      PO, .ok         ; check overflow            ' 10    |
0735   0716 78          >            LD      A, B            ; fix overflow              ' 4     |
0735   0717 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
0735   0719 80          >            ADD     B               ; unsign                    ' 4     |
0735   071A 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (44)
0735   071B 1C          >            INC     E               ;                           ' 4     |
0735   071C 2C          >            INC     L               ; next                      ' 4     |
0736   071D                         wait42                      ;                       ' 42    |
0736   071D 3E 02       >            LD      A, w            ; 7-2
0736   071F 3D          >            DEC     A               ; 4
0736   0720 20 FD       >            JR      NZ, .loop       ; 12
0736   0722 00          >            NOP
0736   0723 00          >            NOP
0737   0724             
0738   0724             ; $B4
0739   0724                         sampleOutput                ;                       ' 36    |
0739   0724 D9          >            EXX                     ;                           ' 4     | 4
0739   0725 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0739   0726 03          >            INC     BC              ; increment read address    ' 6     |
0739   0727 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0739   0729 12          >            LD      (DE), A         ; play sample               ' 7     |
0739   072A D9          >            EXX                     ;                           ' 4     | (36)
0740   072B                         updateChannelData 3         ; update channel data   ' 178   | 254
0740   072B 2A 2E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0740   072E 23          >            INC     HL                      ;                       ' 6     | (38)
0740   072F 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0740   0732 2A 30 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0740   0735 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
0740   0736 7C          >            LD      A, H                    ;                       ' 4     |
0740   0737 B5          >            OR      L                       ;                       ' 4     | 18 (78)
0740   0738 CA 45 07    >            JP      Z, .done                ; sample done ?         ' 10    |
0740   073B 3E 04       >            LD      A, w            ; 7-2
0740   073D 3D          >            DEC     A               ; 4
0740   073E 20 FD       >            JR      NZ, .loop       ; 12
0740   0740 00          >            NOP
0740   0741 00          >            NOP
0740   0742 C3 57 07    >            JP      .end                    ;                       ' 10    | 84 (162)
0740   0745 21 02 01    >            LD      HL, STATUS              ; HL = STATUS           ' 10    |
0740   0748 CB 9E       >            RES     ch, (HL)                ; clear play status     ' 15    | 25 (103)
0740   074A AF          >            XOR     A                       ;                       ' 4     |
0740   074B 32 2C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio            ' 13    | 17 (120)
0740   074E 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr    ' 16    |
0740   0751 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr      ' 16    | 42 (162)
0740   0754 21 01 00    >            LD      HL, $0001               ; HL = null PCM len     ' 10    |
0740   0757 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    | (178)
0741   075A                         wait40                      ; sync                  ' 40    |
0741   075A ED 4F       >            LD      R, A
0741   075C ED 4F       >            LD      R, A
0741   075E ED 4F       >            LD      R, A
0741   0760 ED 4F       >            LD      R, A
0741   0762 00          >            NOP
0742   0763             
0743   0763             
0744   0763             ; next write buffer
0745   0763             ; -----------------
0746   0763             
0747   0763             ; $B5
0748   0763             next_write_buf
0749   0763                         sampleOutput                ;                       ' 36    | 36
0749   0763 D9          >            EXX                     ;                           ' 4     | 4
0749   0764 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0749   0765 03          >            INC     BC              ; increment read address    ' 6     |
0749   0766 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0749   0768 12          >            LD      (DE), A         ; play sample               ' 7     |
0749   0769 D9          >            EXX                     ;                           ' 4     | (36)
0750   076A             
0751   076A 14                      INC     D                   ; inc write addr        ' 4     |
0752   076B CB 92                   RES     2, D                ; write addr &= 0x03FF  ' 8     | 32 (68)
0753   076D ED 53 38 01             LD      (WRITEBUF), DE      ; save new write addr   ' 20    |
0754   0771             
0755   0771             set_DAC_enabled
0756   0771 3A 02 01                LD      A, (STATUS)         ; A = (STATUS)          ' 13    |
0757   0774 E6 0F                   AND     $0F                 ; PCM is playing ?      ' 7     | 30 (98)
0758   0776 CA 7E 07                JP      Z, .no_pcm          ;                       ' 10    |
0759   0779             
0760   0779 3E 80                   LD      A, $80              ; DAC enabled           ' 7     |
0761   077B C3 82 07                JP      .set_2B             ;                       ' 10    | 17 (115)
0762   077E             
0763   077E             .no_pcm
0764   077E 3A 60 01                LD      A, (YM_2B_SAV)      ; use last 2B write     ' 13    |
0765   0781 00                      NOP                         ; sync                  ' 4     | 17 (115)
0766   0782             
0767   0782             .set_2B
0768   0782 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
0769   0785 36 2B                   LD      (HL), $2B           ; register = DAC enable ' 10    | 20 (135)
0770   0787             
0771   0787 2A 61 01                LD      HL, (YM_2B_PT)      ; HL point to write sav ' 16    |
0772   078A 77                      LD      (HL), A             ; set DAC enabled       ' 7     |
0773   078B 2C                      INC     L                   ; HL point to read sav  ' 4     |
0774   078C CB 95                   RES     2, L                ;                       ' 8     | 58 (193)
0775   078E 7E                      LD      A, (HL)             ; A = current DAC enab  ' 7     |
0776   078F 22 61 01                LD      (YM_2B_PT), HL      ; save new write sav    ' 16    |
0777   0792             
0778   0792 21 01 40                LD      HL, YMPORT1         ; HL point on YM port1  ' 10    |
0779   0795 77                      LD      (HL), A             ; set DAC enabled       ' 7     |
0780   0796                         wait22                      ; sync                  ' 22    | 61 (254)
0780   0796 ED 4F       >            LD      R, A
0780   0798 ED 4F       >            LD      R, A
0780   079A 00          >            NOP
0781   079B                         waitYMReady                 ; wait YM to be ready   ' 22    |
0781   079B CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
0781   079D C2 9B 07    >            JP      NZ, .wait       ; wait while busy           ' 10    |
0782   07A0             
0783   07A0             ; $B6
0784   07A0                         sampleOutputSafe            ; sample output         ' 46    | 46
0784   07A0 D9          >            EXX                     ;                           ' 4     | 4
0784   07A1 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
0784   07A3 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0784   07A4 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
0784   07A5 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
0784   07A7 12          >            LD      (DE), A         ; play sample               ' 7     |
0784   07A8 D9          >            EXX                     ;                           ' 4     | (46)
0785   07A9             
0786   07A9                         wait160                     ; sync                  ' 160   | 206
0786   07A9 3E 09       >            LD      A, w            ; 7-2
0786   07AB 3D          >            DEC     A               ; 4
0786   07AC 20 FD       >            JR      NZ, .loop       ; 12
0786   07AE 1A          >            LD      A, (DE)
0786   07AF 1A          >            LD      A, (DE)
0787   07B0             
0788   07B0 FD 7D                   LD      A, IYL              ;                       ' 8     |
0789   07B2 B7                      OR      A                   ; vint happened ?       ' 4     | 22 (228)
0790   07B3 CA BC 07                JP      Z, .no_vint         ; no --> sync rd and wr ' 10    |
0791   07B6             
0792   07B6             .vint_to_do
0793   07B6                         wait16                      ; sync                  ' 16    | 26 (254)
0793   07B6 18 00       >            JR      .loop
0793   07B8 00          >            NOP
0794   07B9 C3 C3 07                JP      prepare_xgm         ; go prepare XGM data   ' 10    |
0795   07BC             
0796   07BC             .no_vint                                ;                       ' 228
0797   07BC                         compareReadWrite            ; write buf != read buf ' 16    | 26 (254)
0797   07BC D9          >            EXX                     ;                           ' 4     |
0797   07BD 78          >            LD      A, B            ; A = read buffer high      ' 4     |
0797   07BE D9          >            EXX                     ;                           ' 4     | 16
0797   07BF BA          >            CP      D               ; compare write buffer high ' 4     |
0798   07C0 C2 CA 02                JP      NZ, main_loop       ; continu to fill write ' 10    |
0799   07C3             
0800   07C3             
0801   07C3             ; prepare XGM buffer
0802   07C3             ; ------------------
0803   07C3             
0804   07C3             ; $B7
0805   07C3             prepare_xgm
0806   07C3                         sampleOutput                ;                       ' 36    | 36
0806   07C3 D9          >            EXX                     ;                           ' 4     | 4
0806   07C4 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0806   07C5 03          >            INC     BC              ; increment read address    ' 6     |
0806   07C6 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0806   07C8 12          >            LD      (DE), A         ; play sample               ' 7     |
0806   07C9 D9          >            EXX                     ;                           ' 4     | (36)
0807   07CA             
0808   07CA 11 00 17                LD      DE, XGM_BUFFER      ; DE point to XGM buf   ' 10    |
0809   07CD 3A 02 01                LD      A, (STATUS)         ; A = STATUS            ' 13    |
0810   07D0 CB 77                   BIT     XGM_PLAY_SFT, A     ; is XGM playing ?      ' 8     | 41 (77)
0811   07D2 C2 DE 07                JP      NZ, has_xgm         ; go to prepare buf     ' 10    |
0812   07D5             
0813   07D5                         wait146                     ; sync                  ' 146   |
0813   07D5 3E 09       >            LD      A, w            ; 7-2
0813   07D7 3D          >            DEC     A               ; 4
0813   07D8 20 FD       >            JR      NZ, .loop       ; 12
0814   07DA AF                      XOR     A                   ; A = 0                 ' 4     | 160 (237)
0815   07DB C3 E7 09                JP      end_prep_xgm        ; preparation done      ' 10    |
0816   07DE             
0817   07DE             has_xgm
0818   07DE 2A 34 01                LD      HL, (XGM_ADDR)      ; XGM addr (b0-b15)     ' 16    |
0819   07E1 7C                      LD      A, H                ; A = XGM addr (b8-b15) ' 4     |
0820   07E2 17                      RLA                         ; CF = XGM addr b15     ' 4     | 146 (223)
0821   07E3 3A 36 01                LD      A, (XGM_ADDR+2)     ; A = sample addr (H)   ' 13    |
0822   07E6 17                      RLA                         ; sample addr (b22-b15) ' 4     |
0823   07E7                         setBank_BC                  ; setBank               ' 105   |
0823   07E7 01 00 60    >            LD  BC, BANKREG         ; BC = BANKREG              ' 10
0823   07EA 02          >            LD  (BC), A             ; #1 (bit 15)               ' 7
0823   07EB 1F          >            RRA                     ;                           ' 4
0823   07EC 02          >            LD  (BC), A             ; #2 (bit 16)               ' 7
0823   07ED 1F          >            RRA                     ;                           ' 4
0823   07EE 02          >            LD  (BC), A             ; #3 (bit 17)               ' 7
0823   07EF 1F          >            RRA                     ;                           ' 4
0823   07F0 02          >            LD  (BC), A             ; #4 (bit 18)               ' 7
0823   07F1 1F          >            RRA                     ;                           ' 4
0823   07F2 02          >            LD  (BC), A             ; #5 (bit 19)               ' 7
0823   07F3 1F          >            RRA                     ;                           ' 4
0823   07F4 02          >            LD  (BC), A             ; #6 (bit 20)               ' 7
0823   07F5 1F          >            RRA                     ;                           ' 4
0823   07F6 02          >            LD  (BC), A             ; #7 (bit 21)               ' 7
0823   07F7 1F          >            RRA                     ;                           ' 4
0823   07F8 02          >            LD  (BC), A             ; #8 (bit 22)               ' 7
0823   07F9 1F          >            RRA                     ;                           ' 4
0823   07FA 02          >            LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0824   07FB             
0825   07FB 7C                      LD      A, H                ; save H                ' 4     |
0826   07FC CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0827   07FE 06 00                   LD      B, $0               ; B = 0                 ' 7     | 30 (254-1)
0828   0800 4E                      LD      C, (HL)             ; BC = bytes to process ' 7     |
0829   0801 67                      LD      H, A                ; restore H             ' 4     |
0830   0802             
0831   0802             ; $B7+X
0832   0802                         sampleOutput                ;                       ' 36    | (36-1)
0832   0802 D9          >            EXX                     ;                           ' 4     | 4
0832   0803 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0832   0804 03          >            INC     BC              ; increment read address    ' 6     |
0832   0805 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0832   0807 12          >            LD      (DE), A         ; play sample               ' 7     |
0832   0808 D9          >            EXX                     ;                           ' 4     | (36)
0833   0809             
0834   0809 7D                      LD      A, L                ; A = addr low          ' 4     |
0835   080A 81                      ADD     C                   ; compute new addr (L)  ' 4     |
0836   080B 32 34 01                LD      (XGM_ADDR+0), A     ; store new addr (L)    ' 13    | 28 (63)
0837   080E 38 1A                   JR      C, .split           ; carry --> separate    ' 7     |
0838   0810             
0839   0810             .no_split
0840   0810                         wait104                     ; sync                  ' 104   | (167)
0840   0810 3E 05       >            LD      A, w            ; 7-2
0840   0812 3D          >            DEC     A               ; 4
0840   0813 20 FD       >            JR      NZ, .loop       ; 12
0840   0815 ED 4F       >            LD      R, A
0840   0817 ED 4F       >            LD      R, A
0840   0819 00          >            NOP
0841   081A             
0842   081A CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0843   081C 23                      INC     HL                  ; HL = start frame data ' 6     |
0844   081D AF                      XOR     A                   ; no second part        ' 4     |
0845   081E DD 6F                   LD      IXL, A              ; IXL = sec part size   ' 8     | 44 (211)
0846   0820 00                      NOP                         ;                       ' 4     |
0847   0821 0D                      DEC     C                   ; first part size = 0 ? ' 4     |
0848   0822 CA 07 09                JP      Z, .second_part     ; go to second part     ' 10    |
0849   0825             
0850   0825                         wait12                      ; sync                  ' 12    | 22 (233)
0850   0825 18 00       >            JR      .loop
0851   0827 C3 66 08                JP      .first_part_pre     ; start filling         ' 10    |
0852   082A             
0853   082A             .split
0854   082A DD 6F                   LD      IXL, A              ; IXL = sec part size   ' 8     |
0855   082C 91                      SUB     C                   ;                       ' 4     |
0856   082D ED 44                   NEG                         ;                       ' 8     | 34 (97)
0857   082F 3D                      DEC     A                   ; A = (C - IXL) - 1     ' 4     |
0858   0830 C2 4E 08                JP      NZ, .first_part_ok  ; not zero --> do it    ' 10    |
0859   0833             
0860   0833 7C                      LD      A, H                ; A = addr med (M)      ' 4     |
0861   0834 C6 01                   ADD     $1                  ; inc with CF set       ' 7     |
0862   0836 32 35 01                LD      (XGM_ADDR+1), A     ; store new addr (M)    ' 13    |
0863   0839 3A 36 01                LD      A, (XGM_ADDR+2)     ; load sample addr (H)  ' 13    |
0864   083C 88                      ADC     B                   ; inc                   ' 4     | 68 (164)
0865   083D 32 36 01                LD      (XGM_ADDR+2), A     ; store sample addr (H) ' 13    |
0866   0840 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0867   0842 23                      INC     HL                  ; HL = start frame data ' 6     |
0868   0843             
0869   0843                         wait36                      ; sync                  ' 36    |
0869   0843 ED 4F       >            LD      R, A
0869   0845 ED 4F       >            LD      R, A
0869   0847 ED 4F       >            LD      R, A
0869   0849 ED 4F       >            LD      R, A
0870   084B C3 07 09                JP      .second_part        ; go second part        ' 10    | 65 (211)
0871   084E             
0872   084E             .first_part_ok
0873   084E 4F                      LD      C, A                ; C = first part size   ' 4     |
0874   084F 7C                      LD      A, H                ; A = addr med (M)      ' 4     |
0875   0850 C6 01                   ADD     $1                  ; inc with CF set       ' 7     |
0876   0852 32 35 01                LD      (XGM_ADDR+1), A     ; store new addr (M)    ' 13    |
0877   0855 3A 36 01                LD      A, (XGM_ADDR+2)     ; load sample addr (H)  ' 13    | 72 (169)
0878   0858 88                      ADC     B                   ; inc                   ' 4     |
0879   0859 32 36 01                LD      (XGM_ADDR+2), A     ; store sample addr (H) ' 13    |
0880   085C CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0881   085E 23                      INC     HL                  ; HL = start frame data ' 6     |
0882   085F             
0883   085F                         wait64                      ; sync                  ' 64    | (233)
0883   085F 3E 03       >            LD      A, w            ; 7-2
0883   0861 3D          >            DEC     A               ; 4
0883   0862 20 FD       >            JR      NZ, .loop       ; 12
0883   0864 1A          >            LD      A, (DE)
0883   0865 1A          >            LD      A, (DE)
0884   0866             
0885   0866             .first_part_pre                         ;                       ' 233
0886   0866 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0887   0868 B9                      CP      C                   ; C < block size        ' 4     | 21 (254)
0888   0869 D2 92 08                JP      NC, .first_part_end ; go to last bytes      ' 10    |
0889   086C             
0890   086C             .first_part
0891   086C             ; $B7+X
0892   086C                         sampleOutput                ;                       ' 36    | 36
0892   086C D9          >            EXX                     ;                           ' 4     | 4
0892   086D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0892   086E 03          >            INC     BC              ; increment read address    ' 6     |
0892   086F CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0892   0871 12          >            LD      (DE), A         ; play sample               ' 7     |
0892   0872 D9          >            EXX                     ;                           ' 4     | (36)
0893   0873             
0894   0873 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0895   0875 ED A0                   LDI                         ; 11 bytes at once      ' 16+1  |
0896   0877 ED A0                   LDI                         ;                       ' 16+1  |
0897   0879 ED A0                   LDI                         ;                       ' 16+1  |
0898   087B ED A0                   LDI                         ;                       ' 16+1  |
0899   087D ED A0                   LDI                         ;                       ' 16+1  | 187 (223)
0900   087F ED A0                   LDI                         ;                       ' 16+1  |
0901   0881 ED A0                   LDI                         ;                       ' 16+1  |
0902   0883 ED A0                   LDI                         ;                       ' 16+1  |
0903   0885 ED A0                   LDI                         ;                       ' 16+1  |
0904   0887 ED A0                   LDI                         ;                       ' 16+1  |
0905   0889             
0906   0889                         wait10                      ; sync                  ' 10    |
0906   0889 C3 8C 08    >            JP      .loop
0907   088C 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0908   088E B9                      CP      C                   ; remaining > 11        ' 4     | 31 (254)
0909   088F DA 6C 08                JP      C, .first_part      ; continu block fill    ' 10    |
0910   0892             
0911   0892             .first_part_end
0912   0892             ; $B7+X
0913   0892                         sampleOutput                ;                       ' 36    | 36
0913   0892 D9          >            EXX                     ;                           ' 4     | 4
0913   0893 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0913   0894 03          >            INC     BC              ; increment read address    ' 6     |
0913   0895 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0913   0897 12          >            LD      (DE), A         ; play sample               ' 7     |
0913   0898 D9          >            EXX                     ;                           ' 4     | (36)
0914   0899             
0915   0899 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0916   089B E2 E6 08                JP      PO, .fst_part_d0    ;                       ' 10    | 27 (63)
0917   089E ED A0                   LDI                         ;                       ' 16+1  |
0918   08A0 E2 EC 08                JP      PO, .fst_part_d1    ;                       ' 10    | 27 (90)
0919   08A3 ED A0                   LDI                         ;                       ' 16+1  |
0920   08A5 E2 F2 08                JP      PO, .fst_part_d2    ;                       ' 10    | 27 (117)
0921   08A8 ED A0                   LDI                         ;                       ' 16+1  |
0922   08AA E2 F8 08                JP      PO, .fst_part_d3    ;                       ' 10    | 27 (144)
0923   08AD ED A0                   LDI                         ;                       ' 16+1  |
0924   08AF E2 FE 08                JP      PO, .fst_part_d4    ;                       ' 10    | 27 (171)
0925   08B2 ED A0                   LDI                         ;                       ' 16+1  |
0926   08B4 E2 04 09                JP      PO, .fst_part_d5    ;                       ' 10    | 27 (198)
0927   08B7             
0928   08B7                         wait56                      ; sync                  ' 56    | (254)
0928   08B7 3E 02       >            LD      A, w            ; 7-2
0928   08B9 3D          >            DEC     A               ; 4
0928   08BA 20 FD       >            JR      NZ, .loop       ; 12
0928   08BC ED 4F       >            LD      R, A
0928   08BE ED 4F       >            LD      R, A
0928   08C0 00          >            NOP
0929   08C1             
0930   08C1             ; $B7+X
0931   08C1                         sampleOutput                ;                       ' 36    | 36
0931   08C1 D9          >            EXX                     ;                           ' 4     | 4
0931   08C2 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0931   08C3 03          >            INC     BC              ; increment read address    ' 6     |
0931   08C4 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0931   08C6 12          >            LD      (DE), A         ; play sample               ' 7     |
0931   08C7 D9          >            EXX                     ;                           ' 4     | (36)
0932   08C8             
0933   08C8 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0934   08CA E2 E6 08                JP      PO, .fst_part_d0    ;                       ' 10    | 27 (63)
0935   08CD ED A0                   LDI                         ;                       ' 16+1  |
0936   08CF E2 EC 08                JP      PO, .fst_part_d1    ;                       ' 10    | 27 (90)
0937   08D2 ED A0                   LDI                         ;                       ' 16+1  |
0938   08D4 E2 F2 08                JP      PO, .fst_part_d2    ;                       ' 10    | 27 (117)
0939   08D7 ED A0                   LDI                         ;                       ' 16+1  |
0940   08D9 E2 F8 08                JP      PO, .fst_part_d3    ;                       ' 10    | 27 (144)
0941   08DC ED A0                   LDI                         ;                       ' 16+1  |
0942   08DE E2 FE 08                JP      PO, .fst_part_d4    ;                       ' 10    | 27 (171)
0943   08E1 ED A0                   LDI                         ;                       ' 16+1  |
0944   08E3 C3 04 09                JP      .fst_part_d5        ;                       ' 10    | 27 (198)
0945   08E6             
0946   08E6             .fst_part_d0
0947   08E6                         wait27                      ; sync                  ' 27    | (90)
0947   08E6 ED 4F       >            LD      R, A
0947   08E8 ED 4F       >            LD      R, A
0947   08EA ED 4F       >            LD      R, A
0948   08EC             .fst_part_d1
0949   08EC                         wait27                      ; sync                  ' 27    | (117)
0949   08EC ED 4F       >            LD      R, A
0949   08EE ED 4F       >            LD      R, A
0949   08F0 ED 4F       >            LD      R, A
0950   08F2             .fst_part_d2
0951   08F2                         wait27                      ; sync                  ' 27    | (144)
0951   08F2 ED 4F       >            LD      R, A
0951   08F4 ED 4F       >            LD      R, A
0951   08F6 ED 4F       >            LD      R, A
0952   08F8             .fst_part_d3
0953   08F8                         wait27                      ; sync                  ' 27    | (171)
0953   08F8 ED 4F       >            LD      R, A
0953   08FA ED 4F       >            LD      R, A
0953   08FC ED 4F       >            LD      R, A
0954   08FE             .fst_part_d4
0955   08FE                         wait27                      ; sync                  ' 27    | (198)
0955   08FE ED 4F       >            LD      R, A
0955   0900 ED 4F       >            LD      R, A
0955   0902 ED 4F       >            LD      R, A
0956   0904             .fst_part_d5
0957   0904                         wait13                      ; sync                  ' 13    | (211)
0957   0904 ED 4F       >            LD      R, A
0957   0906 00          >            NOP
0958   0907             
0959   0907             .second_part                            ;                       ' 211
0960   0907 00                      NOP                         ; sync                  ' 4
0961   0908 DD 7D                   LD      A, IXL              ; A = second part size  ' 8     |
0962   090A B7                      OR      A                   ;                       ' 4     | 26 (237)
0963   090B CA E7 09                JP      Z, end_prep_xgm     ; done                  ' 10    |
0964   090E             
0965   090E                         wait17                      ; sync                  ' 17    | 254
0965   090E C3 11 09    >            JP      .loop
0965   0911 1A          >            LD      A, (DE)
0966   0912             
0967   0912             ; $B7+X
0968   0912                         sampleOutput                ;                       ' 36    | 36
0968   0912 D9          >            EXX                     ;                           ' 4     | 4
0968   0913 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0968   0914 03          >            INC     BC              ; increment read address    ' 6     |
0968   0915 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0968   0917 12          >            LD      (DE), A         ; play sample               ' 7     |
0968   0918 D9          >            EXX                     ;                           ' 4     | (36)
0969   0919             
0970   0919 2A 34 01                LD      HL, (XGM_ADDR)      ; XGM addr (b0-b15)     ' 16    |
0971   091C 7C                      LD      A, H                ; A = XGM addr (b8-b15) ' 4     |
0972   091D 17                      RLA                         ; CF = XGM addr b15     ' 4     | 146 (182)
0973   091E 3A 36 01                LD      A, (XGM_ADDR+2)     ; A = sample addr (H)   ' 13    |
0974   0921 17                      RLA                         ; sample addr (b22-b15) ' 4     |
0975   0922                         setBank_BC                  ; setBank               ' 105   |
0975   0922 01 00 60    >            LD  BC, BANKREG         ; BC = BANKREG              ' 10
0975   0925 02          >            LD  (BC), A             ; #1 (bit 15)               ' 7
0975   0926 1F          >            RRA                     ;                           ' 4
0975   0927 02          >            LD  (BC), A             ; #2 (bit 16)               ' 7
0975   0928 1F          >            RRA                     ;                           ' 4
0975   0929 02          >            LD  (BC), A             ; #3 (bit 17)               ' 7
0975   092A 1F          >            RRA                     ;                           ' 4
0975   092B 02          >            LD  (BC), A             ; #4 (bit 18)               ' 7
0975   092C 1F          >            RRA                     ;                           ' 4
0975   092D 02          >            LD  (BC), A             ; #5 (bit 19)               ' 7
0975   092E 1F          >            RRA                     ;                           ' 4
0975   092F 02          >            LD  (BC), A             ; #6 (bit 20)               ' 7
0975   0930 1F          >            RRA                     ;                           ' 4
0975   0931 02          >            LD  (BC), A             ; #7 (bit 21)               ' 7
0975   0932 1F          >            RRA                     ;                           ' 4
0975   0933 02          >            LD  (BC), A             ; #8 (bit 22)               ' 7
0975   0934 1F          >            RRA                     ;                           ' 4
0975   0935 02          >            LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0976   0936             
0977   0936 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     | 15 (197)
0978   0938 2E 00                   LD      L, 0                ;                       ' 7     |
0979   093A             
0980   093A                         wait21                      ; sync                  ' 21    | (218)
0980   093A 18 00       >            JR      .loop
0980   093C ED 4F       >            LD      R, A
0981   093E             
0982   093E 06 00                   LD      B, 0                ; B = 0                 ' 7     |
0983   0940 DD 4D                   LD      C, IXL              ; BC = second part size ' 8     |
0984   0942 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     | 36 (254)
0985   0944 B9                      CP      C                   ; C < block size        ' 4     |
0986   0945 D2 6E 09                JP      NC, .sec_part_end   ; go to last bytes      ' 10    |
0987   0948             
0988   0948             ; $B7+X
0989   0948             .sec_part_loop
0990   0948                         sampleOutput                ;                       ' 36    | 36
0990   0948 D9          >            EXX                     ;                           ' 4     | 4
0990   0949 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0990   094A 03          >            INC     BC              ; increment read address    ' 6     |
0990   094B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0990   094D 12          >            LD      (DE), A         ; play sample               ' 7     |
0990   094E D9          >            EXX                     ;                           ' 4     | (36)
0991   094F             
0992   094F ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0993   0951 ED A0                   LDI                         ; 11 bytes at once      ' 16+1  |
0994   0953 ED A0                   LDI                         ;                       ' 16+1  |
0995   0955 ED A0                   LDI                         ;                       ' 16+1  |
0996   0957 ED A0                   LDI                         ;                       ' 16+1  |
0997   0959 ED A0                   LDI                         ;                       ' 16+1  | 187 (223)
0998   095B ED A0                   LDI                         ;                       ' 16+1  |
0999   095D ED A0                   LDI                         ;                       ' 16+1  |
1000   095F ED A0                   LDI                         ;                       ' 16+1  |
1001   0961 ED A0                   LDI                         ;                       ' 16+1  |
1002   0963 ED A0                   LDI                         ;                       ' 16+1  |
1003   0965             
1004   0965                         wait10                      ; sync                  ' 10    |
1004   0965 C3 68 09    >            JP      .loop
1005   0968 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
1006   096A B9                      CP      C                   ; remaining > 11        ' 4     | 31 (254)
1007   096B DA 48 09                JP      C, .sec_part_loop   ; continu block fill    ' 10    |
1008   096E             
1009   096E             .sec_part_end
1010   096E             ; $B7+X
1011   096E                         sampleOutput                ;                       ' 36    | 36
1011   096E D9          >            EXX                     ;                           ' 4     | 4
1011   096F 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1011   0970 03          >            INC     BC              ; increment read address    ' 6     |
1011   0971 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1011   0973 12          >            LD      (DE), A         ; play sample               ' 7     |
1011   0974 D9          >            EXX                     ;                           ' 4     | (36)
1012   0975             
1013   0975 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
1014   0977 E2 C2 09                JP      PO, .sec_part_d0    ;                       ' 10    | 27 (63)
1015   097A ED A0                   LDI                         ;                       ' 16+1  |
1016   097C E2 C8 09                JP      PO, .sec_part_d1    ;                       ' 10    | 27 (90)
1017   097F ED A0                   LDI                         ;                       ' 16+1  |
1018   0981 E2 CE 09                JP      PO, .sec_part_d2    ;                       ' 10    | 27 (117)
1019   0984 ED A0                   LDI                         ;                       ' 16+1  |
1020   0986 E2 D4 09                JP      PO, .sec_part_d3    ;                       ' 10    | 27 (144)
1021   0989 ED A0                   LDI                         ;                       ' 16+1  |
1022   098B E2 DA 09                JP      PO, .sec_part_d4    ;                       ' 10    | 27 (171)
1023   098E ED A0                   LDI                         ;                       ' 16+1  |
1024   0990 E2 E0 09                JP      PO, .sec_part_d5    ;                       ' 10    | 27 (198)
1025   0993             
1026   0993                         wait56                      ; sync                  ' 56    | (254)
1026   0993 3E 02       >            LD      A, w            ; 7-2
1026   0995 3D          >            DEC     A               ; 4
1026   0996 20 FD       >            JR      NZ, .loop       ; 12
1026   0998 ED 4F       >            LD      R, A
1026   099A ED 4F       >            LD      R, A
1026   099C 00          >            NOP
1027   099D             
1028   099D             ; $B7+X
1029   099D                         sampleOutput                ;                       ' 36    | 36
1029   099D D9          >            EXX                     ;                           ' 4     | 4
1029   099E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1029   099F 03          >            INC     BC              ; increment read address    ' 6     |
1029   09A0 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1029   09A2 12          >            LD      (DE), A         ; play sample               ' 7     |
1029   09A3 D9          >            EXX                     ;                           ' 4     | (36)
1030   09A4             
1031   09A4 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
1032   09A6 E2 C2 09                JP      PO, .sec_part_d0    ;                       ' 10    | 27 (63)
1033   09A9 ED A0                   LDI                         ;                       ' 16+1  |
1034   09AB E2 C8 09                JP      PO, .sec_part_d1    ;                       ' 10    | 27 (90)
1035   09AE ED A0                   LDI                         ;                       ' 16+1  |
1036   09B0 E2 CE 09                JP      PO, .sec_part_d2    ;                       ' 10    | 27 (117)
1037   09B3 ED A0                   LDI                         ;                       ' 16+1  |
1038   09B5 E2 D4 09                JP      PO, .sec_part_d3    ;                       ' 10    | 27 (144)
1039   09B8 ED A0                   LDI                         ;                       ' 16+1  |
1040   09BA E2 DA 09                JP      PO, .sec_part_d4    ;                       ' 10    | 27 (171)
1041   09BD ED A0                   LDI                         ;                       ' 16+1  |
1042   09BF C3 E0 09                JP      .sec_part_d5        ;                       ' 10    | 27 (198)
1043   09C2             
1044   09C2             .sec_part_d0
1045   09C2                         wait27                      ; sync                  '       | (90)
1045   09C2 ED 4F       >            LD      R, A
1045   09C4 ED 4F       >            LD      R, A
1045   09C6 ED 4F       >            LD      R, A
1046   09C8             .sec_part_d1
1047   09C8                         wait27                      ; sync                  '       | (117)
1047   09C8 ED 4F       >            LD      R, A
1047   09CA ED 4F       >            LD      R, A
1047   09CC ED 4F       >            LD      R, A
1048   09CE             .sec_part_d2
1049   09CE                         wait27                      ; sync                  '       | (144)
1049   09CE ED 4F       >            LD      R, A
1049   09D0 ED 4F       >            LD      R, A
1049   09D2 ED 4F       >            LD      R, A
1050   09D4             .sec_part_d3
1051   09D4                         wait27                      ; sync                  '       | (171)
1051   09D4 ED 4F       >            LD      R, A
1051   09D6 ED 4F       >            LD      R, A
1051   09D8 ED 4F       >            LD      R, A
1052   09DA             .sec_part_d4
1053   09DA                         wait27                      ; sync                  '       | (198)
1053   09DA ED 4F       >            LD      R, A
1053   09DC ED 4F       >            LD      R, A
1053   09DE ED 4F       >            LD      R, A
1054   09E0             .sec_part_d5
1055   09E0                         wait35                      ; sync                  ' 35    |
1055   09E0 18 00       >            JR      .loop
1055   09E2 ED 4F       >            LD      R, A
1055   09E4 1A          >            LD      A, (DE)
1055   09E5 1A          >            LD      A, (DE)
1056   09E6 AF                      XOR     A                   ; A = 0                 ' 4     | 39 (237)
1057   09E7             
1058   09E7             end_prep_xgm                            ;                       ' 237
1059   09E7 12                      LD      (DE), A             ; XGM buf end with 0    ' 7     |
1060   09E8                         wait10                      ; sync                  ' 10    | 17 (254)
1060   09E8 C3 EB 09    >            JP      .loop
1061   09EB             
1062   09EB             
1063   09EB             ; free time + frame synchro
1064   09EB             ; -------------------------
1065   09EB             
1066   09EB             ; $B8+X
1067   09EB             loop_synchro
1068   09EB                         sampleOutput                ;                       ' 36    | (36)
1068   09EB D9          >            EXX                     ;                           ' 4     | 4
1068   09EC 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1068   09ED 03          >            INC     BC              ; increment read address    ' 6     |
1068   09EE CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1068   09F0 12          >            LD      (DE), A         ; play sample               ' 7     |
1068   09F1 D9          >            EXX                     ;                           ' 4     | (36)
1069   09F2             
1070   09F2                         wait156                     ; sync                  ' 156   | 192
1070   09F2 3E 09       >            LD      A, w            ; 7-2
1070   09F4 3D          >            DEC     A               ; 4
1070   09F5 20 FD       >            JR      NZ, .loop       ; 12
1070   09F7 C3 FA 09    >            JP      .loop
1071   09FA             
1072   09FA 3A 63 01                LD      A, (IDLE_LOOP)      ;                       ' 13    |
1073   09FD 3C                      INC     A                   ; increment idle loop   ' 4     | 30 (222)
1074   09FE 32 63 01                LD      (IDLE_LOOP), A      ;                       ' 13    |
1075   0A01             
1076   0A01 FD 7D                   LD      A, IYL              ; A = vint flag         ' 8     |
1077   0A03 B7                      OR      A                   ; vint happened ?       ' 4     | 22 (244)
1078   0A04 C2 0A 0A                JP      NZ, pre_exec_xgm    ; --> execute xgm       ' 10    |
1079   0A07             
1080   0A07 C3 EB 09                JP      loop_synchro        ; loop                  ' 10    | (254)
1081   0A0A             
1082   0A0A             pre_exec_xgm                            ;                       ' 244
1083   0A0A 11 00 17                LD      DE, XGM_BUFFER      ; DE point to XGM buf   ' 10    | (254)
1084   0A0D             
1085   0A0D             
1086   0A0D             ; execute XGM command
1087   0A0D             ; -------------------
1088   0A0D             
1089   0A0D             ; $B9+X
1090   0A0D             execute_xgm
1091   0A0D                         sampleOutput                ;                       ' 36    | (36)
1091   0A0D D9          >            EXX                     ;                           ' 4     | 4
1091   0A0E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1091   0A0F 03          >            INC     BC              ; increment read address    ' 6     |
1091   0A10 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1091   0A12 12          >            LD      (DE), A         ; play sample               ' 7     |
1091   0A13 D9          >            EXX                     ;                           ' 4     | (36)
1092   0A14             
1093   0A14 1A                      LD      A, (DE)             ; A = command           ' 7     |
1094   0A15 32 1A 0A                LD      (.ld_hl_xx + 1), A  ; set jump address      ' 13    |
1095   0A18 1C                      INC     E                   ; next command          ' 4     | 44 (80)
1096   0A19             .ld_hl_xx                               ;                       '       |
1097   0A19 2A 00 16                LD      HL, (JUMP_TABLE)    ; LD HL, (jt)           ' 16    |
1098   0A1C E9                      JP      (HL)                ;                       ' 4     |
1099   0A1D             
1100   0A1D             
1101   0A1D             ; next frame command
1102   0A1D             ; ------------------
1103   0A1D             
1104   0A1D             com_next_frame                          ; 00                    ' 80
1105   0A1D C3 95 11                JP      xgm_done            ; XGM frame done        ' 10    | (90)
1106   0A20             
1107   0A20             
1108   0A20             ; PSG command
1109   0A20             ; -----------
1110   0A20             
1111   0A20             com_psg_tone_w0                         ; 10                    ' 80
1112   0A20                         wait126                     ; sync                  ' 126   |
1112   0A20 3E 07       >            LD      A, w            ; 7-2
1112   0A22 3D          >            DEC     A               ; 4
1112   0A23 20 FD       >            JR      NZ, .loop       ; 12
1112   0A25 18 00       >            JR      .loop
1113   0A27 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 146 (226)
1114   0A2A C3 97 0A                JP      psg_tone_write0     ;                       ' 10    |
1115   0A2D             
1116   0A2D             com_psg_tone_w1                         ; 11                    ' 80
1117   0A2D                         wait108                     ; sync                  ' 108   |
1117   0A2D 3E 06       >            LD      A, w            ; 7-2
1117   0A2F 3D          >            DEC     A               ; 4
1117   0A30 20 FD       >            JR      NZ, .loop       ; 12
1117   0A32 C3 35 0A    >            JP      .loop
1118   0A35 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 128 (208)
1119   0A38 C3 94 0A                JP      psg_tone_write1     ;                       ' 10    |
1120   0A3B             
1121   0A3B             com_psg_tone_w2                         ; 12                    ' 80
1122   0A3B                         wait90                      ; sync                  ' 90    |
1122   0A3B 3E 05       >            LD      A, w            ; 7-2
1122   0A3D 3D          >            DEC     A               ; 4
1122   0A3E 20 FD       >            JR      NZ, .loop       ; 12
1122   0A40 00          >            NOP
1122   0A41 00          >            NOP
1123   0A42 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 110 (190)
1124   0A45 C3 91 0A                JP      psg_tone_write2     ;                       ' 10    |
1125   0A48             
1126   0A48             com_psg_tone_w3                         ; 13                    ' 80
1127   0A48                         wait72                      ; sync                  ' 72    |
1127   0A48 3E 03       >            LD      A, w            ; 7-2
1127   0A4A 3D          >            DEC     A               ; 4
1127   0A4B 20 FD       >            JR      NZ, .loop       ; 12
1127   0A4D ED 4F       >            LD      R, A
1127   0A4F ED 4F       >            LD      R, A
1127   0A51 00          >            NOP
1128   0A52 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 92 (172)
1129   0A55 C3 8E 0A                JP      psg_tone_write3     ;                       ' 10    |
1130   0A58             
1131   0A58             com_psg_tone_w4                         ; 14                    ' 80
1132   0A58                         wait54                      ; sync                  ' 54    |
1132   0A58 3E 03       >            LD      A, w            ; 7-2
1132   0A5A 3D          >            DEC     A               ; 4
1132   0A5B 20 FD       >            JR      NZ, .loop       ; 12
1132   0A5D 00          >            NOP
1133   0A5E 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 74 (154)
1134   0A61 C3 8B 0A                JP      psg_tone_write4     ;                       ' 10    |
1135   0A64             
1136   0A64             com_psg_tone_w5                         ; 15                    ' 80
1137   0A64                         wait36                      ; sync                  ' 36    |
1137   0A64 ED 4F       >            LD      R, A
1137   0A66 ED 4F       >            LD      R, A
1137   0A68 ED 4F       >            LD      R, A
1137   0A6A ED 4F       >            LD      R, A
1138   0A6C 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 56 (136)
1139   0A6F C3 88 0A                JP      psg_tone_write5     ;                       ' 10    |
1140   0A72             
1141   0A72             com_psg_tone_w6                         ; 16                    ' 80
1142   0A72                         wait18                      ; sync                  ' 18    |
1142   0A72 ED 4F       >            LD      R, A
1142   0A74 ED 4F       >            LD      R, A
1143   0A76 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 38 (118)
1144   0A79 C3 85 0A                JP      psg_tone_write6     ;                       ' 10    |
1145   0A7C             
1146   0A7C             com_psg_tone_w7                         ; 17                    ' 80
1147   0A7C 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 20 (100)
1148   0A7F C3 82 0A                JP      psg_tone_write7     ;                       ' 10    |
1149   0A82             
1150   0A82             
1151   0A82             psg_tone_write7                         ;                       ' 100
1152   0A82 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1153   0A83 1C                      INC     E                   ; next data             ' 4     | 18 (118)
1154   0A84 77                      LD      (HL), A             ; write to PSG          ' 7     |
1155   0A85             
1156   0A85             psg_tone_write6
1157   0A85 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1158   0A86 1C                      INC     E                   ; next data             ' 4     | 18 (136)
1159   0A87 77                      LD      (HL), A             ; write to PSG          ' 7     |
1160   0A88             
1161   0A88             psg_tone_write5
1162   0A88 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1163   0A89 1C                      INC     E                   ; next data             ' 4     | 18 (154)
1164   0A8A 77                      LD      (HL), A             ; write to PSG          ' 7     |
1165   0A8B             
1166   0A8B             psg_tone_write4
1167   0A8B 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1168   0A8C 1C                      INC     E                   ; next data             ' 4     | 18 (172)
1169   0A8D 77                      LD      (HL), A             ; write to PSG          ' 7     |
1170   0A8E             
1171   0A8E             psg_tone_write3
1172   0A8E 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1173   0A8F 1C                      INC     E                   ; next data             ' 4     | 18 (190)
1174   0A90 77                      LD      (HL), A             ; write to PSG          ' 7     |
1175   0A91             
1176   0A91             psg_tone_write2
1177   0A91 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1178   0A92 1C                      INC     E                   ; next data             ' 4     | 18 (208)
1179   0A93 77                      LD      (HL), A             ; write to PSG          ' 7     |
1180   0A94             
1181   0A94             psg_tone_write1
1182   0A94 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1183   0A95 1C                      INC     E                   ; next data             ' 4     | 18 (226)
1184   0A96 77                      LD      (HL), A             ; write to PSG          ' 7     |
1185   0A97             
1186   0A97             psg_tone_write0
1187   0A97 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1188   0A98 1C                      INC     E                   ; next data             ' 4     | 18 (244)
1189   0A99 77                      LD      (HL), A             ; write to PSG          ' 7     |
1190   0A9A             
1191   0A9A C3 0D 0A                JP      execute_xgm         ;                       ' 10    | (254)
1192   0A9D             
1193   0A9D             
1194   0A9D             com_psg_env_w0                          ; 18                    ' 80
1195   0A9D                         wait72                      ; sync                  ' 72    |
1195   0A9D 3E 03       >            LD      A, w            ; 7-2
1195   0A9F 3D          >            DEC     A               ; 4
1195   0AA0 20 FD       >            JR      NZ, .loop       ; 12
1195   0AA2 ED 4F       >            LD      R, A
1195   0AA4 ED 4F       >            LD      R, A
1195   0AA6 00          >            NOP
1196   0AA7 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 102 (182)
1197   0AAA 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1198   0AAD C3 11 0B                JP      psg_env_write0      ;                       ' 10    |
1199   0AB0             
1200   0AB0             com_psg_env_w1                          ; 18                    ' 80
1201   0AB0                         wait10                      ; sync                  ' 10    |
1201   0AB0 C3 B3 0A    >            JP      .loop
1202   0AB3 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 40 (120)
1203   0AB6 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1204   0AB9 C3 04 0B                JP      psg_env_write1      ;                       ' 10    |
1205   0ABC             
1206   0ABC             com_psg_env_w2                          ; 18                    ' 80
1207   0ABC                         wait154                     ; sync                  ' 154   |
1207   0ABC 3E 09       >            LD      A, w            ; 7-2
1207   0ABE 3D          >            DEC     A               ; 4
1207   0ABF 20 FD       >            JR      NZ, .loop       ; 12
1207   0AC1 00          >            NOP
1207   0AC2 00          >            NOP
1208   0AC3 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 174 (254)
1209   0AC6 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1210   0AC9             
1211   0AC9                         sampleOutput                ;                       ' 36    | (36)
1211   0AC9 D9          >            EXX                     ;                           ' 4     | 4
1211   0ACA 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1211   0ACB 03          >            INC     BC              ; increment read address    ' 6     |
1211   0ACC CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1211   0ACE 12          >            LD      (DE), A         ; play sample               ' 7     |
1211   0ACF D9          >            EXX                     ;                           ' 4     | (36)
1212   0AD0             
1213   0AD0                         wait12                      ; sync                  ' 12    |
1213   0AD0 18 00       >            JR      .loop
1214   0AD2 C3 F7 0A                JP      psg_env_write2      ;                       ' 10    | 22 (58)
1215   0AD5             
1216   0AD5             com_psg_env_w3                          ; 18                    ' 80
1217   0AD5                         wait110                     ; sync                  ' 110   |
1217   0AD5 3E 06       >            LD      A, w            ; 7-2
1217   0AD7 3D          >            DEC     A               ; 4
1217   0AD8 20 FD       >            JR      NZ, .loop       ; 12
1217   0ADA 18 00       >            JR      .loop
1218   0ADC 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 130 (210)
1219   0ADF 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1220   0AE2             
1221   0AE2             psg_env_write3
1222   0AE2 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1223   0AE3 07                      RLCA                        ;                       ' 4     |
1224   0AE4 07                      RLCA                        ;                       ' 4     |
1225   0AE5 07                      RLCA                        ;                       ' 4     |
1226   0AE6 E6 03                   AND     $3                  ; A = channel number    ' 7     | 41 (254-3)
1227   0AE8 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     |
1228   0AEA 4F                      LD      C, A                ; BC point on save      ' 4     |
1229   0AEB                         wait4                       ; sync                  ' 4     |
1229   0AEB 00          >            NOP
1230   0AEC             
1231   0AEC                         sampleOutput                ;                       ' 36    | (36-3)
1231   0AEC D9          >            EXX                     ;                           ' 4     | 4
1231   0AED 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1231   0AEE 03          >            INC     BC              ; increment read address    ' 6     |
1231   0AEF CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1231   0AF1 12          >            LD      (DE), A         ; play sample               ' 7     |
1231   0AF2 D9          >            EXX                     ;                           ' 4     | (36)
1232   0AF3             
1233   0AF3 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1234   0AF4 1C                      INC     E                   ; next data             ' 4     | 25 (58)
1235   0AF5 77                      LD      (HL), A             ; write to PSG          ' 7     |
1236   0AF6 02                      LD      (BC), A             ; write to save         ' 7     |
1237   0AF7             
1238   0AF7             psg_env_write2                          ;                       ' 58
1239   0AF7 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1240   0AF8 07                      RLCA                        ;                       ' 4     |
1241   0AF9 07                      RLCA                        ;                       ' 4     |
1242   0AFA 07                      RLCA                        ;                       ' 4     |
1243   0AFB E6 03                   AND     $3                  ; A = channel number    ' 7     |
1244   0AFD C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (120)
1245   0AFF 4F                      LD      C, A                ; BC point on save      ' 4     |
1246   0B00 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1247   0B01 1C                      INC     E                   ; next data             ' 4     |
1248   0B02 77                      LD      (HL), A             ; write to PSG          ' 7     |
1249   0B03 02                      LD      (BC), A             ; write to save         ' 7     |
1250   0B04             
1251   0B04             psg_env_write1
1252   0B04 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1253   0B05 07                      RLCA                        ;                       ' 4     |
1254   0B06 07                      RLCA                        ;                       ' 4     |
1255   0B07 07                      RLCA                        ;                       ' 4     |
1256   0B08 E6 03                   AND     $3                  ; A = channel number    ' 7     |
1257   0B0A C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (182)
1258   0B0C 4F                      LD      C, A                ; BC point on save      ' 4     |
1259   0B0D 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1260   0B0E 1C                      INC     E                   ; next data             ' 4     |
1261   0B0F 77                      LD      (HL), A             ; write to PSG          ' 7     |
1262   0B10 02                      LD      (BC), A             ; write to save         ' 7     |
1263   0B11             
1264   0B11             psg_env_write0
1265   0B11 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1266   0B12 07                      RLCA                        ;                       ' 4     |
1267   0B13 07                      RLCA                        ;                       ' 4     |
1268   0B14 07                      RLCA                        ;                       ' 4     |
1269   0B15 E6 03                   AND     $3                  ; A = channel number    ' 7     |
1270   0B17 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (244)
1271   0B19 4F                      LD      C, A                ; BC point on save      ' 4     |
1272   0B1A 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1273   0B1B 1C                      INC     E                   ; next data             ' 4     |
1274   0B1C 77                      LD      (HL), A             ; write to PSG          ' 7     |
1275   0B1D 02                      LD      (BC), A             ; write to save         ' 7     |
1276   0B1E             
1277   0B1E C3 0D 0A                JP      execute_xgm         ;                       ' 10    | (254)
1278   0B21             
1279   0B21             
1280   0B21             ; YM port0 command
1281   0B21             ; ----------------
1282   0B21             
1283   0B21             com_ym_port0_w0                         ; 20                    ' 80
1284   0B21                         wait36                      ; sync                  ' 36    |
1284   0B21 ED 4F       >            LD      R, A
1284   0B23 ED 4F       >            LD      R, A
1284   0B25 ED 4F       >            LD      R, A
1284   0B27 ED 4F       >            LD      R, A
1285   0B29 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 66 (146)
1286   0B2C 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1287   0B2F C3 0B 0D                JP      ym_port_write0      ;                       ' 10    |
1288   0B32             
1289   0B32             com_ym_port0_w1                         ; 21                    ' 80
1290   0B32 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1291   0B35 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 30 (110)
1292   0B38 C3 05 0D                JP      ym_port_write1      ;                       ' 10    |
1293   0B3B             
1294   0B3B             com_ym_port0_w2                         ; 22                    ' 80
1295   0B3B                         wait52                      ; sync                  ' 52    |
1295   0B3B 3E 02       >            LD      A, w            ; 7-2
1295   0B3D 3D          >            DEC     A               ; 4
1295   0B3E 20 FD       >            JR      NZ, .loop       ; 12
1295   0B40 ED 4F       >            LD      R, A
1295   0B42 ED 4F       >            LD      R, A
1296   0B44 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1297   0B47 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1298   0B4A C3 F0 0D                JP      ym_port_write2      ;                       ' 10    |
1299   0B4D             
1300   0B4D             com_ym_port0_w3                         ; 23                    ' 80
1301   0B4D 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1302   0B50 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1303   0B52 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1304   0B53 C3 E1 0C                JP      com_ym_port_w3      ; execute               ' 10    |
1305   0B56             
1306   0B56             com_ym_port0_w4                         ; 24                    ' 80
1307   0B56                         wait144                     ; sync                  ' 144   |
1307   0B56 3E 08       >            LD      A, w            ; 7-2
1307   0B58 3D          >            DEC     A               ; 4
1307   0B59 20 FD       >            JR      NZ, .loop       ; 12
1307   0B5B 1A          >            LD      A, (DE)
1307   0B5C 1A          >            LD      A, (DE)
1308   0B5D 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1309   0B60 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1310   0B63 C3 D1 0D                JP      ym_port_write4      ;                       ' 10    |
1311   0B66             
1312   0B66             com_ym_port0_w5                         ; 25                    ' 80
1313   0B66                         wait52                      ; sync                  ' 52    |
1313   0B66 3E 02       >            LD      A, w            ; 7-2
1313   0B68 3D          >            DEC     A               ; 4
1313   0B69 20 FD       >            JR      NZ, .loop       ; 12
1313   0B6B ED 4F       >            LD      R, A
1313   0B6D ED 4F       >            LD      R, A
1314   0B6F 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1315   0B72 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1316   0B75 C3 BF 0D                JP      ym_port_write5      ;                       ' 10    |
1317   0B78             
1318   0B78             com_ym_port0_w6                         ; 26                    ' 80
1319   0B78 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1320   0B7B 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1321   0B7D 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1322   0B7E C3 EA 0C                JP      com_ym_port_w6      ; execute               ' 10    |
1323   0B81             
1324   0B81             com_ym_port0_w7                         ; 27                    ' 80
1325   0B81                         wait144                     ; sync                  ' 144   |
1325   0B81 3E 08       >            LD      A, w            ; 7-2
1325   0B83 3D          >            DEC     A               ; 4
1325   0B84 20 FD       >            JR      NZ, .loop       ; 12
1325   0B86 1A          >            LD      A, (DE)
1325   0B87 1A          >            LD      A, (DE)
1326   0B88 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1327   0B8B 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1328   0B8E C3 A0 0D                JP      ym_port_write7      ;                       ' 10    |
1329   0B91             
1330   0B91             com_ym_port0_w8                         ; 28                    ' 80
1331   0B91                         wait52                      ; sync                  ' 52    |
1331   0B91 3E 02       >            LD      A, w            ; 7-2
1331   0B93 3D          >            DEC     A               ; 4
1331   0B94 20 FD       >            JR      NZ, .loop       ; 12
1331   0B96 ED 4F       >            LD      R, A
1331   0B98 ED 4F       >            LD      R, A
1332   0B9A 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1333   0B9D 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1334   0BA0 C3 8E 0D                JP      ym_port_write8      ;                       ' 10    |
1335   0BA3             
1336   0BA3             com_ym_port0_w9                         ; 29                    ' 80
1337   0BA3 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1338   0BA6 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1339   0BA8 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1340   0BA9 C3 F3 0C                JP      com_ym_port_w9      ; execute               ' 10    |
1341   0BAC             
1342   0BAC             com_ym_port0_wA                         ; 2A                    ' 80
1343   0BAC                         wait144                     ; sync                  ' 144   |
1343   0BAC 3E 08       >            LD      A, w            ; 7-2
1343   0BAE 3D          >            DEC     A               ; 4
1343   0BAF 20 FD       >            JR      NZ, .loop       ; 12
1343   0BB1 1A          >            LD      A, (DE)
1343   0BB2 1A          >            LD      A, (DE)
1344   0BB3 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1345   0BB6 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1346   0BB9 C3 6F 0D                JP      ym_port_writeA      ;                       ' 10    |
1347   0BBC             
1348   0BBC             com_ym_port0_wB                         ; 2B                    ' 80
1349   0BBC                         wait52                      ; sync                  ' 52    |
1349   0BBC 3E 02       >            LD      A, w            ; 7-2
1349   0BBE 3D          >            DEC     A               ; 4
1349   0BBF 20 FD       >            JR      NZ, .loop       ; 12
1349   0BC1 ED 4F       >            LD      R, A
1349   0BC3 ED 4F       >            LD      R, A
1350   0BC5 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1351   0BC8 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1352   0BCB C3 5D 0D                JP      ym_port_writeB      ;                       ' 10    |
1353   0BCE             
1354   0BCE             com_ym_port0_wC                         ; 2C                    ' 80
1355   0BCE 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1356   0BD1 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1357   0BD3 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1358   0BD4 C3 FC 0C                JP      com_ym_port_wC      ; execute               ' 10    |
1359   0BD7             
1360   0BD7             com_ym_port0_wD                         ; 2D                    ' 80
1361   0BD7                         wait144                     ; sync                  ' 144   |
1361   0BD7 3E 08       >            LD      A, w            ; 7-2
1361   0BD9 3D          >            DEC     A               ; 4
1361   0BDA 20 FD       >            JR      NZ, .loop       ; 12
1361   0BDC 1A          >            LD      A, (DE)
1361   0BDD 1A          >            LD      A, (DE)
1362   0BDE 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1363   0BE1 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1364   0BE4 C3 3E 0D                JP      ym_port_writeD      ;                       ' 10    |
1365   0BE7             
1366   0BE7             com_ym_port0_wE                         ; 2E                    ' 80
1367   0BE7                         wait36                      ; sync                  ' 36    |
1367   0BE7 ED 4F       >            LD      R, A
1367   0BE9 ED 4F       >            LD      R, A
1367   0BEB ED 4F       >            LD      R, A
1367   0BED ED 4F       >            LD      R, A
1368   0BEF 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 66 (146)
1369   0BF2 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1370   0BF5 C3 29 0D                JP      ym_port_writeE      ;                       ' 10    |
1371   0BF8             
1372   0BF8             com_ym_port0_wF                         ; 2F                    ' 80
1373   0BF8 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1374   0BFB 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 30 (110)
1375   0BFE C3 23 0D                JP      ym_port_writeF      ;                       ' 10    |
1376   0C01             
1377   0C01             
1378   0C01             ; YM port2 command
1379   0C01             ; ----------------
1380   0C01             
1381   0C01             com_ym_port2_w0                         ; 30                    ' 80
1382   0C01                         wait36                      ; sync                  ' 36    |
1382   0C01 ED 4F       >            LD      R, A
1382   0C03 ED 4F       >            LD      R, A
1382   0C05 ED 4F       >            LD      R, A
1382   0C07 ED 4F       >            LD      R, A
1383   0C09 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 66 (146)
1384   0C0C 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1385   0C0F C3 0B 0D                JP      ym_port_write0      ;                       ' 10    |
1386   0C12             
1387   0C12             com_ym_port2_w1                         ; 31                    ' 80
1388   0C12 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1389   0C15 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    | 30 (110)
1390   0C18 C3 05 0D                JP      ym_port_write1      ;                       ' 10    |
1391   0C1B             
1392   0C1B             com_ym_port2_w2                         ; 32                    ' 80
1393   0C1B                         wait52                      ; sync                  ' 52    |
1393   0C1B 3E 02       >            LD      A, w            ; 7-2
1393   0C1D 3D          >            DEC     A               ; 4
1393   0C1E 20 FD       >            JR      NZ, .loop       ; 12
1393   0C20 ED 4F       >            LD      R, A
1393   0C22 ED 4F       >            LD      R, A
1394   0C24 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1395   0C27 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1396   0C2A C3 F0 0D                JP      ym_port_write2      ;                       ' 10    |
1397   0C2D             
1398   0C2D             com_ym_port2_w3                         ; 33                    ' 80
1399   0C2D 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1400   0C30 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1401   0C32 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1402   0C33 C3 E1 0C                JP      com_ym_port_w3      ; execute               ' 10    |
1403   0C36             
1404   0C36             com_ym_port2_w4                         ; 34                    ' 80
1405   0C36                         wait144                     ; sync                  ' 144   |
1405   0C36 3E 08       >            LD      A, w            ; 7-2
1405   0C38 3D          >            DEC     A               ; 4
1405   0C39 20 FD       >            JR      NZ, .loop       ; 12
1405   0C3B 1A          >            LD      A, (DE)
1405   0C3C 1A          >            LD      A, (DE)
1406   0C3D 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 174 (254)
1407   0C40 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1408   0C43 C3 D1 0D                JP      ym_port_write4      ;                       ' 10    |
1409   0C46             
1410   0C46             com_ym_port2_w5                         ; 35                    ' 80
1411   0C46                         wait52                      ; sync                  ' 52    |
1411   0C46 3E 02       >            LD      A, w            ; 7-2
1411   0C48 3D          >            DEC     A               ; 4
1411   0C49 20 FD       >            JR      NZ, .loop       ; 12
1411   0C4B ED 4F       >            LD      R, A
1411   0C4D ED 4F       >            LD      R, A
1412   0C4F 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1413   0C52 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1414   0C55 C3 BF 0D                JP      ym_port_write5      ;                       ' 10    |
1415   0C58             
1416   0C58             com_ym_port2_w6                         ; 36                    ' 80
1417   0C58 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1418   0C5B 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1419   0C5D 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1420   0C5E C3 EA 0C                JP      com_ym_port_w6      ; execute               ' 10    |
1421   0C61             
1422   0C61             com_ym_port2_w7                         ; 37                    ' 80
1423   0C61                         wait144                     ; sync                  ' 144   |
1423   0C61 3E 08       >            LD      A, w            ; 7-2
1423   0C63 3D          >            DEC     A               ; 4
1423   0C64 20 FD       >            JR      NZ, .loop       ; 12
1423   0C66 1A          >            LD      A, (DE)
1423   0C67 1A          >            LD      A, (DE)
1424   0C68 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 174 (254)
1425   0C6B 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1426   0C6E C3 A0 0D                JP      ym_port_write7      ;                       ' 10    |
1427   0C71             
1428   0C71             com_ym_port2_w8                         ; 38                    ' 80
1429   0C71                         wait52                      ; sync                  ' 52    |
1429   0C71 3E 02       >            LD      A, w            ; 7-2
1429   0C73 3D          >            DEC     A               ; 4
1429   0C74 20 FD       >            JR      NZ, .loop       ; 12
1429   0C76 ED 4F       >            LD      R, A
1429   0C78 ED 4F       >            LD      R, A
1430   0C7A 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1431   0C7D 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1432   0C80 C3 8E 0D                JP      ym_port_write8      ;                       ' 10    |
1433   0C83             
1434   0C83             com_ym_port2_w9                         ; 39                    ' 80
1435   0C83 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1436   0C86 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1437   0C88 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1438   0C89 C3 F3 0C                JP      com_ym_port_w9      ; execute               ' 10    |
1439   0C8C             
1440   0C8C             com_ym_port2_wA                         ; 3A                    ' 80
1441   0C8C                         wait144                     ; sync                  ' 144   |
1441   0C8C 3E 08       >            LD      A, w            ; 7-2
1441   0C8E 3D          >            DEC     A               ; 4
1441   0C8F 20 FD       >            JR      NZ, .loop       ; 12
1441   0C91 1A          >            LD      A, (DE)
1441   0C92 1A          >            LD      A, (DE)
1442   0C93 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 174 (254)
1443   0C96 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1444   0C99 C3 6F 0D                JP      ym_port_writeA      ;                       ' 10    |
1445   0C9C             
1446   0C9C             com_ym_port2_wB                         ; 3B                    ' 80
1447   0C9C                         wait52                      ; sync                  ' 52    |
1447   0C9C 3E 02       >            LD      A, w            ; 7-2
1447   0C9E 3D          >            DEC     A               ; 4
1447   0C9F 20 FD       >            JR      NZ, .loop       ; 12
1447   0CA1 ED 4F       >            LD      R, A
1447   0CA3 ED 4F       >            LD      R, A
1448   0CA5 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1449   0CA8 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1450   0CAB C3 5D 0D                JP      ym_port_writeB      ;                       ' 10    |
1451   0CAE             
1452   0CAE             com_ym_port2_wC                         ; 3C                    ' 80
1453   0CAE 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1454   0CB1 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1455   0CB3 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1456   0CB4 C3 FC 0C                JP      com_ym_port_wC      ; execute               ' 10    |
1457   0CB7             
1458   0CB7             com_ym_port2_wD                         ; 3D                    ' 80
1459   0CB7                         wait144                     ; sync                  ' 144   |
1459   0CB7 3E 08       >            LD      A, w            ; 7-2
1459   0CB9 3D          >            DEC     A               ; 4
1459   0CBA 20 FD       >            JR      NZ, .loop       ; 12
1459   0CBC 1A          >            LD      A, (DE)
1459   0CBD 1A          >            LD      A, (DE)
1460   0CBE 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 174 (254)
1461   0CC1 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1462   0CC4 C3 3E 0D                JP      ym_port_writeD      ;                       ' 10    |
1463   0CC7             
1464   0CC7             com_ym_port2_wE                         ; 3E                    ' 80
1465   0CC7                         wait36                      ; sync                  ' 36    |
1465   0CC7 ED 4F       >            LD      R, A
1465   0CC9 ED 4F       >            LD      R, A
1465   0CCB ED 4F       >            LD      R, A
1465   0CCD ED 4F       >            LD      R, A
1466   0CCF 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 66 (146)
1467   0CD2 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1468   0CD5 C3 29 0D                JP      ym_port_writeE      ;                       ' 10    |
1469   0CD8             
1470   0CD8             com_ym_port2_wF                         ; 3F                    ' 80
1471   0CD8 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1472   0CDB 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    | 30 (110)
1473   0CDE C3 23 0D                JP      ym_port_writeF      ;                       ' 10    |
1474   0CE1             
1475   0CE1             
1476   0CE1             com_ym_port_w3                          ;                       ' 116
1477   0CE1 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1478   0CE2 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1479   0CE3 1C                      INC     E                   ; next data             ' 4     |
1480   0CE4 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1481   0CE5 1C                      INC     E                   ; next data             ' 4     |
1482   0CE6 02                      LD      (BC), A             ; write data to YM      ' 7     |
1483   0CE7 C3 F0 0D                JP      ym_port_write2      ;                       ' 10    | (162)
1484   0CEA             
1485   0CEA             com_ym_port_w6                          ;                       ' 116
1486   0CEA 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1487   0CEB 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1488   0CEC 1C                      INC     E                   ; next data             ' 4     |
1489   0CED 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1490   0CEE 1C                      INC     E                   ; next data             ' 4     |
1491   0CEF 02                      LD      (BC), A             ; write data to YM      ' 7     |
1492   0CF0 C3 BF 0D                JP      ym_port_write5      ;                       ' 10    | (162)
1493   0CF3             
1494   0CF3             com_ym_port_w9                          ;                       ' 116
1495   0CF3 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1496   0CF4 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1497   0CF5 1C                      INC     E                   ; next data             ' 4     |
1498   0CF6 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1499   0CF7 1C                      INC     E                   ; next data             ' 4     |
1500   0CF8 02                      LD      (BC), A             ; write data to YM      ' 7     |
1501   0CF9 C3 8E 0D                JP      ym_port_write8      ;                       ' 10    | (162)
1502   0CFC             
1503   0CFC             com_ym_port_wC                          ;                       ' 116
1504   0CFC 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1505   0CFD 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1506   0CFE 1C                      INC     E                   ; next data             ' 4     |
1507   0CFF 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1508   0D00 1C                      INC     E                   ; next data             ' 4     |
1509   0D01 02                      LD      (BC), A             ; write data to YM      ' 7     |
1510   0D02 C3 5D 0D                JP      ym_port_writeB      ;                       ' 10    | (162)
1511   0D05             
1512   0D05             
1513   0D05             ym_port_write1                          ;                       ' 110
1514   0D05 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1515   0D06 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1516   0D07 1C                      INC     E                   ; next data             ' 4     |
1517   0D08 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (146)
1518   0D09 1C                      INC     E                   ; next data             ' 4     |
1519   0D0A 02                      LD      (BC), A             ; write data to YM      ' 7     |
1520   0D0B             
1521   0D0B             ym_port_write0
1522   0D0B 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1523   0D0C                         waitYMReady                 ; wait YM to be ready   ' 22    |
1523   0D0C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1523   0D0E C2 0C 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1524   0D11 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (204)
1525   0D12 1C                      INC     E                   ; next data             ' 4     |
1526   0D13 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1527   0D14 1C                      INC     E                   ; next data             ' 4     |
1528   0D15 02                      LD      (BC), A             ; write to YM           ' 7     |
1529   0D16             
1530   0D16 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1531   0D19                         waitYMReady                 ; wait YM to be ready   ' 22    | 42 (246)
1531   0D19 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1531   0D1B C2 19 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1532   0D1E 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1533   0D20             
1534   0D20 C3 0D 0A                JP      execute_xgm         ; +2 cycles here        ' 10    | (254+2)
1535   0D23             
1536   0D23             ym_port_writeF                          ;                       ' 110
1537   0D23 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1538   0D24 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1539   0D25 1C                      INC     E                   ; next data             ' 4     |
1540   0D26 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (146)
1541   0D27 1C                      INC     E                   ; next data             ' 4     |
1542   0D28 02                      LD      (BC), A             ; write data to YM      ' 7     |
1543   0D29             
1544   0D29             ym_port_writeE
1545   0D29 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1546   0D2A                         waitYMReady                 ; wait YM to be ready   ' 22    |
1546   0D2A CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1546   0D2C C2 2A 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1547   0D2F 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (204)
1548   0D30 1C                      INC     E                   ; next data             ' 4     |
1549   0D31 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1550   0D32 1C                      INC     E                   ; next data             ' 4     |
1551   0D33 02                      LD      (BC), A             ; write to YM           ' 7     |
1552   0D34             
1553   0D34                         wait28                      ; sync                  ' 28    |
1553   0D34 18 00       >            JR      .loop
1553   0D36 ED 4F       >            LD      R, A
1553   0D38 1A          >            LD      A, (DE)
1554   0D39                         waitYMReady                 ; wait YM to be ready   ' 22    | 50 (254)
1554   0D39 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1554   0D3B C2 39 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1555   0D3E             
1556   0D3E             ym_port_writeD
1557   0D3E                         sampleOutputSafe            ;                       ' 46    | (46)
1557   0D3E D9          >            EXX                     ;                           ' 4     | 4
1557   0D3F 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1557   0D41 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1557   0D42 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1557   0D43 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1557   0D45 12          >            LD      (DE), A         ; play sample               ' 7     |
1557   0D46 D9          >            EXX                     ;                           ' 4     | (46)
1558   0D47             
1559   0D47 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1560   0D48                         waitYMReady                 ; wait YM to be ready   ' 22    |
1560   0D48 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1560   0D4A C2 48 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1561   0D4D 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (104)
1562   0D4E 1C                      INC     E                   ; next data             ' 4     |
1563   0D4F 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1564   0D50 1C                      INC     E                   ; next data             ' 4     |
1565   0D51 02                      LD      (BC), A             ; write to YM           ' 7     |
1566   0D52             
1567   0D52             ;ym_port_writeC
1568   0D52 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1569   0D53                         waitYMReady                 ; wait YM to be ready   ' 22    |
1569   0D53 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1569   0D55 C2 53 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1570   0D58 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (162)
1571   0D59 1C                      INC     E                   ; next data             ' 4     |
1572   0D5A 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1573   0D5B 1C                      INC     E                   ; next data             ' 4     |
1574   0D5C 02                      LD      (BC), A             ; write to YM           ' 7     |
1575   0D5D             
1576   0D5D             ym_port_writeB
1577   0D5D 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1578   0D5E                         waitYMReady                 ; wait YM to be ready   ' 22    |
1578   0D5E CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1578   0D60 C2 5E 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1579   0D63 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (220)
1580   0D64 1C                      INC     E                   ; next data             ' 4     |
1581   0D65 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1582   0D66 1C                      INC     E                   ; next data             ' 4     |
1583   0D67 02                      LD      (BC), A             ; write to YM           ' 7     |
1584   0D68             
1585   0D68                         wait12                      ; sync                  ' 12    |
1585   0D68 18 00       >            JR      .loop
1586   0D6A                         waitYMReady                 ; wait YM to be ready   ' 22    | 34 (254)
1586   0D6A CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1586   0D6C C2 6A 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1587   0D6F             
1588   0D6F             ym_port_writeA
1589   0D6F                         sampleOutputSafe            ;                       ' 46    | (46)
1589   0D6F D9          >            EXX                     ;                           ' 4     | 4
1589   0D70 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1589   0D72 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1589   0D73 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1589   0D74 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1589   0D76 12          >            LD      (DE), A         ; play sample               ' 7     |
1589   0D77 D9          >            EXX                     ;                           ' 4     | (46)
1590   0D78             
1591   0D78 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1592   0D79                         waitYMReady                 ; wait YM to be ready   ' 22    |
1592   0D79 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1592   0D7B C2 79 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1593   0D7E 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (104)
1594   0D7F 1C                      INC     E                   ; next data             ' 4     |
1595   0D80 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1596   0D81 1C                      INC     E                   ; next data             ' 4     |
1597   0D82 02                      LD      (BC), A             ; write to YM           ' 7     |
1598   0D83             
1599   0D83             ;ym_port_write9
1600   0D83 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1601   0D84                         waitYMReady                 ; wait YM to be ready   ' 22    |
1601   0D84 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1601   0D86 C2 84 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1602   0D89 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (162)
1603   0D8A 1C                      INC     E                   ; next data             ' 4     |
1604   0D8B 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1605   0D8C 1C                      INC     E                   ; next data             ' 4     |
1606   0D8D 02                      LD      (BC), A             ; write to YM           ' 7     |
1607   0D8E             
1608   0D8E             ym_port_write8
1609   0D8E 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1610   0D8F                         waitYMReady                 ; wait YM to be ready   ' 22    |
1610   0D8F CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1610   0D91 C2 8F 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1611   0D94 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (220)
1612   0D95 1C                      INC     E                   ; next data             ' 4     |
1613   0D96 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1614   0D97 1C                      INC     E                   ; next data             ' 4     |
1615   0D98 02                      LD      (BC), A             ; write to YM           ' 7     |
1616   0D99             
1617   0D99                         wait12                      ; sync                  ' 12    |
1617   0D99 18 00       >            JR      .loop
1618   0D9B                         waitYMReady                 ; wait YM to be ready   ' 22    | 34 (254)
1618   0D9B CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1618   0D9D C2 9B 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1619   0DA0             
1620   0DA0             ym_port_write7
1621   0DA0                         sampleOutputSafe            ;                       ' 46    | (46)
1621   0DA0 D9          >            EXX                     ;                           ' 4     | 4
1621   0DA1 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1621   0DA3 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1621   0DA4 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1621   0DA5 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1621   0DA7 12          >            LD      (DE), A         ; play sample               ' 7     |
1621   0DA8 D9          >            EXX                     ;                           ' 4     | (46)
1622   0DA9             
1623   0DA9 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1624   0DAA                         waitYMReady                 ; wait YM to be ready   ' 22    |
1624   0DAA CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1624   0DAC C2 AA 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1625   0DAF 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (104)
1626   0DB0 1C                      INC     E                   ; next data             ' 4     |
1627   0DB1 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1628   0DB2 1C                      INC     E                   ; next data             ' 4     |
1629   0DB3 02                      LD      (BC), A             ; write to YM           ' 7     |
1630   0DB4             
1631   0DB4             ;ym_port_write6
1632   0DB4 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1633   0DB5                         waitYMReady                 ; wait YM to be ready   ' 22    |
1633   0DB5 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1633   0DB7 C2 B5 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1634   0DBA 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (162)
1635   0DBB 1C                      INC     E                   ; next data             ' 4     |
1636   0DBC 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1637   0DBD 1C                      INC     E                   ; next data             ' 4     |
1638   0DBE 02                      LD      (BC), A             ; write to YM           ' 7     |
1639   0DBF             
1640   0DBF             ym_port_write5
1641   0DBF 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1642   0DC0                         waitYMReady                 ; wait YM to be ready   ' 22    |
1642   0DC0 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1642   0DC2 C2 C0 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1643   0DC5 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (220)
1644   0DC6 1C                      INC     E                   ; next data             ' 4     |
1645   0DC7 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1646   0DC8 1C                      INC     E                   ; next data             ' 4     |
1647   0DC9 02                      LD      (BC), A             ; write to YM           ' 7     |
1648   0DCA             
1649   0DCA                         wait12                      ; sync                  ' 12    |
1649   0DCA 18 00       >            JR      .loop
1650   0DCC                         waitYMReady                 ; wait YM to be ready   ' 22    | 34 (254)
1650   0DCC CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1650   0DCE C2 CC 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1651   0DD1             
1652   0DD1             ym_port_write4
1653   0DD1                         sampleOutputSafe            ;                       ' 46    | (46)
1653   0DD1 D9          >            EXX                     ;                           ' 4     | 4
1653   0DD2 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1653   0DD4 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1653   0DD5 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1653   0DD6 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1653   0DD8 12          >            LD      (DE), A         ; play sample               ' 7     |
1653   0DD9 D9          >            EXX                     ;                           ' 4     | (46)
1654   0DDA             
1655   0DDA 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1656   0DDB                         waitYMReady                 ; wait YM to be ready   ' 22    |
1656   0DDB CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1656   0DDD C2 DB 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1657   0DE0 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (104)
1658   0DE1 1C                      INC     E                   ; next data             ' 4     |
1659   0DE2 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1660   0DE3 1C                      INC     E                   ; next data             ' 4     |
1661   0DE4 02                      LD      (BC), A             ; write to YM           ' 7     |
1662   0DE5             
1663   0DE5             ;ym_port_write3
1664   0DE5 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1665   0DE6                         waitYMReady                 ; wait YM to be ready   ' 22    |
1665   0DE6 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1665   0DE8 C2 E6 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1666   0DEB 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (162)
1667   0DEC 1C                      INC     E                   ; next data             ' 4     |
1668   0DED 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1669   0DEE 1C                      INC     E                   ; next data             ' 4     |
1670   0DEF 02                      LD      (BC), A             ; write to YM           ' 7     |
1671   0DF0             
1672   0DF0             ym_port_write2
1673   0DF0 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1674   0DF1                         waitYMReady                 ; wait YM to be ready   ' 22    |
1674   0DF1 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1674   0DF3 C2 F1 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1675   0DF6 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 58 (220)
1676   0DF7 1C                      INC     E                   ; next data             ' 4     |
1677   0DF8 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1678   0DF9 1C                      INC     E                   ; next data             ' 4     |
1679   0DFA 02                      LD      (BC), A             ; write to YM           ' 7     |
1680   0DFB             
1681   0DFB                         wait12                      ; sync                  ' 12    |
1681   0DFB 18 00       >            JR      .loop
1682   0DFD                         waitYMReady                 ; wait YM to be ready   ' 22    | 34 (254)
1682   0DFD CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1682   0DFF C2 FD 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1683   0E02             
1684   0E02                         sampleOutputSafe            ;                       ' 46    | (46)
1684   0E02 D9          >            EXX                     ;                           ' 4     | 4
1684   0E03 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1684   0E05 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1684   0E06 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1684   0E07 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1684   0E09 12          >            LD      (DE), A         ; play sample               ' 7     |
1684   0E0A D9          >            EXX                     ;                           ' 4     | (46)
1685   0E0B                         wait32                      ; sync                  ' 32    | (78)
1685   0E0B 1A          >            LD      A, (DE)
1685   0E0C 00          >            NOP
1685   0E0D ED 4F       >            LD      R, A
1685   0E0F 18 00       >            JR      .loop
1686   0E11             
1687   0E11                         waitYMReady                 ; wait YM to be ready   ' 22    |
1687   0E11 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1687   0E13 C2 11 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1688   0E16 C3 05 0D                JP      ym_port_write1      ; execute next          ' 10    | 32 (110)
1689   0E19             
1690   0E19             
1691   0E19             ; YM KEY command
1692   0E19             ; --------------
1693   0E19             
1694   0E19             com_ym_key_w0                           ; 40                    ' 80
1695   0E19                         wait18                      ; sync                  ' 40    |
1695   0E19 ED 4F       >            LD      R, A
1695   0E1B ED 4F       >            LD      R, A
1696   0E1D 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1697   0E20 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 84 (164)
1698   0E23                         wait4                       ; sync                  ' 4     |
1698   0E23 00          >            NOP
1699   0E24 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    |
1700   0E26 C3 92 0E                JP      ym_key_write0       ;                       ' 10    |
1701   0E29             
1702   0E29             com_ym_key_w1                           ; 41                    ' 80
1703   0E29 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1704   0E2C 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1705   0E2F                         wait4                       ; sync                  ' 4     |
1705   0E2F 00          >            NOP
1706   0E30 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 44 (124)
1707   0E32 C3 8A 0E                JP      ym_key_write1       ;                       ' 10    |
1708   0E35             
1709   0E35             com_ym_key_w2                           ; 43                    ' 80
1710   0E35                         wait134                     ; sync                  ' 134   |
1710   0E35 3E 08       >            LD      A, w            ; 7-2
1710   0E37 3D          >            DEC     A               ; 4
1710   0E38 20 FD       >            JR      NZ, .loop       ; 12
1710   0E3A 00          >            NOP
1711   0E3B 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1712   0E3E 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1713   0E41 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 174 (254)
1714   0E43 C3 C5 0E                JP      ym_key_write2       ;                       ' 10    |
1715   0E46             
1716   0E46             com_ym_key_w3                           ; 44                    ' 80
1717   0E46                         wait64                      ; sync                  ' 64    |
1717   0E46 3E 03       >            LD      A, w            ; 7-2
1717   0E48 3D          >            DEC     A               ; 4
1717   0E49 20 FD       >            JR      NZ, .loop       ; 12
1717   0E4B 1A          >            LD      A, (DE)
1717   0E4C 1A          >            LD      A, (DE)
1718   0E4D 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1719   0E50 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1720   0E53 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 104 (184)
1721   0E55 C3 B6 0E                JP      ym_key_write3       ;                       ' 10    |
1722   0E58             
1723   0E58             com_ym_key_w4                           ; 45                    ' 80
1724   0E58                         wait24                      ; sync                  ' 24    |
1724   0E58 18 00       >            JR      .loop
1724   0E5A 18 00       >            JR      .loop
1725   0E5C 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1726   0E5F 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1727   0E62 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 64 (144)
1728   0E64 C3 AE 0E                JP      ym_key_write4       ;                       ' 10    |
1729   0E67             
1730   0E67             com_ym_key_w5                           ; 46                    ' 80
1731   0E67                         wait154                     ; sync                  ' 174   |
1731   0E67 3E 09       >            LD      A, w            ; 7-2
1731   0E69 3D          >            DEC     A               ; 4
1731   0E6A 20 FD       >            JR      NZ, .loop       ; 12
1731   0E6C 00          >            NOP
1731   0E6D 00          >            NOP
1732   0E6E 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1733   0E71 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1734   0E74             
1735   0E74                         sampleOutputSafe            ;                       ' 46    | (46)
1735   0E74 D9          >            EXX                     ;                           ' 4     | 4
1735   0E75 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1735   0E77 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1735   0E78 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1735   0E79 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1735   0E7B 12          >            LD      (DE), A         ; play sample               ' 7     |
1735   0E7C D9          >            EXX                     ;                           ' 4     | (46)
1736   0E7D             
1737   0E7D                         wait16                      ; sync                  ' 16    |
1737   0E7D 18 00       >            JR      .loop
1737   0E7F 00          >            NOP
1738   0E80                         waitYMReady                 ; wait YM to be ready   ' 22    |
1738   0E80 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1738   0E82 C2 80 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1739   0E85 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 58 (104)
1740   0E87 C3 A6 0E                JP      ym_key_write5       ;                       ' 10    |
1741   0E8A             
1742   0E8A             
1743   0E8A             ym_key_write1                           ;                       ' 124
1744   0E8A 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1745   0E8B 1C                      INC     E                   ; next data             ' 4     |
1746   0E8C                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (164)
1746   0E8C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1746   0E8E C2 8C 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1747   0E91 02                      LD      (BC), A             ; write to YM           ' 7     |
1748   0E92             
1749   0E92             ym_key_write0
1750   0E92 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1751   0E93 1C                      INC     E                   ; next data             ' 4     |
1752   0E94                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (204)
1752   0E94 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1752   0E96 C2 94 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1753   0E99 02                      LD      (BC), A             ; write to YM           ' 7     |
1754   0E9A             
1755   0E9A                         wait8                       ; sync                  ' 8     |
1755   0E9A 00          >            NOP
1755   0E9B 00          >            NOP
1756   0E9C                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (244)
1756   0E9C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1756   0E9E C2 9C 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1757   0EA1 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1758   0EA3             
1759   0EA3 C3 0D 0A                JP      execute_xgm         ;                       ' 10    | (254)
1760   0EA6             
1761   0EA6             ym_key_write5
1762   0EA6 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1763   0EA7 1C                      INC     E                   ; next data             ' 4     |
1764   0EA8                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (144)
1764   0EA8 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1764   0EAA C2 A8 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1765   0EAD 02                      LD      (BC), A             ; write to YM           ' 7     |
1766   0EAE             
1767   0EAE             ym_key_write4
1768   0EAE 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1769   0EAF 1C                      INC     E                   ; next data             ' 4     |
1770   0EB0                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (184)
1770   0EB0 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1770   0EB2 C2 B0 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1771   0EB5 02                      LD      (BC), A             ; write to YM           ' 7     |
1772   0EB6             
1773   0EB6             ym_key_write3
1774   0EB6 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1775   0EB7 1C                      INC     E                   ; next data             ' 4     |
1776   0EB8                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (224)
1776   0EB8 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1776   0EBA C2 B8 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1777   0EBD 02                      LD      (BC), A             ; write to YM           ' 7     |
1778   0EBE             
1779   0EBE                         wait8                       ; sync                  ' 8     |
1779   0EBE 00          >            NOP
1779   0EBF 00          >            NOP
1780   0EC0                         waitYMReady                 ; wait YM to be ready   ' 22    | 30 (254)
1780   0EC0 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1780   0EC2 C2 C0 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1781   0EC5             
1782   0EC5             ym_key_write2
1783   0EC5                         sampleOutputSafe            ;                       ' 46    | (46)
1783   0EC5 D9          >            EXX                     ;                           ' 4     | 4
1783   0EC6 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
1783   0EC8 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1783   0EC9 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1783   0ECA CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1783   0ECC 12          >            LD      (DE), A         ; play sample               ' 7     |
1783   0ECD D9          >            EXX                     ;                           ' 4     | (46)
1784   0ECE             
1785   0ECE                         wait8                       ; sync                  ' 8     |
1785   0ECE 00          >            NOP
1785   0ECF 00          >            NOP
1786   0ED0                         waitYMReady                 ; wait YM to be ready   ' 22    | 40 (86)
1786   0ED0 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1786   0ED2 C2 D0 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1787   0ED5 36 28                   LD      (HL), $28           ; restore write to key  ' 10    |
1788   0ED7             
1789   0ED7 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1790   0ED8 13                      INC     DE                  ; next data             ' 6     |
1791   0ED9                         wait8                       ; wait YM to be ready   ' 8     | 28 (114)
1791   0ED9 00          >            NOP
1791   0EDA 00          >            NOP
1792   0EDB 02                      LD      (BC), A             ; write to YM           ' 7     |
1793   0EDC             
1794   0EDC C3 8A 0E                JP      ym_key_write1       ; execute next          ' 10    | (124)
1795   0EDF             
1796   0EDF             
1797   0EDF             ; PCM command
1798   0EDF             ; -----------
1799   0EDF             
1800   0EDF             com_pcm_p0_ch0                          ; 50                    ' 80
1801   0EDF 0E 00                   LD      C, 0                ; C = prio              ' 7     |
1802   0EE1 C3 2F 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
1803   0EE4             
1804   0EE4             com_pcm_p1_ch0                          ; 54                    ' 80
1805   0EE4 0E 01                   LD      C, 1                ; C = prio              ' 7     |
1806   0EE6 C3 2F 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
1807   0EE9             
1808   0EE9             com_pcm_p2_ch0                          ; 58                    ' 80
1809   0EE9 0E 02                   LD      C, 2                ; C = prio              ' 7     |
1810   0EEB C3 2F 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
1811   0EEE             
1812   0EEE             com_pcm_p3_ch0                          ; 5C                    ' 80
1813   0EEE 0E 03                   LD      C, 3                ; C = prio              ' 7     |
1814   0EF0 C3 2F 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
1815   0EF3             
1816   0EF3             com_pcm_p0_ch1                          ; 51                    ' 80
1817   0EF3 0E 00                   LD      C, 0                ; C = prio              ' 7     |
1818   0EF5 C3 64 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | 17 (97)
1819   0EF8             
1820   0EF8             com_pcm_p1_ch1                          ; 55                    ' 80
1821   0EF8 0E 01                   LD      C, 1                ; C = prio              ' 7     |
1822   0EFA C3 2F 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
1823   0EFD             
1824   0EFD             com_pcm_p2_ch1                          ; 59                    ' 80
1825   0EFD 0E 02                   LD      C, 2                ; C = prio              ' 7     |
1826   0EFF C3 64 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | (119)
1827   0F02             
1828   0F02             com_pcm_p3_ch1                          ; 5D                    ' 80
1829   0F02 0E 03                   LD      C, 3                ; C = prio              ' 7     |
1830   0F04 C3 64 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | (119)
1831   0F07             
1832   0F07             com_pcm_p0_ch2                          ; 52                    ' 80
1833   0F07 0E 00                   LD      C, 0                ; C = prio              ' 7     |
1834   0F09 C3 99 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
1835   0F0C             
1836   0F0C             com_pcm_p1_ch2                          ; 56                    ' 80
1837   0F0C 0E 01                   LD      C, 1                ; C = prio              ' 7     |
1838   0F0E C3 99 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
1839   0F11             
1840   0F11             com_pcm_p2_ch2                          ; 5A                    ' 80
1841   0F11 0E 02                   LD      C, 2                ; C = prio              ' 7     |
1842   0F13 C3 99 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
1843   0F16             
1844   0F16             com_pcm_p3_ch2                          ; 5E                    ' 80
1845   0F16 0E 03                   LD      C, 3                ; C = prio              ' 7     |
1846   0F18 C3 99 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
1847   0F1B             
1848   0F1B             com_pcm_p0_ch3                          ; 53                    ' 80
1849   0F1B 0E 00                   LD      C, 0                ; C = prio              ' 7     |
1850   0F1D C3 CE 0F                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
1851   0F20             
1852   0F20             com_pcm_p1_ch3                          ; 57                    ' 80
1853   0F20 0E 01                   LD      C, 1                ; C = prio              ' 7     |
1854   0F22 C3 CE 0F                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
1855   0F25             
1856   0F25             com_pcm_p2_ch3                          ; 5B                    ' 80
1857   0F25 0E 02                   LD      C, 2                ; C = prio              ' 7     |
1858   0F27 C3 CE 0F                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
1859   0F2A             
1860   0F2A             com_pcm_p3_ch3                          ; 5F                    ' 80
1861   0F2A 0E 03                   LD      C, 3                ; C = prio              ' 7     |
1862   0F2C C3 CE 0F                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
1863   0F2F             
1864   0F2F             
1865   0F2F             com_pcm_ch0                             ;                       ' 97
1866   0F2F CD 0A 14                CALL    prepareXGMPCMCom    ; prepare PCM com       ' 17++  | (46)
1867   0F32             
1868   0F32                         handlePCMCommandXGM 0       ; handle command        ' 170   | (216)
1868   0F32 21 14 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (10)
1868   0F35 79          >            LD      A, C                    ; A = new prio              ' 4     |
1868   0F36 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | 25 (35)
1868   0F37 78          >            LD      A, B                    ; A = SFX id (max = $3F)    ' 4     |
1868   0F38 D2 4A 0F    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
1868   0F3B B7          >            OR      A                       ; silent PCM ?              ' 4     |
1868   0F3C CA 4E 0F    >            JP      Z, .play_new            ; always play               ' 10    | 14 (49)
1868   0F3F 3E 06       >            LD      A, w            ; 7-2
1868   0F41 3D          >            DEC     A               ; 4
1868   0F42 20 FD       >            JR      NZ, .loop       ; 12
1868   0F44 ED 4F       >            LD      R, A
1868   0F46 00          >            NOP
1868   0F47 C3 61 0F    >            JP      .end                    ;                           ' 10    | 121 (170)
1868   0F4A F6 00       >            OR      0                       ;                           ' 7     |
1868   0F4C F6 00       >            OR      0                       ; sync without changing A   ' 7     | 14 (49)
1868   0F4E 71          >            LD      (HL), C                 ; set new prio              ' 7     | (56)
1868   0F4F 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
1868   0F51 87          >            ADD     A                       ;                           ' 4     |
1868   0F52 87          >            ADD     A                       ;                           ' 4     | 19 (75)
1868   0F53 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
1868   0F54 D5          >            PUSH    DE                      ; save DE                   ' 11    |
1868   0F55 11 16 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    | 21 (96)
1868   0F58 ED A0       >            LDI                             ; copy params               ' 16    |
1868   0F5A ED A0       >            LDI                             ;                           ' 16    | 64 (160)
1868   0F5C ED A0       >            LDI                             ;                           ' 16    |
1868   0F5E ED A0       >            LDI                             ;                           ' 16    |
1868   0F60 D1          >            POP     DE                      ; restore DE                ' 10    | (170)
1869   0F61 C3 03 10                JP      com_pcm_done        ; done                  ' 10    |
1870   0F64             
1871   0F64             com_pcm_ch1                             ;                       ' 97
1872   0F64 CD 0A 14                CALL    prepareXGMPCMCom    ; prepare PCM com       ' 17++  | (46)
1873   0F67             
1874   0F67                         handlePCMCommandXGM 1       ; handle command        ' 170   | (216)
1874   0F67 21 1C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (10)
1874   0F6A 79          >            LD      A, C                    ; A = new prio              ' 4     |
1874   0F6B BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | 25 (35)
1874   0F6C 78          >            LD      A, B                    ; A = SFX id (max = $3F)    ' 4     |
1874   0F6D D2 7F 0F    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
1874   0F70 B7          >            OR      A                       ; silent PCM ?              ' 4     |
1874   0F71 CA 83 0F    >            JP      Z, .play_new            ; always play               ' 10    | 14 (49)
1874   0F74 3E 06       >            LD      A, w            ; 7-2
1874   0F76 3D          >            DEC     A               ; 4
1874   0F77 20 FD       >            JR      NZ, .loop       ; 12
1874   0F79 ED 4F       >            LD      R, A
1874   0F7B 00          >            NOP
1874   0F7C C3 96 0F    >            JP      .end                    ;                           ' 10    | 121 (170)
1874   0F7F F6 00       >            OR      0                       ;                           ' 7     |
1874   0F81 F6 00       >            OR      0                       ; sync without changing A   ' 7     | 14 (49)
1874   0F83 71          >            LD      (HL), C                 ; set new prio              ' 7     | (56)
1874   0F84 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
1874   0F86 87          >            ADD     A                       ;                           ' 4     |
1874   0F87 87          >            ADD     A                       ;                           ' 4     | 19 (75)
1874   0F88 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
1874   0F89 D5          >            PUSH    DE                      ; save DE                   ' 11    |
1874   0F8A 11 1E 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    | 21 (96)
1874   0F8D ED A0       >            LDI                             ; copy params               ' 16    |
1874   0F8F ED A0       >            LDI                             ;                           ' 16    | 64 (160)
1874   0F91 ED A0       >            LDI                             ;                           ' 16    |
1874   0F93 ED A0       >            LDI                             ;                           ' 16    |
1874   0F95 D1          >            POP     DE                      ; restore DE                ' 10    | (170)
1875   0F96 C3 03 10                JP      com_pcm_done        ; done                  ' 10    |
1876   0F99             
1877   0F99             com_pcm_ch2                             ;                       ' 97
1878   0F99 CD 0A 14                CALL    prepareXGMPCMCom    ; prepare PCM com       ' 17++  | (46)
1879   0F9C             
1880   0F9C                         handlePCMCommandXGM 2       ; handle command        ' 170   | (216)
1880   0F9C 21 24 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (10)
1880   0F9F 79          >            LD      A, C                    ; A = new prio              ' 4     |
1880   0FA0 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | 25 (35)
1880   0FA1 78          >            LD      A, B                    ; A = SFX id (max = $3F)    ' 4     |
1880   0FA2 D2 B4 0F    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
1880   0FA5 B7          >            OR      A                       ; silent PCM ?              ' 4     |
1880   0FA6 CA B8 0F    >            JP      Z, .play_new            ; always play               ' 10    | 14 (49)
1880   0FA9 3E 06       >            LD      A, w            ; 7-2
1880   0FAB 3D          >            DEC     A               ; 4
1880   0FAC 20 FD       >            JR      NZ, .loop       ; 12
1880   0FAE ED 4F       >            LD      R, A
1880   0FB0 00          >            NOP
1880   0FB1 C3 CB 0F    >            JP      .end                    ;                           ' 10    | 121 (170)
1880   0FB4 F6 00       >            OR      0                       ;                           ' 7     |
1880   0FB6 F6 00       >            OR      0                       ; sync without changing A   ' 7     | 14 (49)
1880   0FB8 71          >            LD      (HL), C                 ; set new prio              ' 7     | (56)
1880   0FB9 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
1880   0FBB 87          >            ADD     A                       ;                           ' 4     |
1880   0FBC 87          >            ADD     A                       ;                           ' 4     | 19 (75)
1880   0FBD 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
1880   0FBE D5          >            PUSH    DE                      ; save DE                   ' 11    |
1880   0FBF 11 26 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    | 21 (96)
1880   0FC2 ED A0       >            LDI                             ; copy params               ' 16    |
1880   0FC4 ED A0       >            LDI                             ;                           ' 16    | 64 (160)
1880   0FC6 ED A0       >            LDI                             ;                           ' 16    |
1880   0FC8 ED A0       >            LDI                             ;                           ' 16    |
1880   0FCA D1          >            POP     DE                      ; restore DE                ' 10    | (170)
1881   0FCB C3 03 10                JP      com_pcm_done        ; done                  ' 10    |
1882   0FCE             
1883   0FCE             com_pcm_ch3                             ;                       ' 97
1884   0FCE CD 0A 14                CALL    prepareXGMPCMCom    ; prepare PCM com       ' 17++  | (46)
1885   0FD1             
1886   0FD1                         handlePCMCommandXGM 3       ; handle command        ' 170   | (216)
1886   0FD1 21 2C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (10)
1886   0FD4 79          >            LD      A, C                    ; A = new prio              ' 4     |
1886   0FD5 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | 25 (35)
1886   0FD6 78          >            LD      A, B                    ; A = SFX id (max = $3F)    ' 4     |
1886   0FD7 D2 E9 0F    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
1886   0FDA B7          >            OR      A                       ; silent PCM ?              ' 4     |
1886   0FDB CA ED 0F    >            JP      Z, .play_new            ; always play               ' 10    | 14 (49)
1886   0FDE 3E 06       >            LD      A, w            ; 7-2
1886   0FE0 3D          >            DEC     A               ; 4
1886   0FE1 20 FD       >            JR      NZ, .loop       ; 12
1886   0FE3 ED 4F       >            LD      R, A
1886   0FE5 00          >            NOP
1886   0FE6 C3 00 10    >            JP      .end                    ;                           ' 10    | 121 (170)
1886   0FE9 F6 00       >            OR      0                       ;                           ' 7     |
1886   0FEB F6 00       >            OR      0                       ; sync without changing A   ' 7     | 14 (49)
1886   0FED 71          >            LD      (HL), C                 ; set new prio              ' 7     | (56)
1886   0FEE 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
1886   0FF0 87          >            ADD     A                       ;                           ' 4     |
1886   0FF1 87          >            ADD     A                       ;                           ' 4     | 19 (75)
1886   0FF2 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
1886   0FF3 D5          >            PUSH    DE                      ; save DE                   ' 11    |
1886   0FF4 11 2E 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    | 21 (96)
1886   0FF7 ED A0       >            LDI                             ; copy params               ' 16    |
1886   0FF9 ED A0       >            LDI                             ;                           ' 16    | 64 (160)
1886   0FFB ED A0       >            LDI                             ;                           ' 16    |
1886   0FFD ED A0       >            LDI                             ;                           ' 16    |
1886   0FFF D1          >            POP     DE                      ; restore DE                ' 10    | (170)
1887   1000 C3 03 10                JP      com_pcm_done        ; done                  ' 10    |
1888   1003             
1889   1003             com_pcm_done                            ;                       ' 216
1890   1003                         wait28                      ; sync                  ' 28    |
1890   1003 18 00       >            JR      .loop
1890   1005 ED 4F       >            LD      R, A
1890   1007 1A          >            LD      A, (DE)
1891   1008 C3 0D 0A                JP      execute_xgm         ;                       ' 10    | 38 (254)
1892   100B             
1893   100B             
1894   100B             ; STATE command
1895   100B             ; -------------
1896   100B             
1897   100B             com_state_w0                            ; 60                    ' 80
1898   100B                         wait114                     ; sync                  ' 114   |
1898   100B 3E 07       >            LD      A, w            ; 7-2
1898   100D 3D          >            DEC     A               ; 4
1898   100E 20 FD       >            JR      NZ, .loop       ; 12
1899   1010 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 131 (211)
1900   1012 C3 50 11                JP      state_w0            ; execute               ' 10    |
1901   1015             
1902   1015             com_state_w1                            ; 61                    ' 80
1903   1015                         wait81                      ; sync                  ' 81    |
1903   1015 3E 04       >            LD      A, w            ; 7-2
1903   1017 3D          >            DEC     A               ; 4
1903   1018 20 FD       >            JR      NZ, .loop       ; 12
1903   101A 00          >            NOP
1903   101B 00          >            NOP
1903   101C 1A          >            LD      A, (DE)
1904   101D 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 98 (178)
1905   101F C3 4A 11                JP      state_w1            ; execute               ' 10    |
1906   1022             
1907   1022             com_state_w2                            ; 62                    ' 80
1908   1022                         wait48                      ; sync                  ' 48    |
1908   1022 ED 4F       >            LD      R, A
1908   1024 ED 4F       >            LD      R, A
1908   1026 ED 4F       >            LD      R, A
1908   1028 ED 4F       >            LD      R, A
1908   102A 18 00       >            JR      .loop
1909   102C 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 65 (145)
1910   102E C3 44 11                JP      state_w2            ; execute               ' 10    |
1911   1031             
1912   1031             com_state_w3                            ; 63                    ' 80
1913   1031                         wait15                      ; sync                  ' 15    |
1913   1031 00          >            NOP
1913   1032 00          >            NOP
1913   1033 1A          >            LD      A, (DE)
1914   1034 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 32 (112)
1915   1036 C3 3E 11                JP      state_w3            ; execute               ' 10    |
1916   1039             
1917   1039             com_state_w4                            ; 64                    ' 80
1918   1039                         wait174                     ; sync                  ' 174   | (254)
1918   1039 3E 0A       >            LD      A, w            ; 7-2
1918   103B 3D          >            DEC     A               ; 4
1918   103C 20 FD       >            JR      NZ, .loop       ; 12
1918   103E 18 00       >            JR      .loop
1919   1040                         sampleOutput                ; sample output         ' 36    | (36)
1919   1040 D9          >            EXX                     ;                           ' 4     | 4
1919   1041 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1919   1042 03          >            INC     BC              ; increment read address    ' 6     |
1919   1043 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1919   1045 12          >            LD      (DE), A         ; play sample               ' 7     |
1919   1046 D9          >            EXX                     ;                           ' 4     | (36)
1920   1047             
1921   1047                         wait26                      ; sync                  ' 26    |
1921   1047 ED 4F       >            LD      R, A
1921   1049 ED 4F       >            LD      R, A
1921   104B 00          >            NOP
1921   104C 00          >            NOP
1922   104D 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 43 (79)
1923   104F C3 38 11                JP      state_w4            ; execute               ' 10    |
1924   1052             
1925   1052             com_state_w5                            ; 65                    ' 80
1926   1052                         wait157                     ; sync                  ' 157   |
1926   1052 3E 09       >            LD      A, w            ; 7-2
1926   1054 3D          >            DEC     A               ; 4
1926   1055 20 FD       >            JR      NZ, .loop       ; 12
1926   1057 1A          >            LD      A, (DE)
1926   1058 00          >            NOP
1927   1059 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 174 (254)
1928   105B C3 28 11                JP      state_w5            ; execute               ' 10    |
1929   105E             
1930   105E             com_state_w6                            ; 66                    ' 80
1931   105E                         wait124                     ; sync                  ' 124   |
1931   105E 3E 07       >            LD      A, w            ; 7-2
1931   1060 3D          >            DEC     A               ; 4
1931   1061 20 FD       >            JR      NZ, .loop       ; 12
1931   1063 C3 66 10    >            JP      .loop
1932   1066 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 141 (221)
1933   1068 C3 22 11                JP      state_w6            ; execute               ' 10    |
1934   106B             
1935   106B             com_state_w7                            ; 67                    ' 80
1936   106B                         wait91                      ; sync                  ' 91    |
1936   106B 3E 05       >            LD      A, w            ; 7-2
1936   106D 3D          >            DEC     A               ; 4
1936   106E 20 FD       >            JR      NZ, .loop       ; 12
1936   1070 ED 4F       >            LD      R, A
1937   1072 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 108 (188)
1938   1074 C3 1C 11                JP      state_w7            ; execute               ' 10    |
1939   1077             
1940   1077             com_state_w8                            ; 68                    ' 80
1941   1077                         wait58                      ; sync                  ' 58    |
1941   1077 3E 03       >            LD      A, w            ; 7-2
1941   1079 3D          >            DEC     A               ; 4
1941   107A 20 FD       >            JR      NZ, .loop       ; 12
1941   107C 00          >            NOP
1941   107D 00          >            NOP
1942   107E 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 75 (155)
1943   1080 C3 16 11                JP      state_w8            ; execute               ' 10    |
1944   1083             
1945   1083             com_state_w9                            ; 69                    ' 80
1946   1083                         wait25                      ; sync                  ' 25    |
1946   1083 ED 4F       >            LD      R, A
1946   1085 ED 4F       >            LD      R, A
1946   1087 1A          >            LD      A, (DE)
1947   1088 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 42 (122)
1948   108A C3 10 11                JP      state_w9            ; execute               ' 10    |
1949   108D             
1950   108D             com_state_wA                            ; 6A                    ' 80
1951   108D                         wait174                     ; sync                  ' 174   | (254)
1951   108D 3E 0A       >            LD      A, w            ; 7-2
1951   108F 3D          >            DEC     A               ; 4
1951   1090 20 FD       >            JR      NZ, .loop       ; 12
1951   1092 18 00       >            JR      .loop
1952   1094                         sampleOutput                ; sample output         ' 36    | (36)
1952   1094 D9          >            EXX                     ;                           ' 4     | 4
1952   1095 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1952   1096 03          >            INC     BC              ; increment read address    ' 6     |
1952   1097 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1952   1099 12          >            LD      (DE), A         ; play sample               ' 7     |
1952   109A D9          >            EXX                     ;                           ' 4     | (36)
1953   109B             
1954   109B                         wait36                      ; sync                  ' 36    |
1954   109B ED 4F       >            LD      R, A
1954   109D ED 4F       >            LD      R, A
1954   109F ED 4F       >            LD      R, A
1954   10A1 ED 4F       >            LD      R, A
1955   10A3 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 53 (89)
1956   10A5 C3 0A 11                JP      state_wA            ; execute               ' 10    |
1957   10A8             
1958   10A8             com_state_wB                            ; 6B                    ' 80
1959   10A8                         wait157                     ; sync                  ' 157   |
1959   10A8 3E 09       >            LD      A, w            ; 7-2
1959   10AA 3D          >            DEC     A               ; 4
1959   10AB 20 FD       >            JR      NZ, .loop       ; 12
1959   10AD 1A          >            LD      A, (DE)
1959   10AE 00          >            NOP
1960   10AF 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 174 (254)
1961   10B1 C3 F9 10                JP      state_wB            ; execute               ' 10    |
1962   10B4             
1963   10B4             com_state_wC                            ; 6C                    ' 80
1964   10B4                         wait124                     ; sync                  ' 124   |
1964   10B4 3E 07       >            LD      A, w            ; 7-2
1964   10B6 3D          >            DEC     A               ; 4
1964   10B7 20 FD       >            JR      NZ, .loop       ; 12
1964   10B9 C3 BC 10    >            JP      .loop
1965   10BC 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 141 (221)
1966   10BE C3 F3 10                JP      state_wC            ; execute               ' 10    |
1967   10C1             
1968   10C1             com_state_wD                            ; 6D                    ' 80
1969   10C1                         wait91                      ; sync                  ' 91    |
1969   10C1 3E 05       >            LD      A, w            ; 7-2
1969   10C3 3D          >            DEC     A               ; 4
1969   10C4 20 FD       >            JR      NZ, .loop       ; 12
1969   10C6 ED 4F       >            LD      R, A
1970   10C8 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 108 (188)
1971   10CA C3 ED 10                JP      state_wD            ; execute               ' 10    |
1972   10CD             
1973   10CD             com_state_wE                            ; 6E                    ' 80
1974   10CD                         wait58                      ; sync                  ' 58    |
1974   10CD 3E 03       >            LD      A, w            ; 7-2
1974   10CF 3D          >            DEC     A               ; 4
1974   10D0 20 FD       >            JR      NZ, .loop       ; 12
1974   10D2 00          >            NOP
1974   10D3 00          >            NOP
1975   10D4 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 75 (155)
1976   10D6 C3 E7 10                JP      state_wE            ; execute               ' 10    |
1977   10D9             
1978   10D9             com_state_wF                            ; 6F                    ' 80
1979   10D9                         wait35                      ; sync                  ' 35    |
1979   10D9 18 00       >            JR      .loop
1979   10DB ED 4F       >            LD      R, A
1979   10DD 1A          >            LD      A, (DE)
1979   10DE 1A          >            LD      A, (DE)
1980   10DF 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 42 (122)
1981   10E1             
1982   10E1             state_wF                                ;                       ' 122
1983   10E1 1A                      LD      A, (DE)             ; A = state register    ' 7     |
1984   10E2 1C                      INC     E                   ; next data             ' 4     |
1985   10E3 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (155)
1986   10E4 1A                      LD      A, (DE)             ; A = state value       ' 7     |
1987   10E5 1C                      INC     E                   ; next data             ' 4     |
1988   10E6 77                      LD      (HL), A             ; write to save         ' 7     |
1989   10E7             
1990   10E7             state_wE
1991   10E7 1A                      LD      A, (DE)             ; A = state register    ' 7     |
1992   10E8 1C                      INC     E                   ; next data             ' 4     |
1993   10E9 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (188)
1994   10EA 1A                      LD      A, (DE)             ; A = state value       ' 7     |
1995   10EB 1C                      INC     E                   ; next data             ' 4     |
1996   10EC 77                      LD      (HL), A             ; write to save         ' 7     |
1997   10ED             
1998   10ED             state_wD
1999   10ED 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2000   10EE 1C                      INC     E                   ; next data             ' 4     |
2001   10EF 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (221)
2002   10F0 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2003   10F1 1C                      INC     E                   ; next data             ' 4     |
2004   10F2 77                      LD      (HL), A             ; write to save         ' 7     |
2005   10F3             
2006   10F3             state_wC
2007   10F3 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2008   10F4 1C                      INC     E                   ; next data             ' 4     |
2009   10F5 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (254)
2010   10F6 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2011   10F7 1C                      INC     E                   ; next data             ' 4     |
2012   10F8 77                      LD      (HL), A             ; write to save         ' 7     |
2013   10F9             
2014   10F9             state_wB
2015   10F9                         sampleOutput                ; sample output         ' 36    |
2015   10F9 D9          >            EXX                     ;                           ' 4     | 4
2015   10FA 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2015   10FB 03          >            INC     BC              ; increment read address    ' 6     |
2015   10FC CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2015   10FE 12          >            LD      (DE), A         ; play sample               ' 7     |
2015   10FF D9          >            EXX                     ;                           ' 4     | (36)
2016   1100                         wait20                      ; wait                  ' 20    | (56)
2016   1100 1A          >            LD      A, (DE)
2016   1101 00          >            NOP
2016   1102 ED 4F       >            LD      R, A
2017   1104             
2018   1104 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2019   1105 1C                      INC     E                   ; next data             ' 4     |
2020   1106 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (89)
2021   1107 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2022   1108 1C                      INC     E                   ; next data             ' 4     |
2023   1109 77                      LD      (HL), A             ; write to save         ' 7     |
2024   110A             
2025   110A             state_wA
2026   110A 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2027   110B 1C                      INC     E                   ; next data             ' 4     |
2028   110C 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (122)
2029   110D 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2030   110E 1C                      INC     E                   ; next data             ' 4     |
2031   110F 77                      LD      (HL), A             ; write to save         ' 7     |
2032   1110             
2033   1110             state_w9
2034   1110 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2035   1111 1C                      INC     E                   ; next data             ' 4     |
2036   1112 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (155)
2037   1113 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2038   1114 1C                      INC     E                   ; next data             ' 4     |
2039   1115 77                      LD      (HL), A             ; write to save         ' 7     |
2040   1116             
2041   1116             state_w8
2042   1116 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2043   1117 1C                      INC     E                   ; next data             ' 4     |
2044   1118 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (188)
2045   1119 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2046   111A 1C                      INC     E                   ; next data             ' 4     |
2047   111B 77                      LD      (HL), A             ; write to save         ' 7     |
2048   111C             
2049   111C             state_w7
2050   111C 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2051   111D 1C                      INC     E                   ; next data             ' 4     |
2052   111E 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (221)
2053   111F 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2054   1120 1C                      INC     E                   ; next data             ' 4     |
2055   1121 77                      LD      (HL), A             ; write to save         ' 7     |
2056   1122             
2057   1122             state_w6
2058   1122 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2059   1123 1C                      INC     E                   ; next data             ' 4     |
2060   1124 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (254)
2061   1125 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2062   1126 1C                      INC     E                   ; next data             ' 4     |
2063   1127 77                      LD      (HL), A             ; write to save         ' 7     |
2064   1128             
2065   1128             state_w5
2066   1128                         sampleOutput                ; sample output         ' 36    |
2066   1128 D9          >            EXX                     ;                           ' 4     | 4
2066   1129 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2066   112A 03          >            INC     BC              ; increment read address    ' 6     |
2066   112B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2066   112D 12          >            LD      (DE), A         ; play sample               ' 7     |
2066   112E D9          >            EXX                     ;                           ' 4     | (36)
2067   112F                         wait10                      ; wait                  ' 10    | (46)
2067   112F C3 32 11    >            JP      .loop
2068   1132             
2069   1132 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2070   1133 1C                      INC     E                   ; next data             ' 4     |
2071   1134 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (79)
2072   1135 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2073   1136 1C                      INC     E                   ; next data             ' 4     |
2074   1137 77                      LD      (HL), A             ; write to save         ' 7     |
2075   1138             
2076   1138             state_w4
2077   1138 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2078   1139 1C                      INC     E                   ; next data             ' 4     |
2079   113A 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (112)
2080   113B 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2081   113C 1C                      INC     E                   ; next data             ' 4     |
2082   113D 77                      LD      (HL), A             ; write to save         ' 7     |
2083   113E             
2084   113E             state_w3
2085   113E 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2086   113F 1C                      INC     E                   ; next data             ' 4     |
2087   1140 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (145)
2088   1141 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2089   1142 1C                      INC     E                   ; next data             ' 4     |
2090   1143 77                      LD      (HL), A             ; write to save         ' 7     |
2091   1144             
2092   1144             state_w2
2093   1144 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2094   1145 1C                      INC     E                   ; next data             ' 4     |
2095   1146 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (178)
2096   1147 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2097   1148 1C                      INC     E                   ; next data             ' 4     |
2098   1149 77                      LD      (HL), A             ; write to save         ' 7     |
2099   114A             
2100   114A             state_w1
2101   114A 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2102   114B 1C                      INC     E                   ; next data             ' 4     |
2103   114C 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (211)
2104   114D 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2105   114E 1C                      INC     E                   ; next data             ' 4     |
2106   114F 77                      LD      (HL), A             ; write to save         ' 7     |
2107   1150             
2108   1150             state_w0
2109   1150 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2110   1151 1C                      INC     E                   ; next data             ' 4     |
2111   1152 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (244)
2112   1153 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2113   1154 1C                      INC     E                   ; next data             ' 4     |
2114   1155 77                      LD      (HL), A             ; write to save         ' 7     |
2115   1156             
2116   1156 C3 0D 0A                JP      execute_xgm         ;                       ' 10    | (254)
2117   1159             
2118   1159             
2119   1159             ; NULL command
2120   1159             ; ------------
2121   1159             
2122   1159             com_null                                ; 01-0F / 60-7D         ' 80
2123   1159                         wait164                     ; sync                  ' 164   |
2123   1159 3E 09       >            LD      A, w            ; 7-2
2123   115B 3D          >            DEC     A               ; 4
2123   115C 20 FD       >            JR      NZ, .loop       ; 12
2123   115E ED 4F       >            LD      R, A
2123   1160 ED 4F       >            LD      R, A
2124   1162 C3 0D 0A                JP      execute_xgm         ;                       ' 10    | 174 (254)
2125   1165             
2126   1165             
2127   1165             ; LOOP command
2128   1165             ; ------------
2129   1165             
2130   1165             com_loop                                ; FE                        ' 80
2131   1165 1A                      LD      A, (DE)             ; A = loop addr b7-b0       ' 7     |
2132   1166 6F                      LD      L, A                ; L = loop addr b7-b0       ' 4     |
2133   1167 1C                      INC     E                   ; next param                ' 4     |
2134   1168 1A                      LD      A, (DE)             ; A = loop addr b15-b8      ' 7     | 30 (110)
2135   1169 67                      LD      H, A                ; HL = loop addr b15-b0     ' 4     |
2136   116A 1C                      INC     E                   ; next param                ' 4     |
2137   116B             
2138   116B ED 4B 04 01             LD      BC, (XGM_ARG_A+0)   ; BC = XGM base addr (ML)   ' 20    |
2139   116F 09                      ADD     HL, BC              ; HL = XGM base addr + loop ' 11    | 47 (157)
2140   1170 22 34 01                LD      (XGM_ADDR+0), HL    ; set new XGM addr (ML)     ' 16    |
2141   1173             
2142   1173 1A                      LD      A, (DE)             ; A = loop addr b7-b0       ' 7     |
2143   1174 21 06 01                LD      HL, XGM_ARG_A+2     ; HL point XGM base adr H   ' 10    |
2144   1177 8E                      ADC     (HL)                ; A = XGM base addr + loop  ' 7     | 41 (198)
2145   1178 1C                      INC     E                   ; next param                ' 4     |
2146   1179 32 36 01                LD      (XGM_ADDR+2), A     ; set new XGM addr (H)      ' 13    |
2147   117C             
2148   117C                         wait46                      ; sync                      ' 46    |
2148   117C 3E 02       >            LD      A, w            ; 7-2
2148   117E 3D          >            DEC     A               ; 4
2148   117F 20 FD       >            JR      NZ, .loop       ; 12
2148   1181 18 00       >            JR      .loop
2149   1183 C3 0D 0A                JP      execute_xgm         ;                           ' 10    | 56 (254)
2150   1186             
2151   1186             
2152   1186             ; END XGM command
2153   1186             ; ---------------
2154   1186             
2155   1186             com_end                                 ; FF                    ' 80
2156   1186 21 02 01                LD      HL, STATUS          ; HL = STATUS           ' 10    | 25 (105)
2157   1189 CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status     ' 15    |
2158   118B             
2159   118B                         wait139                     ; sync                  ' 139   |
2159   118B 3E 08       >            LD      A, w            ; 7-2
2159   118D 3D          >            DEC     A               ; 4
2159   118E 20 FD       >            JR      NZ, .loop       ; 12
2159   1190 ED 4F       >            LD      R, A
2160   1192 C3 0D 0A                JP      execute_xgm         ;                       ' 10    | 149 (254)
2161   1195             
2162   1195             ; $B9+X+Y
2163   1195             xgm_done                            ;                       ' 90
2164   1195 FD 2D                   DEC     IYL             ; no more vint to do ?  ' 8     |
2165   1197 CA A7 11                JP      Z, external_com ; execute extern com    ' 10    | 18 (108)
2166   119A             
2167   119A                         wait136                 ; sync                  ' 136   |
2167   119A 3E 07       >            LD      A, w            ; 7-2
2167   119C 3D          >            DEC     A               ; 4
2167   119D 20 FD       >            JR      NZ, .loop       ; 12
2167   119F ED 4F       >            LD      R, A
2167   11A1 ED 4F       >            LD      R, A
2167   11A3 00          >            NOP
2168   11A4 C3 C3 07                JP      prepare_xgm     ; continue xgm process  ' 10    | 146 (254)
2169   11A7             
2170   11A7             
2171   11A7             
2172   11A7             ; execute external command
2173   11A7             ; ------------------------
2174   11A7             
2175   11A7             ; $B9+X+Y
2176   11A7             external_com                            ;                           ' 108
2177   11A7 21 00 01                LD      HL, COMMAND         ; HL point on COMMAND       ' 10    | (118)
2178   11AA             
2179   11AA             .chk_xgm_play
2180   11AA CB 76                   BIT     XGM_PLAY_SFT, (HL)  ; play XGM command ?        ' 12    |
2181   11AC CA C7 11                JP      Z, .chk_xgm_resume  ;                           ' 10    | 22 (140)
2182   11AF             
2183   11AF CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear command             ' 15    |
2184   11B1 2C                      INC     L                   ;                           ' 4     |
2185   11B2 2C                      INC     L                   ; HL point on status        ' 4     | 38 (178)
2186   11B3 CB F6                   SET     XGM_PLAY_SFT, (HL)  ; set play status           ' 15    |
2187   11B5             
2188   11B5 2A 04 01                LD      HL, (XGM_ARG_A)     ; set new XGM address       ' 16    |
2189   11B8 22 34 01                LD      (XGM_ADDR), HL      ;                           ' 16    | 58 (236)
2190   11BB 3A 06 01                LD      A, (XGM_ARG_A+2)    ;                           ' 13    |
2191   11BE 32 36 01                LD      (XGM_ADDR+2),A      ;                           ' 13    |
2192   11C1             
2193   11C1 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2194   11C4 C3 64 12                JP      external_com_pcm    ; do PCM commands           ' 10    | (254+2)
2195   11C7                                                     ; +2 cycles here, ignore
2196   11C7             
2197   11C7             .chk_xgm_resume
2198   11C7 CB 6E                   BIT     XGM_RESUME_SFT, (HL)    ; play XGM command ?    ' 12    |
2199   11C9 CA ED 11                JP      Z, .chk_xgm_stop        ;                       ' 10    | 22 (162)
2200   11CC             
2201   11CC CB AE                   RES     XGM_RESUME_SFT, (HL)    ; clear command         ' 15    |
2202   11CE 2C                      INC     L                       ;                       ' 4     |
2203   11CF 2C                      INC     L                       ; HL point on status    ' 4     | 38 (200)
2204   11D0 CB F6                   SET     XGM_PLAY_SFT, (HL)      ; set play status       ' 15    |
2205   11D2             
2206   11D2 11 44 01                LD      DE, YM_RR_SAV       ; DE point on save state    ' 10    |
2207   11D5                         wait44                      ; sync                      ' 44    | 54 (254)
2207   11D5 3E 02       >            LD      A, w            ; 7-2
2207   11D7 3D          >            DEC     A               ; 4
2207   11D8 20 FD       >            JR      NZ, .loop       ; 12
2207   11DA C3 DD 11    >            JP      .loop
2208   11DD             
2209   11DD CD 1D 14                CALL    loadState           ; load state                ' 140+  | (140)
2210   11E0             
2211   11E0                         wait94                      ; sync                      ' 94    |
2211   11E0 3E 05       >            LD      A, w            ; 7-2
2211   11E2 3D          >            DEC     A               ; 4
2211   11E3 20 FD       >            JR      NZ, .loop       ; 12
2211   11E5 18 00       >            JR      .loop
2212   11E7 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    | 114 (254)
2213   11EA C3 64 12                JP      external_com_pcm    ; do PCM commands           ' 10    |
2214   11ED             
2215   11ED             .chk_xgm_stop
2216   11ED CB 66                   BIT     XGM_STOP_SFT, (HL)  ; stop XGM command ?        ' 12    |
2217   11EF CA 59 12                JP      Z, .chk_pcm0_pre    ;                           ' 10    | 22 (184)
2218   11F2             
2219   11F2 CB A6                   RES     XGM_STOP_SFT, (HL)  ; clear command             ' 15    |
2220   11F4 2C                      INC     L                   ;                           ' 4     |
2221   11F5 2C                      INC     L                   ; HL point on status        ' 4     | 38 (222)
2222   11F6 CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status         ' 15    |
2223   11F8             
2224   11F8 11 64 01                LD      DE, YM_RR_OFF       ; DE point on off state     ' 10    |
2225   11FB                         wait22                      ; sync                      ' 22    | 32 (254)
2225   11FB ED 4F       >            LD      R, A
2225   11FD ED 4F       >            LD      R, A
2225   11FF 00          >            NOP
2226   1200             
2227   1200 CD 1D 14                CALL    loadState           ; stop music                ' 140+  | (140)
2228   1203             
2229   1203 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0      ' 10    |
2230   1206 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1      ' 10    | 20 (160)
2231   1209             
2232   1209 36 28                   LD      (HL), $28           ; set reg num to YM         ' 10    |
2233   120B                         waitYMReady                 ; wait YM to be ready       ' 22    | 32 (192)
2233   120B CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2233   120D C2 0B 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2234   1210             
2235   1210 AF                      XOR     A                   ; A = $00                   ' 4     |
2236   1211 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2237   1212 3C                      INC     A                   ; A = $01                   ' 4     | 37 (229)
2238   1213                         waitYMReady                 ; wait YM to be ready       ' 22    |
2238   1213 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2238   1215 C2 13 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2239   1218             
2240   1218 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2241   1219                         waitYMReady                 ; wait YM to be ready       ' 22    | 29 (254+4)
2241   1219 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2241   121B C2 19 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2242   121E             
2243   121E                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+4)
2243   121E D9          >            EXX                     ;                           ' 4     | 4
2243   121F 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
2243   1221 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2243   1222 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2243   1223 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2243   1225 12          >            LD      (DE), A         ; play sample               ' 7     |
2243   1226 D9          >            EXX                     ;                           ' 4     | (46)
2244   1227             
2245   1227                         waitYMReady                 ; wait YM to be ready       ' 22    |
2245   1227 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2245   1229 C2 27 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2246   122C 36 28                   LD      (HL), $28           ; set reg num to YM         ' 10    |
2247   122E 3E 02                   LD      A, $02              ; A = $02                   ' 7     | 61 (111)
2248   1230                         waitYMReady                 ; wait YM to be ready       ' 22    |
2248   1230 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2248   1232 C2 30 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2249   1235             
2250   1235 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2251   1236 C6 02                   ADD     $2                  ; A = $04                   ' 7     | 36 (147)
2252   1238                         waitYMReady                 ; wait YM to be ready       ' 22    |
2252   1238 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2252   123A C2 38 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2253   123D             
2254   123D 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2255   123E 3C                      INC     A                   ; A = $05                   ' 4     | 33 (180)
2256   123F                         waitYMReady                 ; wait YM to be ready       ' 22    |
2256   123F CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2256   1241 C2 3F 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2257   1244             
2258   1244 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2259   1245 3C                      INC     A                   ; A = $06                   ' 4     | 33 (213)
2260   1246                         waitYMReady                 ; wait YM to be ready       ' 22    |
2260   1246 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2260   1248 C2 46 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2261   124B             
2262   124B 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2263   124C                         waitYMReady                 ; wait YM to be ready       ' 22    | 39 (252)
2263   124C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2263   124E C2 4C 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2264   1251 36 2A                   LD      (HL), $2A           ; restore DAC write         ' 10    |
2265   1253             
2266   1253 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2267   1256 C3 64 12                JP      external_com_pcm    ; continue                  ' 10    | 20 (254+18)
2268   1259                                                     ; +18 cycles here, ignore
2269   1259             
2270   1259             .chk_pcm0_pre                           ;                           ' 184
2271   1259 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2272   125C                         wait60                      ; sync                      ' 70    | 254
2272   125C 3E 03       >            LD      A, w            ; 7-2
2272   125E 3D          >            DEC     A               ; 4
2272   125F 20 FD       >            JR      NZ, .loop       ; 12
2272   1261 C3 64 12    >            JP      .loop
2273   1264             
2274   1264             ; $BA+X+Y
2275   1264             external_com_pcm
2276   1264                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2276   1264 D9          >            EXX                     ;                           ' 4     | 4
2276   1265 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2276   1266 03          >            INC     BC              ; increment read address    ' 6     |
2276   1267 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2276   1269 12          >            LD      (DE), A         ; play sample               ' 7     |
2276   126A D9          >            EXX                     ;                           ' 4     | (36)
2277   126B             
2278   126B             .chk_pcm0
2279   126B CB 46                   BIT     CH0_SFT, (HL)       ; play PCM0 command ?       ' 12    |
2280   126D CA B0 12                JP      Z, .chk_pcm1        ;                           ' 10    | 22 (58)
2281   1270             
2282   1270 CB 86                   RES     CH0_SFT, (HL)       ; clear command             ' 15    |
2283   1272 2C                      INC     L                   ;                           ' 4     |
2284   1273 2C                      INC     L                   ; HL point on status        ' 4     | 38 (96)
2285   1274 CB C6                   SET     CH0_SFT, (HL)       ; set play status           ' 15    |
2286   1276             
2287   1276                         handlePCMCommand 0          ; handle play PCM command   ' 173   | (269)
2287   1276 ED 4B 08 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2287   127A 21 14 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2287   127D 79          >            LD      A, C                    ; A = new prio              ' 4     |
2287   127E BE          >            CP      (HL)                    ; compare to old prio       ' 7     |
2287   127F 78          >            LD      A, B                    ; A = SFX id                ' 4     | 25 (55)
2287   1280 D2 91 12    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
2287   1283 B7          >            OR      A                       ; silent PCM ?              ' 4     |
2287   1284 CA 95 12    >            JP      Z, .play_new            ; always play               ' 10    | 14 (69)
2287   1287 3E 05       >            LD      A, w            ; 7-2
2287   1289 3D          >            DEC     A               ; 4
2287   128A 20 FD       >            JR      NZ, .loop       ; 12
2287   128C 18 00       >            JR      .loop
2287   128E C3 A6 12    >            JP      .end                    ;                           ' 10    | 88 (173)
2287   1291 00          >            NOP                             ;                           ' 4     |
2287   1292 C3 95 12    >            JP      .play_new               ; sync                      ' 10    | 14 (69)
2287   1295 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2287   1296 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2287   1298 6F          >            LD      L, A                    ;                           ' 4     |
2287   1299 29          >            ADD     HL, HL                  ;                           ' 6     | 33 (109)
2287   129A 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     |
2287   129B 11 16 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    |
2287   129E ED A0       >            LDI                             ; copy params               ' 16    |
2287   12A0 ED A0       >            LDI                             ;                           ' 16    | 64 (173)
2287   12A2 ED A0       >            LDI                             ;                           ' 16    |
2287   12A4 ED A0       >            LDI                             ;                           ' 16    |
2288   12A6                         sampleOutput                ; *** sample output ****    ' 36    | (36+15)
2288   12A6 D9          >            EXX                     ;                           ' 4     | 4
2288   12A7 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2288   12A8 03          >            INC     BC              ; increment read address    ' 6     |
2288   12A9 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2288   12AB 12          >            LD      (DE), A         ; play sample               ' 7     |
2288   12AC D9          >            EXX                     ;                           ' 4     | (36)
2289   12AD 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    | (61)
2290   12B0                                                     ; +3 cycles here, ignore
2291   12B0             
2292   12B0             .chk_pcm1
2293   12B0 CB 4E                   BIT     CH1_SFT, (HL)       ; play PCM1 command ?       ' 12    |
2294   12B2 CA F5 12                JP      Z, .chk_pcm2        ;                           ' 10    | 22 (80)
2295   12B5             
2296   12B5 CB 8E                   RES     CH1_SFT, (HL)       ; clear command             ' 15    |
2297   12B7 2C                      INC     L                   ;                           ' 4     |
2298   12B8 2C                      INC     L                   ; HL point on status        ' 4     | 38 (118)
2299   12B9 CB CE                   SET     CH1_SFT, (HL)       ; set play status           ' 15    |
2300   12BB             
2301   12BB                         handlePCMCommand 1          ; handle play PCM command   ' 173   | (291)
2301   12BB ED 4B 0A 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2301   12BF 21 1C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2301   12C2 79          >            LD      A, C                    ; A = new prio              ' 4     |
2301   12C3 BE          >            CP      (HL)                    ; compare to old prio       ' 7     |
2301   12C4 78          >            LD      A, B                    ; A = SFX id                ' 4     | 25 (55)
2301   12C5 D2 D6 12    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
2301   12C8 B7          >            OR      A                       ; silent PCM ?              ' 4     |
2301   12C9 CA DA 12    >            JP      Z, .play_new            ; always play               ' 10    | 14 (69)
2301   12CC 3E 05       >            LD      A, w            ; 7-2
2301   12CE 3D          >            DEC     A               ; 4
2301   12CF 20 FD       >            JR      NZ, .loop       ; 12
2301   12D1 18 00       >            JR      .loop
2301   12D3 C3 EB 12    >            JP      .end                    ;                           ' 10    | 88 (173)
2301   12D6 00          >            NOP                             ;                           ' 4     |
2301   12D7 C3 DA 12    >            JP      .play_new               ; sync                      ' 10    | 14 (69)
2301   12DA 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2301   12DB 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2301   12DD 6F          >            LD      L, A                    ;                           ' 4     |
2301   12DE 29          >            ADD     HL, HL                  ;                           ' 6     | 33 (109)
2301   12DF 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     |
2301   12E0 11 1E 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    |
2301   12E3 ED A0       >            LDI                             ; copy params               ' 16    |
2301   12E5 ED A0       >            LDI                             ;                           ' 16    | 64 (173)
2301   12E7 ED A0       >            LDI                             ;                           ' 16    |
2301   12E9 ED A0       >            LDI                             ;                           ' 16    |
2302   12EB                         sampleOutput                ; *** sample output ****    ' 36    | (36+37)
2302   12EB D9          >            EXX                     ;                           ' 4     | 4
2302   12EC 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2302   12ED 03          >            INC     BC              ; increment read address    ' 6     |
2302   12EE CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2302   12F0 12          >            LD      (DE), A         ; play sample               ' 7     |
2302   12F1 D9          >            EXX                     ;                           ' 4     | (36)
2303   12F2 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    | (83)
2304   12F5                                                     ; +3 cycles here, ignore
2305   12F5             
2306   12F5             .chk_pcm2
2307   12F5 CB 56                   BIT     CH2_SFT, (HL)       ; play PCM2 command ?       ' 12    |
2308   12F7 CA 3A 13                JP      Z, .chk_pcm3        ;                           ' 10    | 22 (102)
2309   12FA             
2310   12FA CB 96                   RES     CH2_SFT, (HL)       ; clear command             ' 15    |
2311   12FC 2C                      INC     L                   ;                           ' 4     |
2312   12FD 2C                      INC     L                   ; HL point on status        ' 4     | 38 (140)
2313   12FE CB D6                   SET     CH2_SFT, (HL)       ; set play status           ' 15    |
2314   1300             
2315   1300                         handlePCMCommand 2          ; handle play PCM command   ' 173   | (313)
2315   1300 ED 4B 0C 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2315   1304 21 24 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2315   1307 79          >            LD      A, C                    ; A = new prio              ' 4     |
2315   1308 BE          >            CP      (HL)                    ; compare to old prio       ' 7     |
2315   1309 78          >            LD      A, B                    ; A = SFX id                ' 4     | 25 (55)
2315   130A D2 1B 13    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
2315   130D B7          >            OR      A                       ; silent PCM ?              ' 4     |
2315   130E CA 1F 13    >            JP      Z, .play_new            ; always play               ' 10    | 14 (69)
2315   1311 3E 05       >            LD      A, w            ; 7-2
2315   1313 3D          >            DEC     A               ; 4
2315   1314 20 FD       >            JR      NZ, .loop       ; 12
2315   1316 18 00       >            JR      .loop
2315   1318 C3 30 13    >            JP      .end                    ;                           ' 10    | 88 (173)
2315   131B 00          >            NOP                             ;                           ' 4     |
2315   131C C3 1F 13    >            JP      .play_new               ; sync                      ' 10    | 14 (69)
2315   131F 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2315   1320 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2315   1322 6F          >            LD      L, A                    ;                           ' 4     |
2315   1323 29          >            ADD     HL, HL                  ;                           ' 6     | 33 (109)
2315   1324 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     |
2315   1325 11 26 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    |
2315   1328 ED A0       >            LDI                             ; copy params               ' 16    |
2315   132A ED A0       >            LDI                             ;                           ' 16    | 64 (173)
2315   132C ED A0       >            LDI                             ;                           ' 16    |
2315   132E ED A0       >            LDI                             ;                           ' 16    |
2316   1330                         sampleOutput                ; *** sample output ****    ' 36    | (36+59)
2316   1330 D9          >            EXX                     ;                           ' 4     | 4
2316   1331 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2316   1332 03          >            INC     BC              ; increment read address    ' 6     |
2316   1333 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2316   1335 12          >            LD      (DE), A         ; play sample               ' 7     |
2316   1336 D9          >            EXX                     ;                           ' 4     | (36)
2317   1337 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    | (105)
2318   133A                                                     ; +3 cycles here, ignore
2319   133A             
2320   133A             .chk_pcm3
2321   133A CB 5E                   BIT     CH3_SFT, (HL)       ; play PCM3 command ?       ' 12    |
2322   133C CA 7D 13                JP      Z, frame_end        ;                           ' 10    | 22 (124)
2323   133F             
2324   133F CB 9E                   RES     CH3_SFT, (HL)       ; clear command             ' 15    |
2325   1341 2C                      INC     L                   ;                           ' 4     |
2326   1342 2C                      INC     L                   ; HL point on status        ' 4     | 38 (162)
2327   1343 CB DE                   SET     CH3_SFT, (HL)       ; set play status           ' 15    |
2328   1345             
2329   1345                         handlePCMCommand 3          ; handle play PCM command   ' 173   | (335)
2329   1345 ED 4B 0E 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2329   1349 21 2C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2329   134C 79          >            LD      A, C                    ; A = new prio              ' 4     |
2329   134D BE          >            CP      (HL)                    ; compare to old prio       ' 7     |
2329   134E 78          >            LD      A, B                    ; A = SFX id                ' 4     | 25 (55)
2329   134F D2 60 13    >            JP      NC, .play_new_wait      ; >= old prio --> play      ' 10    |
2329   1352 B7          >            OR      A                       ; silent PCM ?              ' 4     |
2329   1353 CA 64 13    >            JP      Z, .play_new            ; always play               ' 10    | 14 (69)
2329   1356 3E 05       >            LD      A, w            ; 7-2
2329   1358 3D          >            DEC     A               ; 4
2329   1359 20 FD       >            JR      NZ, .loop       ; 12
2329   135B 18 00       >            JR      .loop
2329   135D C3 75 13    >            JP      .end                    ;                           ' 10    | 88 (173)
2329   1360 00          >            NOP                             ;                           ' 4     |
2329   1361 C3 64 13    >            JP      .play_new               ; sync                      ' 10    | 14 (69)
2329   1364 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2329   1365 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2329   1367 6F          >            LD      L, A                    ;                           ' 4     |
2329   1368 29          >            ADD     HL, HL                  ;                           ' 6     | 33 (109)
2329   1369 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     |
2329   136A 11 2E 01    >            LD      DE, PCM_ADDR+(ch*8)     ; DE point on PCM info      ' 10    |
2329   136D ED A0       >            LDI                             ; copy params               ' 16    |
2329   136F ED A0       >            LDI                             ;                           ' 16    | 64 (173)
2329   1371 ED A0       >            LDI                             ;                           ' 16    |
2329   1373 ED A0       >            LDI                             ;                           ' 16    |
2330   1375                         sampleOutput                ; *** sample output ****    ' 36    | (36+81)
2330   1375 D9          >            EXX                     ;                           ' 4     | 4
2330   1376 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2330   1377 03          >            INC     BC              ; increment read address    ' 6     |
2330   1378 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2330   137A 12          >            LD      (DE), A         ; play sample               ' 7     |
2330   137B D9          >            EXX                     ;                           ' 4     | (36)
2331   137C                         wait7                       ; sync                      ' 7     | (124)
2331   137C 1A          >            LD      A, (DE)
2332   137D             
2333   137D             
2334   137D             ; frame done (we should be <= 0xE8 to respect frame time here)
2335   137D             ; So median (X+Y+Z) should be <= 0x2E (<= 46) else we are running out of time !
2336   137D             ; ----------------------------------------------------------------------------
2337   137D             
2338   137D             ; $BA+X+Y+Z
2339   137D             frame_end                               ;                       ' 124
2340   137D             
2341   137D                         wait39                      ; sync                  ' 39    | (163)
2341   137D ED 4F       >            LD      R, A
2341   137F ED 4F       >            LD      R, A
2341   1381 ED 4F       >            LD      R, A
2341   1383 18 00       >            JR      .loop
2342   1385             
2343   1385 FD 7D                   LD      A, IYL              ;                       ' 8     |
2344   1387 32 62 01                LD      (VINT_OVER), A      ; keep trace of it      ' 13    |
2345   138A B7                      OR      A                   ; vint happened ?       ' 4     | 35 (198)
2346   138B C2 9F 13                JP      NZ, .vint_happened  ; go to ext command     ' 10    |
2347   138E             
2348   138E ED 5B 38 01             LD      DE, (WRITEBUF)      ; DE = write buf        ' 20    |
2349   1392                         compareReadWrite            ;                       ' 16    | 46 (244)
2349   1392 D9          >            EXX                     ;                           ' 4     |
2349   1393 78          >            LD      A, B            ; A = read buffer high      ' 4     |
2349   1394 D9          >            EXX                     ;                           ' 4     | 16
2349   1395 BA          >            CP      D               ; compare write buffer high ' 4     |
2350   1396 CA 9C 13                JP      Z, .wait            ; wait until wb != rb   ' 10    |
2351   1399             
2352   1399 C3 CA 02                JP      main_loop           ; process next frame    ' 10    | (254)
2353   139C             
2354   139C             .wait
2355   139C C3 A9 13                JP      free_time           ; we have free time     ' 10    | (254)
2356   139F             
2357   139F             .vint_happened                          ;                       ' 198
2358   139F                         wait46                      ; sync                  ' 46    |
2358   139F 3E 02       >            LD      A, w            ; 7-2
2358   13A1 3D          >            DEC     A               ; 4
2358   13A2 20 FD       >            JR      NZ, .loop       ; 12
2358   13A4 18 00       >            JR      .loop
2359   13A6 C3 C3 07                JP      prepare_xgm         ; continue xgm process  ' 10    | 56 (254)
2360   13A9             
2361   13A9             
2362   13A9             ; free time here
2363   13A9             ; --------------
2364   13A9             ; $BB+X+Y+Z
2365   13A9             free_time
2366   13A9                         sampleOutput                ; *** sample output *** ' 36    | (36)
2366   13A9 D9          >            EXX                     ;                           ' 4     | 4
2366   13AA 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2366   13AB 03          >            INC     BC              ; increment read address    ' 6     |
2366   13AC CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2366   13AE 12          >            LD      (DE), A         ; play sample               ' 7     |
2366   13AF D9          >            EXX                     ;                           ' 4     | (36)
2367   13B0             
2368   13B0                         wait110                     ; sync                  ' 110   | (146)
2368   13B0 3E 06       >            LD      A, w            ; 7-2
2368   13B2 3D          >            DEC     A               ; 4
2368   13B3 20 FD       >            JR      NZ, .loop       ; 12
2368   13B5 18 00       >            JR      .loop
2369   13B7             
2370   13B7 3A 63 01                LD      A, (IDLE_LOOP)      ;                       ' 13    |
2371   13BA 3C                      INC     A                   ; increment idle loop   ' 4     | 30 (176)
2372   13BB 32 63 01                LD      (IDLE_LOOP), A      ;                       ' 13    |
2373   13BE             
2374   13BE FD 7D                   LD      A, IYL              ;                       ' 8     |
2375   13C0 B7                      OR      A                   ; vint happened ?       ' 4     | 22 (198)
2376   13C1 C2 D5 13                JP      NZ, .vint_happened  ; go to ext command     ' 10    |
2377   13C4             
2378   13C4 ED 5B 38 01             LD      DE, (WRITEBUF)      ; DE = write buf        ' 20    |
2379   13C8                         compareReadWrite            ;                       ' 16    | 46 (244)
2379   13C8 D9          >            EXX                     ;                           ' 4     |
2379   13C9 78          >            LD      A, B            ; A = read buffer high      ' 4     |
2379   13CA D9          >            EXX                     ;                           ' 4     | 16
2379   13CB BA          >            CP      D               ; compare write buffer high ' 4     |
2380   13CC CA D2 13                JP      Z, .wait            ; wait until wb != rb   ' 10    |
2381   13CF             
2382   13CF C3 CA 02                JP      main_loop           ; process next frame    ' 10    | (254)
2383   13D2             
2384   13D2             .wait
2385   13D2 C3 A9 13                JP      free_time           ; we have free time     ' 10    | (254)
2386   13D5             
2387   13D5             .vint_happened                          ;                       ' 198
2388   13D5                         wait46                      ; sync                  ' 46    |
2388   13D5 3E 02       >            LD      A, w            ; 7-2
2388   13D7 3D          >            DEC     A               ; 4
2388   13D8 20 FD       >            JR      NZ, .loop       ; 12
2388   13DA 18 00       >            JR      .loop
2389   13DC C3 C3 07                JP      prepare_xgm         ; continue xgm process  ' 10    | 56 (254)
2390   13DF             
2391   13DF             
2392   13DF             
2393   13DF             ; ##############################  functions  ################################
2394   13DF             
2395   13DF                         INCLUDE "z80_fct.i80"   ; basic functions
0001+  13DF             ; ########################### function #############################
0002+  13DF             
0003+  13DF             ; initDAC
0004+  13DF             ; -----------
0005+  13DF             ; HL <-  YMPORT0
0006+  13DF             ; DE <-  $2A80
0007+  13DF             ;
0008+  13DF             ; prepare DAC for output
0009+  13DF             
0010+  13DF             initDAC
0011+  13DF 11 80 2B                LD      DE, $2B80
0012+  13E2 CD EC 13                CALL    writeYM0        ; enable DAC
0013+  13E5 11 80 2A                LD      DE, $2A80
0014+  13E8 CD EC 13                CALL    writeYM0        ; DAC data to silent
0015+  13EB C9                      RET
0016+  13EC             
0017+  13EC             ; writeYM0 / writeYM1
0018+  13EC             ; -------------------
0019+  13EC             ; D   -> address
0020+  13EC             ; E   -> value
0021+  13EC             ; HL <-  YMPORT0 / YMPORT2
0022+  13EC             ;
0023+  13EC             ; write to YM2612
0024+  13EC             
0025+  13EC             writeYM0
0026+  13EC 21 00 40                LD      HL, YMPORT0
0027+  13EF                         writeYM
0027+  13EF CB 7E       >            BIT     7, (HL)         ; test YM not busy
0027+  13F1 20 FC       >            JR      NZ, .wait0
0027+  13F3 72          >            LD      (HL), D         ; write address
0027+  13F4 CB 7E       >            BIT     7, (HL)         ; test YM not busy
0027+  13F6 20 FC       >            JR      NZ, .wait1
0027+  13F8 2C          >            INC     L
0027+  13F9 73          >            LD      (HL), E         ; write value
0028+  13FA C9                      RET
0029+  13FB             writeYM1
0030+  13FB 21 02 40                LD      HL, YMPORT2
0031+  13FE                         writeYM
0031+  13FE CB 7E       >            BIT     7, (HL)         ; test YM not busy
0031+  1400 20 FC       >            JR      NZ, .wait0
0031+  1402 72          >            LD      (HL), D         ; write address
0031+  1403 CB 7E       >            BIT     7, (HL)         ; test YM not busy
0031+  1405 20 FC       >            JR      NZ, .wait1
0031+  1407 2C          >            INC     L
0031+  1408 73          >            LD      (HL), E         ; write value
0032+  1409 C9                      RET
0033+  140A             
2396   140A             
2397   140A             
2398   140A             ; prepareXGMPCMCom
2399   140A             ; ----------------
2400   140A             ;              B   -> PCM id
2401   140A             ;              A   -> PCM id
2402   140A             ; XGM data ->  DE  -> XGM data
2403   140A             ;
2404   140A             ; prepare the XGM PCM command
2405   140A             ; = 1 sample + 46 cycles
2406   140A             
2407   140A             prepareXGMPCMCom                        ;                       ' 114
2408   140A                         wait118                     ; sync                  ' 118   | (232)
2408   140A 3E 07       >            LD      A, w            ; 7-2
2408   140C 3D          >            DEC     A               ; 4
2408   140D 20 FD       >            JR      NZ, .loop       ; 12
2408   140F 00          >            NOP
2409   1410             
2410   1410 1A                      LD      A, (DE)             ;                       ' 7     |
2411   1411 1C                      INC     E                   ; next command          ' 4     |
2412   1412 E6 3F                   AND     $3F                 ; A = PCM id            ' 7     | 22 (254)
2413   1414 47                      LD      B, A                ; B = PCM id            ' 4     |
2414   1415             
2415   1415                         sampleOutput                ;                       ' 36    |
2415   1415 D9          >            EXX                     ;                           ' 4     | 4
2415   1416 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2415   1417 03          >            INC     BC              ; increment read address    ' 6     |
2415   1418 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2415   141A 12          >            LD      (DE), A         ; play sample               ' 7     |
2415   141B D9          >            EXX                     ;                           ' 4     | (36)
2416   141C             
2417   141C C9                      RET                         ; done                  ' 10    | (46)
2418   141D             
2419   141D             
2420   141D             
2421   141D             ; loadState
2422   141D             ; ---------
2423   141D             ;     ?       ->  HL  -> ?
2424   141D             ;     ?       ->  BC  -> ?
2425   141D             ; reg source  ->  DE  -> ?
2426   141D             ;
2427   141D             ; load the YM and PSG state
2428   141D             ; = 8 samples + 140 cycles
2429   141D             
2430   141D             loadState
2431   141D             
2432   141D                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2432   141D D9          >            EXX                     ;                           ' 4     | 4
2432   141E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2432   141F 03          >            INC     BC              ; increment read address    ' 6     |
2432   1420 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2432   1422 12          >            LD      (DE), A         ; play sample               ' 7     |
2432   1423 D9          >            EXX                     ;                           ' 4     | (36)
2433   1424             
2434   1424             
2435   1424 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0      ' 10    |
2436   1427 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1      ' 10    | 20 (56)
2437   142A             
2438   142A CD 4C 14                CALL    loadYMState         ; load YM state             ' 188+  | (244)
2439   142D             
2440   142D 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2      ' 10    |
2441   1430 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3      ' 10    | 20 (254+10)
2442   1433             
2443   1433                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+10)
2443   1433 D9          >            EXX                     ;                           ' 4     | 4
2443   1434 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
2443   1436 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2443   1437 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2443   1438 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2443   143A 12          >            LD      (DE), A         ; play sample               ' 7     |
2443   143B D9          >            EXX                     ;                           ' 4     | (46)
2444   143C             
2445   143C CD 4C 14                CALL    loadYMState         ; load YM state             ' 188+  | (244)
2446   143F             
2447   143F 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG           ' 10    | (254)
2448   1442             
2449   1442                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2449   1442 D9          >            EXX                     ;                           ' 4     | 4
2449   1443 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2449   1444 03          >            INC     BC              ; increment read address    ' 6     |
2449   1445 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2449   1447 12          >            LD      (DE), A         ; play sample               ' 7     |
2449   1448 D9          >            EXX                     ;                           ' 4     | (36)
2450   1449             
2451   1449 C3 11 15                JP      loadPSGState        ; load PSG state            ' 10+94 | (140)
2452   144C             
2453   144C             
2454   144C             ; loadYMState
2455   144C             ; -----------
2456   144C             ; YMPORT0/2   ->  HL
2457   144C             ; YMPORT1/3   ->  BC
2458   144C             ; reg source  ->  DE  -> ?
2459   144C             ;
2460   144C             ; load the YM RR state
2461   144C             ; = 4 samples (244 cycles)
2462   144C             
2463   144C             loadYMState                             ;                           ' 56
2464   144C             
2465   144C                         waitYMReady                 ; wait YM to be ready       ' 22    |
2465   144C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2465   144E C2 4C 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2466   1451 36 80                   LD      (HL), $80           ; set reg num to YM         ' 10    |
2467   1453 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2468   1454 1C                      INC     E                   ; next                      ' 4     | 54 (110)
2469   1455                         wait4                       ; wait YM to be ready       ' 4     |
2469   1455 00          >            NOP
2470   1456 02                      LD      (BC), A             ; restore state             ' 7     |
2471   1457             
2472   1457                         wait8                       ; let busy flag to update   ' 8     |
2472   1457 00          >            NOP
2472   1458 00          >            NOP
2473   1459                         waitYMReady                 ; wait YM to be ready       ' 22    |
2473   1459 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2473   145B C2 59 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2474   145E 36 81                   LD      (HL), $81           ; set reg num to YM         ' 10    |
2475   1460 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2476   1461 1C                      INC     E                   ; next                      ' 4     |
2477   1462                         wait4                       ; wait YM to be ready       ' 4     |
2477   1462 00          >            NOP
2478   1463 02                      LD      (BC), A             ; restore state             ' 7     |
2479   1464             
2480   1464                         wait8                       ; let busy flag to update   ' 8     |
2480   1464 00          >            NOP
2480   1465 00          >            NOP
2481   1466                         waitYMReady                 ; wait YM to be ready       ' 22    |
2481   1466 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2481   1468 C2 66 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2482   146B 36 82                   LD      (HL), $82           ; set reg num to YM         ' 10    |
2483   146D 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2484   146E 1C                      INC     E                   ; next                      ' 4     |
2485   146F                         wait4                       ; wait YM to be ready       ' 4     |
2485   146F 00          >            NOP
2486   1470 02                      LD      (BC), A             ; restore state             ' 7     |
2487   1471             
2488   1471                         wait8                       ; let busy flag to update   ' 8     |
2488   1471 00          >            NOP
2488   1472 00          >            NOP
2489   1473                         waitYMReady                 ; wait YM to be ready       ' 22    | 30 (254+10)
2489   1473 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2489   1475 C2 73 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2490   1478             
2491   1478                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+10)
2491   1478 D9          >            EXX                     ;                           ' 4     | 4
2491   1479 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
2491   147B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2491   147C 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2491   147D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2491   147F 12          >            LD      (DE), A         ; play sample               ' 7     |
2491   1480 D9          >            EXX                     ;                           ' 4     | (46)
2492   1481             
2493   1481                         waitYMReady                 ; wait YM to be ready       ' 22    |
2493   1481 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2493   1483 C2 81 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2494   1486 36 84                   LD      (HL), $84           ; set reg num to YM         ' 10    |
2495   1488 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2496   1489 1C                      INC     E                   ; next                      ' 4     | 54 (110)
2497   148A                         wait4                       ; wait YM to be ready       ' 4     |
2497   148A 00          >            NOP
2498   148B 02                      LD      (BC), A             ; restore state             ' 7     |
2499   148C             
2500   148C                         wait8                       ; let busy flag to update   ' 8     |
2500   148C 00          >            NOP
2500   148D 00          >            NOP
2501   148E                         waitYMReady                 ; wait YM to be ready       ' 22    |
2501   148E CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2501   1490 C2 8E 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2502   1493 36 85                   LD      (HL), $85           ; set reg num to YM         ' 10    |
2503   1495 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2504   1496 1C                      INC     E                   ; next                      ' 4     |
2505   1497                         wait4                       ; wait YM to be ready       ' 4     |
2505   1497 00          >            NOP
2506   1498 02                      LD      (BC), A             ; restore state             ' 7     |
2507   1499             
2508   1499                         wait8                       ; let busy flag to update   ' 8     |
2508   1499 00          >            NOP
2508   149A 00          >            NOP
2509   149B                         waitYMReady                 ; wait YM to be ready       ' 22    |
2509   149B CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2509   149D C2 9B 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2510   14A0 36 86                   LD      (HL), $86           ; set reg num to YM         ' 10    |
2511   14A2 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2512   14A3 1C                      INC     E                   ; next                      ' 4     |
2513   14A4                         wait4                       ; wait YM to be ready       ' 4     |
2513   14A4 00          >            NOP
2514   14A5 02                      LD      (BC), A             ; restore state             ' 7     |
2515   14A6             
2516   14A6                         wait8                       ; let busy flag to update   ' 8     |
2516   14A6 00          >            NOP
2516   14A7 00          >            NOP
2517   14A8                         waitYMReady                 ; wait YM to be ready       ' 22    | 30 (254+10)
2517   14A8 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2517   14AA C2 A8 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2518   14AD             
2519   14AD                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+10)
2519   14AD D9          >            EXX                     ;                           ' 4     | 4
2519   14AE 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
2519   14B0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2519   14B1 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2519   14B2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2519   14B4 12          >            LD      (DE), A         ; play sample               ' 7     |
2519   14B5 D9          >            EXX                     ;                           ' 4     | (46)
2520   14B6             
2521   14B6                         waitYMReady                 ; wait YM to be ready       ' 22    |
2521   14B6 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2521   14B8 C2 B6 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2522   14BB 36 88                   LD      (HL), $88           ; set reg num to YM         ' 10    |
2523   14BD 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2524   14BE 1C                      INC     E                   ; next                      ' 4     | 54 (110)
2525   14BF                         wait4                       ; wait YM to be ready       ' 4     |
2525   14BF 00          >            NOP
2526   14C0 02                      LD      (BC), A             ; restore state             ' 7     |
2527   14C1             
2528   14C1                         wait8                       ; let busy flag to update   ' 8     |
2528   14C1 00          >            NOP
2528   14C2 00          >            NOP
2529   14C3                         waitYMReady                 ; wait YM to be ready       ' 22    |
2529   14C3 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2529   14C5 C2 C3 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2530   14C8 36 89                   LD      (HL), $89           ; set reg num to YM         ' 10    |
2531   14CA 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2532   14CB 1C                      INC     E                   ; next                      ' 4     |
2533   14CC                         wait4                       ; wait YM to be ready       ' 4     |
2533   14CC 00          >            NOP
2534   14CD 02                      LD      (BC), A             ; restore state             ' 7     |
2535   14CE             
2536   14CE                         wait8                       ; let busy flag to update   ' 8     |
2536   14CE 00          >            NOP
2536   14CF 00          >            NOP
2537   14D0                         waitYMReady                 ; wait YM to be ready       ' 22    |
2537   14D0 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2537   14D2 C2 D0 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2538   14D5 36 8A                   LD      (HL), $8A           ; set reg num to YM         ' 10    |
2539   14D7 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2540   14D8 1C                      INC     E                   ; next                      ' 4     |
2541   14D9                         wait4                       ; wait YM to be ready       ' 4     |
2541   14D9 00          >            NOP
2542   14DA 02                      LD      (BC), A             ; restore state             ' 7     |
2543   14DB             
2544   14DB                         wait8                       ; let busy flag to update   ' 8     |
2544   14DB 00          >            NOP
2544   14DC 00          >            NOP
2545   14DD                         waitYMReady                 ; wait YM to be ready       ' 22    | 30 (254+10)
2545   14DD CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2545   14DF C2 DD 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2546   14E2             
2547   14E2                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+10)
2547   14E2 D9          >            EXX                     ;                           ' 4     | 4
2547   14E3 36 2A       >            LD      (HL), 0x2A      ; prepare DAC write         ' 10    |
2547   14E5 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2547   14E6 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2547   14E7 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2547   14E9 12          >            LD      (DE), A         ; play sample               ' 7     |
2547   14EA D9          >            EXX                     ;                           ' 4     | (46)
2548   14EB             
2549   14EB                         waitYMReady                 ; wait YM to be ready       ' 22    |
2549   14EB CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2549   14ED C2 EB 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2550   14F0 36 8C                   LD      (HL), $8C           ; set reg num to YM         ' 10    |
2551   14F2 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2552   14F3 1C                      INC     E                   ; next                      ' 4     | 54 (110)
2553   14F4                         wait4                       ; wait YM to be ready       ' 4     |
2553   14F4 00          >            NOP
2554   14F5 02                      LD      (BC), A             ; restore state             ' 7     |
2555   14F6             
2556   14F6                         wait8                       ; let busy flag to update   ' 8     |
2556   14F6 00          >            NOP
2556   14F7 00          >            NOP
2557   14F8                         waitYMReady                 ; wait YM to be ready       ' 22    |
2557   14F8 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2557   14FA C2 F8 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2558   14FD 36 8D                   LD      (HL), $8D           ; set reg num to YM         ' 10    |
2559   14FF 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2560   1500 1C                      INC     E                   ; next                      ' 4     |
2561   1501                         wait4                       ; wait YM to be ready       ' 4     |
2561   1501 00          >            NOP
2562   1502 02                      LD      (BC), A             ; restore state             ' 7     |
2563   1503             
2564   1503                         wait8                       ; let busy flag to update   ' 8     |
2564   1503 00          >            NOP
2564   1504 00          >            NOP
2565   1505                         waitYMReady                 ; wait YM to be ready       ' 22    |
2565   1505 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2565   1507 C2 05 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2566   150A 36 8E                   LD      (HL), $8E           ; set reg num to YM         ' 10    |
2567   150C 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2568   150D 1C                      INC     E                   ; next                      ' 4     |
2569   150E                         wait4                       ; wait YM to be ready       ' 4     |
2569   150E 00          >            NOP
2570   150F 02                      LD      (BC), A             ; restore state             ' 7     |
2571   1510             
2572   1510 C9                      RET                         ; done                      ' 10    | (244)
2573   1511             
2574   1511             
2575   1511             ; loadPSGState
2576   1511             ; ------------
2577   1511             ; PSGPORT     ->  HL
2578   1511             ; reg source  ->  DE  -> ?
2579   1511             ;
2580   1511             ; load the PSG env state
2581   1511             ; 94 cycles
2582   1511             
2583   1511             loadPSGState
2584   1511             
2585   1511 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2586   1512 1C                      INC     E                   ; next                      ' 4     | (21)
2587   1513 77                      LD      (HL), A             ; PSG restore channel 0 env ' 10    |
2588   1514             
2589   1514 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2590   1515 1C                      INC     E                   ; next                      ' 4     | 21 (42)
2591   1516 77                      LD      (HL), A             ; PSG restore channel 1 env ' 10    |
2592   1517             
2593   1517 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2594   1518 1C                      INC     E                   ; next                      ' 4     | 21 (63)
2595   1519 77                      LD      (HL), A             ; PSG restore channel 2 env ' 10    |
2596   151A             
2597   151A 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2598   151B 1C                      INC     E                   ; next                      ' 4     | 21 (84)
2599   151C 77                      LD      (HL), A             ; PSG restore channel 3 env ' 10    |
2600   151D             
2601   151D C9                      RET                         ; done                      ' 10    | (94)
2602   151E             
2603   151E             
2604   151E             ; ##############################  jump table  ################################
2605   151E             
2606   151E 00                      BLOCK   $1600-$
2607   1600             
2608   1600 1D 0A                   DW      com_next_frame                                                                  ; 00
2609   1602             
2610   1602                         DW      com_null, com_null, com_null                                                    ; 01-03
2610   1602 591159115911
2611   1608                         DW      com_null, com_null, com_null, com_null                                          ; 04-07
2611   1608 5911591159115911
2612   1610                         DW      com_null, com_null, com_null, com_null                                          ; 08-0B
2612   1610 5911591159115911
2613   1618                         DW      com_null, com_null, com_null, com_null                                          ; 0C-0F
2613   1618 5911591159115911
2614   1620             
2615   1620                         DW      com_psg_tone_w0, com_psg_tone_w1, com_psg_tone_w2, com_psg_tone_w3              ; 10-13
2615   1620 200A2D0A3B0A480A
2616   1628                         DW      com_psg_tone_w4, com_psg_tone_w5, com_psg_tone_w6, com_psg_tone_w7              ; 14-17
2616   1628 580A640A720A7C0A
2617   1630                         DW      com_psg_env_w0, com_psg_env_w1, com_psg_env_w2, com_psg_env_w3                  ; 18-1B
2617   1630 9D0AB00ABC0AD50A
2618   1638                         DW      com_null, com_null, com_null, com_null                                          ; 1C-1F
2618   1638 5911591159115911
2619   1640             
2620   1640                         DW      com_ym_port0_w0, com_ym_port0_w1, com_ym_port0_w2, com_ym_port0_w3              ; 20-23
2620   1640 210B320B3B0B4D0B
2621   1648                         DW      com_ym_port0_w4, com_ym_port0_w5, com_ym_port0_w6, com_ym_port0_w7              ; 24-27
2621   1648 560B660B780B810B
2622   1650                         DW      com_ym_port0_w8, com_ym_port0_w9, com_ym_port0_wA, com_ym_port0_wB              ; 28-2B
2622   1650 910BA30BAC0BBC0B
2623   1658                         DW      com_ym_port0_wC, com_ym_port0_wD, com_ym_port0_wE, com_ym_port0_wF              ; 2C-2F
2623   1658 CE0BD70BE70BF80B
2624   1660             
2625   1660                         DW      com_ym_port2_w0, com_ym_port2_w1, com_ym_port2_w2, com_ym_port2_w3              ; 30-33
2625   1660 010C120C1B0C2D0C
2626   1668                         DW      com_ym_port2_w4, com_ym_port2_w5, com_ym_port2_w6, com_ym_port2_w7              ; 34-37
2626   1668 360C460C580C610C
2627   1670                         DW      com_ym_port2_w8, com_ym_port2_w9, com_ym_port2_wA, com_ym_port2_wB              ; 38-3B
2627   1670 710C830C8C0C9C0C
2628   1678                         DW      com_ym_port2_wC, com_ym_port2_wD, com_ym_port2_wE, com_ym_port2_wF              ; 3C-3F
2628   1678 AE0CB70CC70CD80C
2629   1680             
2630   1680                         DW      com_ym_key_w0, com_ym_key_w1, com_ym_key_w2, com_ym_key_w3                      ; 40-43
2630   1680 190E290E350E460E
2631   1688                         DW      com_ym_key_w4, com_ym_key_w5, com_null, com_null                                ; 44-47
2631   1688 580E670E59115911
2632   1690                         DW      com_null, com_null, com_null, com_null                                          ; 48-4B
2632   1690 5911591159115911
2633   1698                         DW      com_null, com_null, com_null, com_null                                          ; 4C-4F
2633   1698 5911591159115911
2634   16A0             
2635   16A0                         DW      com_pcm_p0_ch0, com_pcm_p0_ch1, com_pcm_p0_ch2, com_pcm_p0_ch3                  ; 50-53
2635   16A0 DF0EF30E070F1B0F
2636   16A8                         DW      com_pcm_p1_ch0, com_pcm_p1_ch1, com_pcm_p1_ch2, com_pcm_p1_ch3                  ; 54-57
2636   16A8 E40EF80E0C0F200F
2637   16B0                         DW      com_pcm_p2_ch0, com_pcm_p2_ch1, com_pcm_p2_ch2, com_pcm_p2_ch3                  ; 58-5B
2637   16B0 E90EFD0E110F250F
2638   16B8                         DW      com_pcm_p3_ch0, com_pcm_p3_ch1, com_pcm_p3_ch2, com_pcm_p3_ch3                  ; 5C-5F
2638   16B8 EE0E020F160F2A0F
2639   16C0             
2640   16C0                         DW      com_state_w0, com_state_w1, com_state_w2, com_state_w3                          ; 60-63
2640   16C0 0B10151022103110
2641   16C8                         DW      com_state_w4, com_state_w5, com_state_w6, com_state_w7                          ; 64-67
2641   16C8 391052105E106B10
2642   16D0                         DW      com_state_w8, com_state_w9, com_state_wA, com_state_wB                          ; 68-6B
2642   16D0 771083108D10A810
2643   16D8                         DW      com_state_wC, com_state_wD, com_state_wE, com_state_wF                          ; 6C-6F
2643   16D8 B410C110CD10D910
2644   16E0             
2645   16E0                         DW      com_null, com_null, com_null, com_null                                          ; 70-74
2645   16E0 5911591159115911
2646   16E8                         DW      com_null, com_null, com_null, com_null                                          ; 74-77
2646   16E8 5911591159115911
2647   16F0                         DW      com_null, com_null, com_null, com_null                                          ; 78-7B
2647   16F0 5911591159115911
2648   16F8 59 11 59 11             DW      com_null, com_null                                                              ; 7C-7D
2649   16FC             
2650   16FC 65 11                   DW      com_loop                                                                        ; 7E
2651   16FE 86 11                   DW      com_end                                                                         ; 7F
2652   1700             
2653   1700             
2654   1700                         END
