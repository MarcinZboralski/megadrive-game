0001   0000             ; eXtended Genesis Music (XGM) Z80 driver - Stéphane Dallongeville @2014
0002   0000             ;
0003   0000             ; XGM is a music format dedicated to the Sega Megadrive/Genesis system.
0004   0000             ; It has been designed to minimize CPU decoding resource and keep reasonable data size (should be smaller than VGM file).
0005   0000             ; It supports both FM and PSG chip and allow up to 4 PCM channels (8 bits signed at 14 Khz) to be played at once.
0006   0000             ; These 4 PCM channels are obtained by software mixing in the FM DAC in replacement of the 6th FM channel (so at best you can have 5FM + 4PCM + 4PSG = 13 channels)
0007   0000             ;
0008   0000             ; The driver supports playing SFX in PCM format with 16 priority levels and also allow PSG channel reservation so you can use them from the 68000 to play SFX or whatever you want.
0009   0000             ; PCM samples can be >32KB, the only restriction is that they should have their address and size aligned to 256 bytes.
0010   0000             ;
0011   0000             ; we have to do 254 cycles per sample output which consist of :
0012   0000             ; - bufferize 4 PCM samples from the rom and mix them in write buffer
0013   0000             ; - read 1 sample from read buffer and output it to the DAC
0014   0000             ; - handle loop
0015   0000             ; - bufferize XGM data / parse and apply XGM command / handle extern command
0016   0000             ;
0017   0000             ; register usage :
0018   0000             ; HL  = sample source (in ROM)
0019   0000             ; DE  = write buffer / XGM buffer
0020   0000             ; BC  = counter
0021   0000             ; B = $80 (used for overflow and sample unsign)
0022   0000             ; IYL = vint pending counter - 1
0023   0000             ;   --> $FF means no vint pending
0024   0000             ;   --> $00 means 1 vint pending and so one XGM frame to process (in time)
0025   0000             ;   --> $01 means 2 vints pending and so 2 XGM frames to process (late)
0026   0000             ; IYH = temp value
0027   0000             ; HL' = YMPORT1
0028   0000             ; BC' = read buffer
0029   0000             
0030   0000             ; ###########################      define      ##############################
0031   0000             
0032   0000                         INCLUDE "z80_def.i80"   ; basic definitions
0001+  0000             ; ############################ define ##############################
0002+  0000             
0003+  0000             YMPORT0     EQU     $4000           ; YM2612 port 0
0004+  0000             YMPORT1     EQU     $4001           ; YM2612 port 1
0005+  0000             YMPORT2     EQU     $4002           ; YM2612 port 2
0006+  0000             YMPORT3     EQU     $4003           ; YM2612 port 3
0007+  0000             VDPSTATUS_H EQU     $7F04           ; VDP status port high
0008+  0000             VDPSTATUS_L EQU     $7F05           ; VDP status port low
0009+  0000             VCOUNTER    EQU     $7F08           ; V counter
0010+  0000             HCOUNTER    EQU     $7F09           ; H counter
0011+  0000             PSGPORT     EQU     $7F11           ; PSG port
0012+  0000             BANKREG     EQU     $6000           ; bank register
0013+  0000             
0014+  0000             COMPLAY_SFT EQU     0               ; start play command
0015+  0000             COMSTOP_SFT EQU     4               ; stop play command
0016+  0000             
0017+  0000             STATPLAY_SFT  EQU   0               ; playing status
0018+  0000             STATREADY_SFT EQU   7               ; driver ready status
0019+  0000             
0020+  0000             CH0_SFT     EQU     0               ; channel 0
0021+  0000             CH1_SFT     EQU     1               ; channel 1
0022+  0000             CH2_SFT     EQU     2               ; channel 2
0023+  0000             CH3_SFT     EQU     3               ; channel 3
0024+  0000             
0025+  0000             COMPLAY     EQU     1<<COMPLAY_SFT
0026+  0000             COMSTOP     EQU     1<<COMSTOP_SFT
0027+  0000             
0028+  0000             STATPLAY    EQU     1<<STATPLAY_SFT
0029+  0000             STATREADY   EQU     1<<STATREADY_SFT
0030+  0000             
0031+  0000             CH0         EQU     1<<CH0_SFT
0032+  0000             CH1         EQU     1<<CH1_SFT
0033+  0000             CH2         EQU     1<<CH2_SFT
0034+  0000             CH3         EQU     1<<CH3_SFT
0035+  0000             
0036+  0000             
0037+  0000             ; ########################### variable #############################
0038+  0000             
0039+  0000             COMMAND     EQU     $0100           ; command from 68K
0040+  0000             STATUS      EQU     $0102           ; status from Z80
0041+  0000             PARAMS      EQU     $0104           ; parameters (68K and Z80)
0033   0000             
0034   0000             
0035   0000             ; ###########################       var        ##############################
0036   0000             
0037   0000             XGM_PLAY_SFT    EQU     6           ; XGM music play command bit
0038   0000             XGM_RESUME_SFT  EQU     5           ; XGM music resume command bit
0039   0000             XGM_STOP_SFT    EQU     4           ; XGM music stop command bit
0040   0000             
0041   0000                                                 ; COMMAND b0 = play PCM0   STATUS b0 = PCM0 playing
0042   0000                                                 ; COMMAND b1 = play PCM1   STATUS b1 = PCM1 playing
0043   0000                                                 ; COMMAND b2 = play PCM2   STATUS b2 = PCM2 playing
0044   0000                                                 ; COMMAND b3 = play PCM3   STATUS b3 = PCM3 playing
0045   0000                                                 ; COMMAND b4 = stop XGM
0046   0000                                                 ; COMMAND b5 = resume XGM
0047   0000                                                 ; COMMAND b6 = play XGM    STATUS b6 = XGM playing
0048   0000             
0049   0000             XGM_ARG_A   EQU     PARAMS+$00      ; XGM address (bit 0 --> bit 23)
0050   0000             
0051   0000             PCM0_ARG_P  EQU     PARAMS+$04      ; priority (0 to 15)
0052   0000             PCM0_ARG_ID EQU     PARAMS+$05      ; PCM id (0 to 255)
0053   0000             PCM1_ARG_P  EQU     PARAMS+$06      ; priority (0 to 15)
0054   0000             PCM1_ARG_ID EQU     PARAMS+$07      ; PCM id (0 to 255)
0055   0000             PCM2_ARG_P  EQU     PARAMS+$08      ; priority (0 to 15)
0056   0000             PCM2_ARG_ID EQU     PARAMS+$09      ; PCM id (0 to 255)
0057   0000             PCM3_ARG_P  EQU     PARAMS+$0A      ; priority (0 to 15)
0058   0000             PCM3_ARG_ID EQU     PARAMS+$0B      ; PCM id (0 to 255)
0059   0000             
0060   0000             PCM_ARG_P   EQU     PCM0_ARG_P
0061   0000             PCM_ARG_ID  EQU     PCM0_ARG_ID
0062   0000             
0063   0000             PSG_ARG     EQU     PARAMS+$0C      ; xxxx CCCC  where 'CCCC' is PSG channel '3210'
0064   0000                                                 ; PSG channel reservation for 68k
0065   0000             PROTECT_ARG EQU     PARAMS+$0D      ; set to 1 from 68k during DMA (in vblank period)
0066   0000                                                 ; to prevent Z80 accessing 68k BUS
0067   0000             
0068   0000             MODIFYING_F EQU     PARAMS+$0E      ; Z80 is modifying the 'PENDING_FRM' variable
0069   0000             PENDING_FRM EQU     PARAMS+$0F      ; contains number of XGM frame to process
0070   0000             
0071   0000             PCM0_PRIO   EQU     PARAMS+$10      ; PCM0 internal priority
0072   0000             PCM0_ADDR   EQU     PARAMS+$12      ; PCM0 internal addr (bit8 --> bit23)
0073   0000             PCM0_LEN    EQU     PARAMS+$14      ; PCM0 internal len (bit8 --> bit23)
0074   0000             PCM1_PRIO   EQU     PARAMS+$18      ; PCM1 internal priority
0075   0000             PCM1_ADDR   EQU     PARAMS+$1A      ; PCM1 internal addr (bit8 --> bit23)
0076   0000             PCM1_LEN    EQU     PARAMS+$1C      ; PCM1 internal len (bit8 --> bit23)
0077   0000             PCM2_PRIO   EQU     PARAMS+$20      ; PCM2 internal priority
0078   0000             PCM2_ADDR   EQU     PARAMS+$22      ; PCM2 internal addr (bit8 --> bit23)
0079   0000             PCM2_LEN    EQU     PARAMS+$24      ; PCM2 internal len (bit8 --> bit23)
0080   0000             PCM3_PRIO   EQU     PARAMS+$28      ; PCM3 internal priority
0081   0000             PCM3_ADDR   EQU     PARAMS+$2A      ; PCM3 internal addr (bit8 --> bit23)
0082   0000             PCM3_LEN    EQU     PARAMS+$2C      ; PCM3 internal len (bit8 --> bit23)
0083   0000             
0084   0000             PCM_PRIO    EQU     PCM0_PRIO
0085   0000             PCM_ADDR    EQU     PCM0_ADDR
0086   0000             PCM_LEN     EQU     PCM0_LEN
0087   0000             
0088   0000             XGM_ADDR    EQU     PARAMS+$30      ; XGM internal addr (bit0 --> bit23)
0089   0000             
0090   0000             WRITEBUF    EQU     PARAMS+$34      ; PCM write buffer pointer (bit8 --> bit9)
0091   0000             READBUF     EQU     PARAMS+$36      ; PCM read buffer pointer (bit8 --> bit9)
0092   0000             
0093   0000             YM_RR_SAV   EQU     PARAMS+$40      ; YM RR save (4 slots * 6 channels)
0094   0000             PSG_ENV_SAV EQU     PARAMS+$58      ; PSG env save (4 channels)
0095   0000             YM_RR_OFF   EQU     PARAMS+$60      ; YM RR off (4 slots * 6 channels)
0096   0000             PSG_ENV_OFF EQU     PARAMS+$78      ; PSG env off (4 channels)
0097   0000             
0098   0000             YM_2B_SAV   EQU     PARAMS+$5C      ; YM register $2B last write save
0099   0000             YM_2B_CNT   EQU     PARAMS+$5D      ; YM register $2B ON expiration
0100   0000             
0101   0000             IDLE_LOOP   EQU     PARAMS+$7C      ; idle loop counter (XGM frame wait)
0102   0000             WAIT_LOOP   EQU     PARAMS+$7E      ; wait loop counter (DMA contention wait)
0103   0000             
0104   0000             DEBUG_1     EQU     PARAMS+$80      ; debug
0105   0000             DEBUG_2     EQU     PARAMS+$81      ; debug
0106   0000             DEBUG_3     EQU     PARAMS+$82      ; debug
0107   0000             DEBUG_4     EQU     PARAMS+$83      ; debug
0108   0000             DEBUG_5     EQU     PARAMS+$84      ; debug
0109   0000             DEBUG_6     EQU     PARAMS+$85      ; debug
0110   0000             DEBUG_7     EQU     PARAMS+$86      ; debug
0111   0000             DEBUG_8     EQU     PARAMS+$87      ; debug
0112   0000             DEBUG_9     EQU     PARAMS+$88      ; debug
0113   0000             DEBUG_A     EQU     PARAMS+$89      ; debug
0114   0000             
0115   0000             JUMP_TABLE  EQU     $1600           ; XGM command jump table (size = $100)
0116   0000             XGM_BUFFER  EQU     $1700           ; XGM music data buffer (size = $100)
0117   0000             
0118   0000             PCM_BUFFER0 EQU     $1800           ; PCM buffer 0
0119   0000             PCM_BUFFER1 EQU     $1900           ; PCM buffer 1
0120   0000             PCM_BUFFER2 EQU     $1A00           ; PCM buffer 2
0121   0000             PCM_BUFFER3 EQU     $1B00           ; PCM buffer 3
0122   0000             
0123   0000             PCM_BUFFER  EQU     PCM_BUFFER0     ; PCM buffer
0124   0000             
0125   0000             
0126   0000             ID_TABLE    EQU     $1C00           ; sample id table (size = $400)
0127   0000             
0128   0000             STACK       EQU     JUMP_TABLE      ; stack pointer above buffer region ($1600 --> $15XX)
0129   0000             
0130   0000             
0131   0000             ; ###########################      macro       ##############################
0132   0000             
0133   0000                         INCLUDE "z80_mac.i80"  ; basic macros
0001+  0000             ; ############################     macro     ##############################
0002+  0000             
0003+  0000             
0004+  0000             ; setBank
0005+  0000             ; -------
0006+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0007+  0000             ; HL  <-  BANKREG
0008+  0000             ;
0009+  0000             ; set the bank register for ROM area
0010+  0000             ; = 101 cycles
0011+  0000             
0012+  0000                         macro   setBank
0013+  0000~            
0014+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
0015+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
0016+  0000~                        RRA                     ;                           ' 4
0017+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
0018+  0000~                        RRA                     ;                           ' 4
0019+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
0020+  0000~                        RRA                     ;                           ' 4
0021+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
0022+  0000~                        RRA                     ;                           ' 4
0023+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
0024+  0000~                        RRA                     ;                           ' 4
0025+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
0026+  0000~                        RRA                     ;                           ' 4
0027+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
0028+  0000~                        RRA                     ;                           ' 4
0029+  0000~                        LD  (HL), A             ; #8 (bit 22)               ' 7
0030+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
0031+  0000~            
0032+  0000                         endm                    ;                           ' 101
0033+  0000             
0034+  0000             
0035+  0000             ; setBankFast
0036+  0000             ; -----------
0037+  0000             ; A    -> bit 21-15 of rom address to set in the bank register
0038+  0000             ; HL  <-  BANKREG
0039+  0000             ;
0040+  0000             ; set the bank register for ROM area
0041+  0000             ; = 97 cycles
0042+  0000             
0043+  0000                         macro   setBankFast
0044+  0000~            
0045+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
0046+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
0047+  0000~                        RRA                     ;                           ' 4
0048+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
0049+  0000~                        RRA                     ;                           ' 4
0050+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
0051+  0000~                        RRA                     ;                           ' 4
0052+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
0053+  0000~                        RRA                     ;                           ' 4
0054+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
0055+  0000~                        RRA                     ;                           ' 4
0056+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
0057+  0000~                        RRA                     ;                           ' 4
0058+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
0059+  0000~                        LD  (HL), L             ; #8 (bit 22 = 0)           ' 7
0060+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
0061+  0000~            
0062+  0000                         endm                    ;                           ' 97
0063+  0000             
0064+  0000             
0065+  0000             ; setBank_BC
0066+  0000             ; ----------
0067+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0068+  0000             ; BC  <-  BANKREG
0069+  0000             ; A   <-  0
0070+  0000             ;
0071+  0000             ; set the bank register for ROM area
0072+  0000             ; = 105 cycles
0073+  0000             
0074+  0000                         macro   setBank_BC
0075+  0000~            
0076+  0000~                        LD  BC, BANKREG         ; BC = BANKREG              ' 10
0077+  0000~                        LD  (BC), A             ; #1 (bit 15)               ' 7
0078+  0000~                        RRA                     ;                           ' 4
0079+  0000~                        LD  (BC), A             ; #2 (bit 16)               ' 7
0080+  0000~                        RRA                     ;                           ' 4
0081+  0000~                        LD  (BC), A             ; #3 (bit 17)               ' 7
0082+  0000~                        RRA                     ;                           ' 4
0083+  0000~                        LD  (BC), A             ; #4 (bit 18)               ' 7
0084+  0000~                        RRA                     ;                           ' 4
0085+  0000~                        LD  (BC), A             ; #5 (bit 19)               ' 7
0086+  0000~                        RRA                     ;                           ' 4
0087+  0000~                        LD  (BC), A             ; #6 (bit 20)               ' 7
0088+  0000~                        RRA                     ;                           ' 4
0089+  0000~                        LD  (BC), A             ; #7 (bit 21)               ' 7
0090+  0000~                        RRA                     ;                           ' 4
0091+  0000~                        LD  (BC), A             ; #8 (bit 22)               ' 7
0092+  0000~                        RRA                     ;                           ' 4
0093+  0000~                        LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0094+  0000~            
0095+  0000                         endm                    ;                           ' 105
0096+  0000             
0097+  0000             
0098+  0000             ; setBank_DE
0099+  0000             ; ----------
0100+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0101+  0000             ; DE  <-  BANKREG
0102+  0000             ; A   <-  0
0103+  0000             ;
0104+  0000             ; set the bank register for ROM area
0105+  0000             ; = 105 cycles
0106+  0000             
0107+  0000                         macro   setBank_DE
0108+  0000~            
0109+  0000~                        LD  DE, BANKREG         ; DE = BANKREG              ' 10
0110+  0000~                        LD  (DE), A             ; #1 (bit 15)               ' 7
0111+  0000~                        RRA                     ;                           ' 4
0112+  0000~                        LD  (DE), A             ; #2 (bit 16)               ' 7
0113+  0000~                        RRA                     ;                           ' 4
0114+  0000~                        LD  (DE), A             ; #3 (bit 17)               ' 7
0115+  0000~                        RRA                     ;                           ' 4
0116+  0000~                        LD  (DE), A             ; #4 (bit 18)               ' 7
0117+  0000~                        RRA                     ;                           ' 4
0118+  0000~                        LD  (DE), A             ; #5 (bit 19)               ' 7
0119+  0000~                        RRA                     ;                           ' 4
0120+  0000~                        LD  (DE), A             ; #6 (bit 20)               ' 7
0121+  0000~                        RRA                     ;                           ' 4
0122+  0000~                        LD  (DE), A             ; #7 (bit 21)               ' 7
0123+  0000~                        RRA                     ;                           ' 4
0124+  0000~                        LD  (DE), A             ; #8 (bit 22)               ' 7
0125+  0000~                        RRA                     ;                           ' 4
0126+  0000~                        LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0127+  0000~            
0128+  0000                         endm                    ;                           ' 105
0129+  0000             
0130+  0000             
0131+  0000             ; writeYM
0132+  0000             ; -------
0133+  0000             ; HL   -> YM port where to write
0134+  0000             ; D    -> address
0135+  0000             ; E    -> value
0136+  0000             ;
0137+  0000             ; write to YM2612
0138+  0000             
0139+  0000                         macro   writeYM
0140+  0000~            
0141+  0000~            .wait0
0142+  0000~                        BIT     7, (HL)         ; test YM not busy
0143+  0000~                        JR      NZ, .wait0
0144+  0000~                        LD      (HL), D         ; write address
0145+  0000~            .wait1
0146+  0000~                        BIT     7, (HL)         ; test YM not busy
0147+  0000~                        JR      NZ, .wait1
0148+  0000~                        INC     L
0149+  0000~                        LD      (HL), E         ; write value
0150+  0000~            
0151+  0000                         endm
0152+  0000             
0153+  0000             
0154+  0000             ; getPlayCommand
0155+  0000             ; --------------
0156+  0000             ; HL  <-  point to COMMAND
0157+  0000             ; zf  <-  channel 'ch' play command
0158+  0000             ;
0159+  0000             ; Z flag reset if play command for channel 'ch'
0160+  0000             ; = 22 cycles
0161+  0000             
0162+  0000                         macro   getPlayCommand ch
0163+  0000~            
0164+  0000~                        LD      HL, COMMAND             ;                   ' 10
0165+  0000~                        BIT     COMPLAY_SFT+ch, (HL)    ; play command ?    ' 12
0166+  0000~            
0167+  0000                         endm                            ;                   ' 22
0168+  0000             
0169+  0000             
0170+  0000             ; getStopCommand
0171+  0000             ; --------------
0172+  0000             ; HL  <-  point to COMMAND
0173+  0000             ; zf  <-  channel 'ch' stop command
0174+  0000             ;
0175+  0000             ; Z flag reset if stop command for channel 'ch'
0176+  0000             ; = 22 cycles
0177+  0000             
0178+  0000                         macro   getStopCommand ch
0179+  0000~            
0180+  0000~                        LD      HL, COMMAND             ;                   ' 10
0181+  0000~                        BIT     COMSTOP_SFT+ch, (HL)    ; stop command ?    ' 12
0182+  0000~            
0183+  0000                         endm                            ;                   ' 22
0184+  0000             
0185+  0000             
0186+  0000             ; setPlayCommand
0187+  0000             ; ----------------
0188+  0000             ; HL  <-  point to COMMAND
0189+  0000             ;
0190+  0000             ; set the play command for channel 'ch'
0191+  0000             ; = 25 cycles
0192+  0000             
0193+  0000                         macro   setPlayCommand ch
0194+  0000~            
0195+  0000~                        LD      HL, COMMAND             ;                   ' 10
0196+  0000~                        SET     COMPLAY_SFT+ch, (HL)    ; set command       ' 15
0197+  0000~            
0198+  0000                         endm                            ;                   ' 25
0199+  0000             
0200+  0000             
0201+  0000             ; setStopCommand
0202+  0000             ; ----------------
0203+  0000             ; HL  <-  point to COMMAND
0204+  0000             ;
0205+  0000             ; set the stop command for channel 'ch'
0206+  0000             ; = 25 cycles
0207+  0000             
0208+  0000                         macro   setStopCommand ch
0209+  0000~            
0210+  0000~                        LD      HL, COMMAND             ;                   ' 10
0211+  0000~                        SET     COMSTOP_SFT+ch, (HL)    ; set command       ' 15
0212+  0000~            
0213+  0000                         endm                            ;                   ' 25
0214+  0000             
0215+  0000             
0216+  0000             ; clearPlayCommand
0217+  0000             ; ----------------
0218+  0000             ; HL  <-  point to COMMAND
0219+  0000             ;
0220+  0000             ; clear the play command for channel 'ch'
0221+  0000             ; = 25 cycles
0222+  0000             
0223+  0000                         macro   clearPlayCommand ch
0224+  0000~            
0225+  0000~                        LD      HL, COMMAND             ;                   ' 10
0226+  0000~                        RES     COMPLAY_SFT+ch, (HL)    ; clear command     ' 15
0227+  0000~            
0228+  0000                         endm                            ;                   ' 25
0229+  0000             
0230+  0000             
0231+  0000             ; clearStopCommand
0232+  0000             ; ----------------
0233+  0000             ; HL  <-  point to COMMAND
0234+  0000             ;
0235+  0000             ; clear the stop command for channel 'ch'
0236+  0000             ; = 25 cycles
0237+  0000             
0238+  0000                         macro   clearStopCommand ch
0239+  0000~            
0240+  0000~                        LD      HL, COMMAND             ;                   ' 10
0241+  0000~                        RES     COMSTOP_SFT+ch, (HL)    ; clear command     ' 15
0242+  0000~            
0243+  0000                         endm                            ;                   ' 25
0244+  0000             
0245+  0000             
0246+  0000             ; getPlayStatus
0247+  0000             ; -------------
0248+  0000             ; HL  <- point to STATUS
0249+  0000             ; zf  <-  channel 'ch' is playing
0250+  0000             ;
0251+  0000             ; Z flag reset if play status for channel 'ch'
0252+  0000             ; = 22 cycles
0253+  0000             
0254+  0000                         macro   getPlayStatus ch
0255+  0000~            
0256+  0000~                        LD      HL, STATUS              ;                   ' 10
0257+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
0258+  0000~            
0259+  0000                         endm                            ;                   ' 22
0260+  0000             
0261+  0000             
0262+  0000             ; setPlayStatus
0263+  0000             ; -------------
0264+  0000             ; HL  <- point to STATUS
0265+  0000             ;
0266+  0000             ; set the play status for channel 'ch'
0267+  0000             ; = 25 cycles
0268+  0000             
0269+  0000                         macro   setPlayStatus ch
0270+  0000~            
0271+  0000~                        LD      HL, STATUS              ;                   ' 10
0272+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
0273+  0000~            
0274+  0000                         endm                            ;                   ' 25
0275+  0000             
0276+  0000             
0277+  0000             ; clearPlayStatus
0278+  0000             ; ---------------
0279+  0000             ; HL  <- point to STATUS
0280+  0000             ;
0281+  0000             ; clear play status for channel 'ch'
0282+  0000             ; = 25 cycles
0283+  0000             
0284+  0000                         macro   clearPlayStatus ch
0285+  0000~            
0286+  0000~                        LD      HL, STATUS              ;                   ' 10
0287+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
0288+  0000~            
0289+  0000                         endm                            ;                   ' 25
0290+  0000             
0291+  0000             
0292+  0000             ; getLoopStatus
0293+  0000             ; -------------
0294+  0000             ; HL  <- point to STATUS+1
0295+  0000             ; zf  <-  channel 'ch' is playing
0296+  0000             ;
0297+  0000             ; Z flag reset if loop status for channel 'ch'
0298+  0000             ; = 22 cycles
0299+  0000             
0300+  0000                         macro   getLoopStatus ch
0301+  0000~            
0302+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0303+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
0304+  0000~            
0305+  0000                         endm                            ;                   ' 22
0306+  0000             
0307+  0000             
0308+  0000             ; setLoopStatus
0309+  0000             ; -------------
0310+  0000             ; HL  <- point to STATUS+1
0311+  0000             ;
0312+  0000             ; set the loop status for channel 'ch'
0313+  0000             ; = 25 cycles
0314+  0000             
0315+  0000                         macro   setLoopStatus ch
0316+  0000~            
0317+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0318+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
0319+  0000~            
0320+  0000                         endm                            ;                   ' 25
0321+  0000             
0322+  0000             
0323+  0000             ; clearLoopStatus
0324+  0000             ; ---------------
0325+  0000             ; HL  <- point to STATUS+1
0326+  0000             ;
0327+  0000             ; clear loop status for channel 'ch'
0328+  0000             ; = 25 cycles
0329+  0000             
0330+  0000                         macro   clearLoopStatus ch
0331+  0000~            
0332+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0333+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
0334+  0000~            
0335+  0000                         endm                            ;                   ' 25
0336+  0000             
0337+  0000             
0338+  0000             ; clearAllStatus
0339+  0000             ; --------------
0340+  0000             ; HL  <- 0
0341+  0000             ;
0342+  0000             ; clear play and loop status for all channel
0343+  0000             ; = 26 cycles
0344+  0000             
0345+  0000                         macro   clearAllStatus
0346+  0000~            
0347+  0000~                        LD      HL, $00                 ;                   ' 10
0348+  0000~                        LD      (STATUS), HL            ; clear status      ' 16
0349+  0000~            
0350+  0000                         endm                            ;                   ' 26
0351+  0000             
0352+  0000             
0353+  0000             ; ############################  macro wait macro  ##############################
0354+  0000             
0355+  0000             
0356+  0000             ; wait2p16x
0357+  0000             ; ---------
0358+  0000             ; wait for ((w * 16) + 2) cycles
0359+  0000             ;
0360+  0000                         macro   wait2p16x w
0361+  0000~            
0362+  0000~                        LD      A, w            ; 7-2
0363+  0000~            .loop
0364+  0000~                        DEC     A               ; 4
0365+  0000~                        JR      NZ, .loop       ; 12
0366+  0000~            
0367+  0000                         endm
0368+  0000             
0369+  0000             
0370+  0000                         macro   wait4
0371+  0000~                        NOP
0372+  0000                         endm
0373+  0000             
0374+  0000                         macro   wait6
0375+  0000~                        INC     DE
0376+  0000                         endm
0377+  0000             
0378+  0000                         macro   wait7
0379+  0000~                        LD      A, $0
0380+  0000                         endm
0381+  0000             
0382+  0000                         macro   wait8
0383+  0000~                        wait4
0384+  0000~                        wait4
0385+  0000                         endm
0386+  0000             
0387+  0000                         macro   wait9
0388+  0000~                        LD      R, A
0389+  0000                         endm
0390+  0000             
0391+  0000                         macro   wait10
0392+  0000~                        JP      .loop
0393+  0000~            .loop
0394+  0000                         endm
0395+  0000             
0396+  0000                         macro   wait11
0397+  0000~                        wait7
0398+  0000~                        wait4
0399+  0000                         endm
0400+  0000             
0401+  0000                         macro   wait12
0402+  0000~                        JR      .loop
0403+  0000~            .loop
0404+  0000                         endm
0405+  0000             
0406+  0000                         macro   wait13
0407+  0000~                        wait9
0408+  0000~                        wait4
0409+  0000                         endm
0410+  0000             
0411+  0000                         macro   wait14
0412+  0000~                        wait7
0413+  0000~                        wait7
0414+  0000                         endm
0415+  0000             
0416+  0000                         macro   wait15
0417+  0000~                        wait8
0418+  0000~                        wait7
0419+  0000                         endm
0420+  0000             
0421+  0000                         macro   wait16
0422+  0000~                        wait12
0423+  0000~                        wait4
0424+  0000                         endm
0425+  0000             
0426+  0000                         macro   wait17
0427+  0000~                        wait10
0428+  0000~                        wait7
0429+  0000                         endm
0430+  0000             
0431+  0000                         macro   wait18
0432+  0000~                        wait9
0433+  0000~                        wait9
0434+  0000                         endm
0435+  0000             
0436+  0000                         macro   wait19
0437+  0000~                        wait12
0438+  0000~                        wait7
0439+  0000                         endm
0440+  0000             
0441+  0000                         macro   wait20
0442+  0000~                        wait11
0443+  0000~                        wait9
0444+  0000                         endm
0445+  0000             
0446+  0000                         macro   wait21
0447+  0000~                        wait12
0448+  0000~                        wait9
0449+  0000                         endm
0450+  0000             
0451+  0000                         macro   wait22
0452+  0000~                        wait18
0453+  0000~                        wait4
0454+  0000                         endm
0455+  0000             
0456+  0000                         macro   wait23
0457+  0000~                        wait14
0458+  0000~                        wait9
0459+  0000                         endm
0460+  0000             
0461+  0000                         macro   wait24
0462+  0000~                        wait12
0463+  0000~                        wait12
0464+  0000                         endm
0465+  0000             
0466+  0000                         macro   wait25
0467+  0000~                        wait18
0468+  0000~                        wait7
0469+  0000                         endm
0470+  0000             
0471+  0000                         macro   wait26
0472+  0000~                        wait18
0473+  0000~                        wait8
0474+  0000                         endm
0475+  0000             
0476+  0000                         macro   wait27
0477+  0000~                        wait18
0478+  0000~                        wait9
0479+  0000                         endm
0480+  0000             
0481+  0000                         macro   wait28
0482+  0000~                        wait21
0483+  0000~                        wait7
0484+  0000                         endm
0485+  0000             
0486+  0000                         macro   wait29
0487+  0000~                        wait21
0488+  0000~                        wait8
0489+  0000                         endm
0490+  0000             
0491+  0000                         macro   wait30
0492+  0000~                        wait21
0493+  0000~                        wait9
0494+  0000                         endm
0495+  0000             
0496+  0000                         macro   wait31
0497+  0000~                        wait21
0498+  0000~                        wait10
0499+  0000                         endm
0500+  0000             
0501+  0000                         macro   wait32
0502+  0000~                        wait20
0503+  0000~                        wait12
0504+  0000                         endm
0505+  0000             
0506+  0000                         macro   wait33
0507+  0000~                        wait21
0508+  0000~                        wait12
0509+  0000                         endm
0510+  0000             
0511+  0000                         macro   wait34
0512+  0000~                        wait2p16x 2
0513+  0000                         endm
0514+  0000             
0515+  0000                         macro   wait35
0516+  0000~                        wait28
0517+  0000~                        wait7
0518+  0000                         endm
0519+  0000             
0520+  0000                         macro   wait36
0521+  0000~                        wait27
0522+  0000~                        wait9
0523+  0000                         endm
0524+  0000             
0525+  0000                         macro   wait37
0526+  0000~                        wait28
0527+  0000~                        wait9
0528+  0000                         endm
0529+  0000             
0530+  0000                         macro   wait38
0531+  0000~                        wait27
0532+  0000~                        wait11
0533+  0000                         endm
0534+  0000             
0535+  0000                         macro   wait39
0536+  0000~                        wait27
0537+  0000~                        wait12
0538+  0000                         endm
0539+  0000             
0540+  0000                         macro   wait40
0541+  0000~                        wait27
0542+  0000~                        wait13
0543+  0000                         endm
0544+  0000             
0545+  0000                         macro   wait41
0546+  0000~                        wait34
0547+  0000~                        wait7
0548+  0000                         endm
0549+  0000             
0550+  0000                         macro   wait42
0551+  0000~                        wait34
0552+  0000~                        wait8
0553+  0000                         endm
0554+  0000             
0555+  0000                         macro   wait43
0556+  0000~                        wait36
0557+  0000~                        wait7
0558+  0000                         endm
0559+  0000             
0560+  0000                         macro   wait44
0561+  0000~                        wait34
0562+  0000~                        wait10
0563+  0000                         endm
0564+  0000             
0565+  0000                         macro   wait45
0566+  0000~                        wait36
0567+  0000~                        wait9
0568+  0000                         endm
0569+  0000             
0570+  0000                         macro   wait46
0571+  0000~                        wait34
0572+  0000~                        wait12
0573+  0000                         endm
0574+  0000             
0575+  0000                         macro   wait47
0576+  0000~                        wait34
0577+  0000~                        wait13
0578+  0000                         endm
0579+  0000             
0580+  0000                         macro   wait48
0581+  0000~                        wait36
0582+  0000~                        wait12
0583+  0000                         endm
0584+  0000             
0585+  0000                         macro   wait49
0586+  0000~                        wait36
0587+  0000~                        wait13
0588+  0000                         endm
0589+  0000             
0590+  0000                         macro   wait50
0591+  0000~                        wait2p16x 3
0592+  0000                         endm
0593+  0000             
0594+  0000                         macro   wait51
0595+  0000~                        wait34
0596+  0000~                        wait17
0597+  0000                         endm
0598+  0000             
0599+  0000                         macro   wait52
0600+  0000~                        wait34
0601+  0000~                        wait18
0602+  0000                         endm
0603+  0000             
0604+  0000                         macro   wait53
0605+  0000~                        wait36
0606+  0000~                        wait17
0607+  0000                         endm
0608+  0000             
0609+  0000                         macro   wait54
0610+  0000~                        wait50
0611+  0000~                        wait4
0612+  0000                         endm
0613+  0000             
0614+  0000                         macro   wait55
0615+  0000~                        wait34
0616+  0000~                        wait21
0617+  0000                         endm
0618+  0000             
0619+  0000                         macro   wait56
0620+  0000~                        wait34
0621+  0000~                        wait22
0622+  0000                         endm
0623+  0000             
0624+  0000                         macro   wait57
0625+  0000~                        wait50
0626+  0000~                        wait7
0627+  0000                         endm
0628+  0000             
0629+  0000                         macro   wait58
0630+  0000~                        wait50
0631+  0000~                        wait8
0632+  0000                         endm
0633+  0000             
0634+  0000                         macro   wait59
0635+  0000~                        wait50
0636+  0000~                        wait9
0637+  0000                         endm
0638+  0000             
0639+  0000                         macro   wait60
0640+  0000~                        wait50
0641+  0000~                        wait10
0642+  0000                         endm
0643+  0000             
0644+  0000                         macro   wait61
0645+  0000~                        wait50
0646+  0000~                        wait11
0647+  0000                         endm
0648+  0000             
0649+  0000                         macro   wait62
0650+  0000~                        wait50
0651+  0000~                        wait12
0652+  0000                         endm
0653+  0000             
0654+  0000                         macro   wait63
0655+  0000~                        wait50
0656+  0000~                        wait13
0657+  0000                         endm
0658+  0000             
0659+  0000                         macro   wait64
0660+  0000~                        wait50
0661+  0000~                        wait14
0662+  0000                         endm
0663+  0000             
0664+  0000                         macro   wait65
0665+  0000~                        wait50
0666+  0000~                        wait15
0667+  0000                         endm
0668+  0000             
0669+  0000                         macro   wait66
0670+  0000~                        wait2p16x 4
0671+  0000                         endm
0672+  0000             
0673+  0000                         macro   wait67
0674+  0000~                        wait50
0675+  0000~                        wait17
0676+  0000                         endm
0677+  0000             
0678+  0000                         macro   wait68
0679+  0000~                        wait50
0680+  0000~                        wait18
0681+  0000                         endm
0682+  0000             
0683+  0000                         macro   wait70
0684+  0000~                        wait66
0685+  0000~                        wait4
0686+  0000                         endm
0687+  0000             
0688+  0000                         macro   wait72
0689+  0000~                        wait50
0690+  0000~                        wait22
0691+  0000                         endm
0692+  0000             
0693+  0000                         macro   wait73
0694+  0000~                        wait66
0695+  0000~                        wait7
0696+  0000                         endm
0697+  0000             
0698+  0000                         macro   wait74
0699+  0000~                        wait66
0700+  0000~                        wait8
0701+  0000                         endm
0702+  0000             
0703+  0000                         macro   wait75
0704+  0000~                        wait66
0705+  0000~                        wait9
0706+  0000                         endm
0707+  0000             
0708+  0000                         macro   wait76
0709+  0000~                        wait66
0710+  0000~                        wait10
0711+  0000                         endm
0712+  0000             
0713+  0000                         macro   wait77
0714+  0000~                        wait66
0715+  0000~                        wait11
0716+  0000                         endm
0717+  0000             
0718+  0000                         macro   wait78
0719+  0000~                        wait66
0720+  0000~                        wait12
0721+  0000                         endm
0722+  0000             
0723+  0000                         macro   wait79
0724+  0000~                        wait66
0725+  0000~                        wait13
0726+  0000                         endm
0727+  0000             
0728+  0000                         macro   wait80
0729+  0000~                        wait66
0730+  0000~                        wait14
0731+  0000                         endm
0732+  0000             
0733+  0000                         macro   wait81
0734+  0000~                        wait66
0735+  0000~                        wait15
0736+  0000                         endm
0737+  0000             
0738+  0000                         macro   wait82
0739+  0000~                        wait2p16x 5
0740+  0000                         endm
0741+  0000             
0742+  0000                         macro   wait83
0743+  0000~                        wait66
0744+  0000~                        wait17
0745+  0000                         endm
0746+  0000             
0747+  0000                         macro   wait84
0748+  0000~                        wait66
0749+  0000~                        wait18
0750+  0000                         endm
0751+  0000             
0752+  0000                         macro   wait85
0753+  0000~                        wait66
0754+  0000~                        wait19
0755+  0000                         endm
0756+  0000             
0757+  0000                         macro   wait86
0758+  0000~                        wait82
0759+  0000~                        wait4
0760+  0000                         endm
0761+  0000             
0762+  0000                         macro   wait87
0763+  0000~                        wait66
0764+  0000~                        wait21
0765+  0000                         endm
0766+  0000             
0767+  0000                         macro   wait88
0768+  0000~                        wait66
0769+  0000~                        wait22
0770+  0000                         endm
0771+  0000             
0772+  0000                         macro   wait89
0773+  0000~                        wait82
0774+  0000~                        wait7
0775+  0000                         endm
0776+  0000             
0777+  0000                         macro   wait90
0778+  0000~                        wait82
0779+  0000~                        wait8
0780+  0000                         endm
0781+  0000             
0782+  0000                         macro   wait91
0783+  0000~                        wait82
0784+  0000~                        wait9
0785+  0000                         endm
0786+  0000             
0787+  0000                         macro   wait92
0788+  0000~                        wait82
0789+  0000~                        wait10
0790+  0000                         endm
0791+  0000             
0792+  0000                         macro   wait94
0793+  0000~                        wait82
0794+  0000~                        wait12
0795+  0000                         endm
0796+  0000             
0797+  0000                         macro   wait95
0798+  0000~                        wait82
0799+  0000~                        wait13
0800+  0000                         endm
0801+  0000             
0802+  0000                         macro   wait96
0803+  0000~                        wait82
0804+  0000~                        wait14
0805+  0000                         endm
0806+  0000             
0807+  0000                         macro   wait97
0808+  0000~                        wait82
0809+  0000~                        wait15
0810+  0000                         endm
0811+  0000             
0812+  0000                         macro   wait98
0813+  0000~                        wait2p16x 6
0814+  0000                         endm
0815+  0000             
0816+  0000                         macro   wait99
0817+  0000~                        wait82
0818+  0000~                        wait17
0819+  0000                         endm
0820+  0000             
0821+  0000                         macro   wait100
0822+  0000~                        wait82
0823+  0000~                        wait18
0824+  0000                         endm
0825+  0000             
0826+  0000                         macro   wait102
0827+  0000~                        wait98
0828+  0000~                        wait4
0829+  0000                         endm
0830+  0000             
0831+  0000                         macro   wait103
0832+  0000~                        wait82
0833+  0000~                        wait21
0834+  0000                         endm
0835+  0000             
0836+  0000                         macro   wait104
0837+  0000~                        wait82
0838+  0000~                        wait22
0839+  0000                         endm
0840+  0000             
0841+  0000                         macro   wait105
0842+  0000~                        wait98
0843+  0000~                        wait7
0844+  0000                         endm
0845+  0000             
0846+  0000                         macro   wait106
0847+  0000~                        wait98
0848+  0000~                        wait8
0849+  0000                         endm
0850+  0000             
0851+  0000                         macro   wait107
0852+  0000~                        wait98
0853+  0000~                        wait9
0854+  0000                         endm
0855+  0000             
0856+  0000                         macro   wait108
0857+  0000~                        wait98
0858+  0000~                        wait10
0859+  0000                         endm
0860+  0000             
0861+  0000                         macro   wait109
0862+  0000~                        wait98
0863+  0000~                        wait11
0864+  0000                         endm
0865+  0000             
0866+  0000                         macro   wait110
0867+  0000~                        wait98
0868+  0000~                        wait12
0869+  0000                         endm
0870+  0000             
0871+  0000                         macro   wait111
0872+  0000~                        wait98
0873+  0000~                        wait13
0874+  0000                         endm
0875+  0000             
0876+  0000                         macro   wait112
0877+  0000~                        wait98
0878+  0000~                        wait14
0879+  0000                         endm
0880+  0000             
0881+  0000                         macro   wait114
0882+  0000~                        wait2p16x 7
0883+  0000                         endm
0884+  0000             
0885+  0000                         macro   wait115
0886+  0000~                        wait98
0887+  0000~                        wait17
0888+  0000                         endm
0889+  0000             
0890+  0000                         macro   wait116
0891+  0000~                        wait98
0892+  0000~                        wait18
0893+  0000                         endm
0894+  0000             
0895+  0000                         macro   wait117
0896+  0000~                        wait98
0897+  0000~                        wait19
0898+  0000                         endm
0899+  0000             
0900+  0000                         macro   wait118
0901+  0000~                        wait114
0902+  0000~                        wait4
0903+  0000                         endm
0904+  0000             
0905+  0000                         macro   wait119
0906+  0000~                        wait98
0907+  0000~                        wait21
0908+  0000                         endm
0909+  0000             
0910+  0000                         macro   wait120
0911+  0000~                        wait98
0912+  0000~                        wait22
0913+  0000                         endm
0914+  0000             
0915+  0000                         macro   wait121
0916+  0000~                        wait114
0917+  0000~                        wait7
0918+  0000                         endm
0919+  0000             
0920+  0000                         macro   wait122
0921+  0000~                        wait114
0922+  0000~                        wait8
0923+  0000                         endm
0924+  0000             
0925+  0000                         macro   wait123
0926+  0000~                        wait114
0927+  0000~                        wait9
0928+  0000                         endm
0929+  0000             
0930+  0000                         macro   wait124
0931+  0000~                        wait114
0932+  0000~                        wait10
0933+  0000                         endm
0934+  0000             
0935+  0000                         macro   wait125
0936+  0000~                        wait114
0937+  0000~                        wait11
0938+  0000                         endm
0939+  0000             
0940+  0000                         macro   wait126
0941+  0000~                        wait114
0942+  0000~                        wait12
0943+  0000                         endm
0944+  0000             
0945+  0000                         macro   wait127
0946+  0000~                        wait114
0947+  0000~                        wait13
0948+  0000                         endm
0949+  0000             
0950+  0000                         macro   wait128
0951+  0000~                        wait114
0952+  0000~                        wait14
0953+  0000                         endm
0954+  0000             
0955+  0000                         macro   wait129
0956+  0000~                        wait114
0957+  0000~                        wait15
0958+  0000                         endm
0959+  0000             
0960+  0000                         macro   wait130
0961+  0000~                        wait2p16x 8
0962+  0000                         endm
0963+  0000             
0964+  0000                         macro   wait131
0965+  0000~                        wait114
0966+  0000~                        wait17
0967+  0000                         endm
0968+  0000             
0969+  0000                         macro   wait132
0970+  0000~                        wait114
0971+  0000~                        wait18
0972+  0000                         endm
0973+  0000             
0974+  0000                         macro   wait133
0975+  0000~                        wait114
0976+  0000~                        wait19
0977+  0000                         endm
0978+  0000             
0979+  0000                         macro   wait134
0980+  0000~                        wait130
0981+  0000~                        wait4
0982+  0000                         endm
0983+  0000             
0984+  0000                         macro   wait135
0985+  0000~                        wait114
0986+  0000~                        wait21
0987+  0000                         endm
0988+  0000             
0989+  0000                         macro   wait136
0990+  0000~                        wait114
0991+  0000~                        wait22
0992+  0000                         endm
0993+  0000             
0994+  0000                         macro   wait137
0995+  0000~                        wait130
0996+  0000~                        wait7
0997+  0000                         endm
0998+  0000             
0999+  0000                         macro   wait138
1000+  0000~                        wait130
1001+  0000~                        wait8
1002+  0000                         endm
1003+  0000             
1004+  0000                         macro   wait139
1005+  0000~                        wait130
1006+  0000~                        wait9
1007+  0000                         endm
1008+  0000             
1009+  0000                         macro   wait140
1010+  0000~                        wait130
1011+  0000~                        wait10
1012+  0000                         endm
1013+  0000             
1014+  0000                         macro   wait141
1015+  0000~                        wait130
1016+  0000~                        wait11
1017+  0000                         endm
1018+  0000             
1019+  0000                         macro   wait144
1020+  0000~                        wait130
1021+  0000~                        wait14
1022+  0000                         endm
1023+  0000             
1024+  0000                         macro   wait145
1025+  0000~                        wait130
1026+  0000~                        wait15
1027+  0000                         endm
1028+  0000             
1029+  0000                         macro   wait146
1030+  0000~                        wait2p16x 9
1031+  0000                         endm
1032+  0000             
1033+  0000                         macro   wait147
1034+  0000~                        wait130
1035+  0000~                        wait17
1036+  0000                         endm
1037+  0000             
1038+  0000                         macro   wait148
1039+  0000~                        wait130
1040+  0000~                        wait18
1041+  0000                         endm
1042+  0000             
1043+  0000                         macro   wait149
1044+  0000~                        wait130
1045+  0000~                        wait19
1046+  0000                         endm
1047+  0000             
1048+  0000                         macro   wait150
1049+  0000~                        wait146
1050+  0000~                        wait4
1051+  0000                         endm
1052+  0000             
1053+  0000                         macro   wait154
1054+  0000~                        wait146
1055+  0000~                        wait8
1056+  0000                         endm
1057+  0000             
1058+  0000                         macro   wait155
1059+  0000~                        wait146
1060+  0000~                        wait9
1061+  0000                         endm
1062+  0000             
1063+  0000                         macro   wait156
1064+  0000~                        wait146
1065+  0000~                        wait10
1066+  0000                         endm
1067+  0000             
1068+  0000                         macro   wait157
1069+  0000~                        wait146
1070+  0000~                        wait11
1071+  0000                         endm
1072+  0000             
1073+  0000                         macro   wait158
1074+  0000~                        wait146
1075+  0000~                        wait12
1076+  0000                         endm
1077+  0000             
1078+  0000                         macro   wait160
1079+  0000~                        wait146
1080+  0000~                        wait14
1081+  0000                         endm
1082+  0000             
1083+  0000                         macro   wait161
1084+  0000~                        wait146
1085+  0000~                        wait15
1086+  0000                         endm
1087+  0000             
1088+  0000                         macro   wait162
1089+  0000~                        wait2p16x 10
1090+  0000                         endm
1091+  0000             
1092+  0000                         macro   wait164
1093+  0000~                        wait146
1094+  0000~                        wait18
1095+  0000                         endm
1096+  0000             
1097+  0000                         macro   wait165
1098+  0000~                        wait146
1099+  0000~                        wait19
1100+  0000                         endm
1101+  0000             
1102+  0000                         macro   wait166
1103+  0000~                        wait162
1104+  0000~                        wait4
1105+  0000                         endm
1106+  0000             
1107+  0000                         macro   wait172
1108+  0000~                        wait162
1109+  0000~                        wait10
1110+  0000                         endm
1111+  0000             
1112+  0000                         macro   wait174
1113+  0000~                        wait162
1114+  0000~                        wait12
1115+  0000                         endm
1116+  0000             
1117+  0000                         macro   wait175
1118+  0000~                        wait162
1119+  0000~                        wait13
1120+  0000                         endm
1121+  0000             
1122+  0000                         macro   wait176
1123+  0000~                        wait162
1124+  0000~                        wait14
1125+  0000                         endm
1126+  0000             
1127+  0000                         macro   wait178
1128+  0000~                        wait2p16x 11
1129+  0000                         endm
1130+  0000             
1131+  0000                         macro   wait179
1132+  0000~                        wait162
1133+  0000~                        wait17
1134+  0000                         endm
1135+  0000             
1136+  0000                         macro   wait180
1137+  0000~                        wait162
1138+  0000~                        wait18
1139+  0000                         endm
1140+  0000             
1141+  0000                         macro   wait182
1142+  0000~                        wait178
1143+  0000~                        wait4
1144+  0000                         endm
1145+  0000             
1146+  0000                         macro   wait183
1147+  0000~                        wait162
1148+  0000~                        wait121
1149+  0000                         endm
1150+  0000             
1151+  0000                         macro   wait186
1152+  0000~                        wait178
1153+  0000~                        wait8
1154+  0000                         endm
1155+  0000             
1156+  0000                         macro   wait187
1157+  0000~                        wait178
1158+  0000~                        wait9
1159+  0000                         endm
1160+  0000             
1161+  0000                         macro   wait189
1162+  0000~                        wait178
1163+  0000~                        wait11
1164+  0000                         endm
1165+  0000             
1166+  0000                         macro   wait191
1167+  0000~                        wait178
1168+  0000~                        wait13
1169+  0000                         endm
1170+  0000             
1171+  0000                         macro   wait192
1172+  0000~                        wait178
1173+  0000~                        wait14
1174+  0000                         endm
1175+  0000             
1176+  0000                         macro   wait193
1177+  0000~                        wait178
1178+  0000~                        wait15
1179+  0000                         endm
1180+  0000             
1181+  0000                         macro   wait194
1182+  0000~                        wait2p16x 12
1183+  0000                         endm
1184+  0000             
1185+  0000                         macro   wait197
1186+  0000~                        wait178
1187+  0000~                        wait19
1188+  0000                         endm
1189+  0000             
1190+  0000                         macro   wait203
1191+  0000~                        wait194
1192+  0000~                        wait9
1193+  0000                         endm
1194+  0000             
1195+  0000                         macro   wait210
1196+  0000~                        wait2p16x 13
1197+  0000                         endm
1198+  0000             
1199+  0000                         macro   wait218
1200+  0000~                        wait210
1201+  0000~                        wait8
1202+  0000                         endm
1203+  0000             
1204+  0000                         macro   wait226
1205+  0000~                        wait2p16x 14
1206+  0000                         endm
1207+  0000             
1208+  0000                         macro   wait234
1209+  0000~                        wait226
1210+  0000~                        wait8
1211+  0000                         endm
1212+  0000             
1213+  0000                         macro   wait242
1214+  0000~                        wait2p16x 15
1215+  0000                         endm
1216+  0000             
1217+  0000                         macro   wait244
1218+  0000~                        wait226
1219+  0000~                        wait18
1220+  0000                         endm
1221+  0000             
1222+  0000                         macro   wait246
1223+  0000~                        wait242
1224+  0000~                        wait4
1225+  0000                         endm
1226+  0000             
1227+  0000                         macro   wait254
1228+  0000~                        wait242
1229+  0000~                        wait12
1230+  0000                         endm
1231+  0000             
1232+  0000                         macro   wait258
1233+  0000~                        wait2p16x 16
1234+  0000                         endm
1235+  0000             
1236+  0000                         macro   wait260
1237+  0000~                        wait242
1238+  0000~                        wait18
1239+  0000                         endm
1240+  0000             
1241+  0000                         macro   wait262
1242+  0000~                        wait258
1243+  0000~                        wait4
1244+  0000                         endm
1245+  0000             
1246+  0000                         macro   wait264
1247+  0000~                        wait242
1248+  0000~                        wait22
1249+  0000                         endm
1250+  0000             
1251+  0000                         macro   wait268
1252+  0000~                        wait258
1253+  0000~                        wait10
1254+  0000                         endm
1255+  0000             
1256+  0000                         macro   wait274
1257+  0000~                        wait2p16x 17
1258+  0000                         endm
1259+  0000             
1260+  0000                         macro   wait276
1261+  0000~                        wait258
1262+  0000~                        wait18
1263+  0000                         endm
1264+  0000             
1265+  0000                         macro   wait278
1266+  0000~                        wait274
1267+  0000~                        wait4
1268+  0000                         endm
1269+  0000             
1270+  0000                         macro   wait282
1271+  0000~                        wait274
1272+  0000~                        wait8
1273+  0000                         endm
1274+  0000             
1275+  0000                         macro   wait283
1276+  0000~                        wait274
1277+  0000~                        wait9
1278+  0000                         endm
1279+  0000             
1280+  0000                         macro   wait285
1281+  0000~                        wait274
1282+  0000~                        wait11
1283+  0000                         endm
1284+  0000             
1285+  0000                         macro   wait287
1286+  0000~                        wait274
1287+  0000~                        wait13
1288+  0000                         endm
1289+  0000             
1290+  0000                         macro   wait290
1291+  0000~                        wait2p16x 18
1292+  0000                         endm
1293+  0000             
1294+  0000                         macro   wait294
1295+  0000~                        wait290
1296+  0000~                        wait4
1297+  0000                         endm
1298+  0000             
1299+  0000                         macro   wait295
1300+  0000~                        wait274
1301+  0000~                        wait21
1302+  0000                         endm
1303+  0000             
1304+  0000                         macro   wait298
1305+  0000~                        wait290
1306+  0000~                        wait8
1307+  0000                         endm
1308+  0000             
1309+  0000                         macro   wait305
1310+  0000~                        wait290
1311+  0000~                        wait15
1312+  0000                         endm
1313+  0000             
1314+  0000                         macro   wait306
1315+  0000~                        wait2p16x 19
1316+  0000                         endm
1317+  0000             
1318+  0000                         macro   wait308
1319+  0000~                        wait290
1320+  0000~                        wait18
1321+  0000                         endm
1322+  0000             
1323+  0000                         macro   wait320
1324+  0000~                        wait306
1325+  0000~                        wait14
1326+  0000                         endm
1327+  0000             
1328+  0000                         macro   wait322
1329+  0000~                        wait2p16x 20
1330+  0000                         endm
1331+  0000             
1332+  0000                         macro   wait324
1333+  0000~                        wait306
1334+  0000~                        wait18
1335+  0000                         endm
1336+  0000             
1337+  0000                         macro   wait329
1338+  0000~                        wait322
1339+  0000~                        wait7
1340+  0000                         endm
1341+  0000             
1342+  0000                         macro   wait337
1343+  0000~                        wait322
1344+  0000~                        wait15
1345+  0000                         endm
1346+  0000             
1347+  0000                         macro   wait338
1348+  0000~                        wait2p16x 21
1349+  0000                         endm
1350+  0000             
1351+  0000                         macro   wait345
1352+  0000~                        wait338
1353+  0000~                        wait7
1354+  0000                         endm
1355+  0000             
1356+  0000                         macro   wait434
1357+  0000~                        wait2p16x 27
1358+  0000                         endm
1359+  0000             
1360+  0000                         macro   wait450
1361+  0000~                        wait2p16x 28
1362+  0000                         endm
1363+  0000             
1364+  0000                         macro   wait454
1365+  0000~                        wait450
1366+  0000~                        wait4
1367+  0000                         endm
1368+  0000             
1369+  0000                         macro   wait455
1370+  0000~                        wait434
1371+  0000~                        wait21
1372+  0000                         endm
1373+  0000             
1374+  0000                         macro   wait546
1375+  0000~                        wait2p16x 34
1376+  0000                         endm
1377+  0000             
1378+  0000                         macro   wait562
1379+  0000~                        wait2p16x 35
1380+  0000                         endm
1381+  0000             
1382+  0000                         macro   wait567
1383+  0000~                        wait546
1384+  0000~                        wait21
1385+  0000                         endm
1386+  0000             
1387+  0000                         macro   wait578
1388+  0000~                        wait2p16x 36
1389+  0000                         endm
1390+  0000             
1391+  0000                         macro   wait586
1392+  0000~                        wait578
1393+  0000~                        wait8
1394+  0000                         endm
1395+  0000             
1396+  0000                         macro   wait590
1397+  0000~                        wait578
1398+  0000~                        wait12
1399+  0000                         endm
1400+  0000             
1401+  0000                         macro   wait594
1402+  0000~                        wait2p16x 37
1403+  0000                         endm
1404+  0000             
1405+  0000                         macro   wait595
1406+  0000~                        wait578
1407+  0000~                        wait17
1408+  0000                         endm
1409+  0000             
1410+  0000                         macro   wait598
1411+  0000~                        wait594
1412+  0000~                        wait4
1413+  0000                         endm
1414+  0000             
1415+  0000                         macro   wait599
1416+  0000~                        wait578
1417+  0000~                        wait21
1418+  0000                         endm
1419+  0000             
1420+  0000                         macro   wait602
1421+  0000~                        wait594
1422+  0000~                        wait8
1423+  0000                         endm
1424+  0000             
1425+  0000                         macro   wait609
1426+  0000~                        wait594
1427+  0000~                        wait15
1428+  0000                         endm
1429+  0000             
1430+  0000                         macro   wait610
1431+  0000~                        wait2p16x 38
1432+  0000                         endm
1433+  0000             
1434+  0000                         macro   wait614
1435+  0000~                        wait610
1436+  0000~                        wait4
1437+  0000                         endm
1438+  0000             
1439+  0000                         macro   wait618
1440+  0000~                        wait610
1441+  0000~                        wait8
1442+  0000                         endm
1443+  0000             
1444+  0000                         macro   wait619
1445+  0000~                        wait610
1446+  0000~                        wait9
1447+  0000                         endm
1448+  0000             
1449+  0000                         macro   wait622
1450+  0000~                        wait610
1451+  0000~                        wait12
1452+  0000                         endm
1453+  0000             
1454+  0000                         macro   wait623
1455+  0000~                        wait610
1456+  0000~                        wait13
1457+  0000                         endm
1458+  0000             
1459+  0000                         macro   wait626
1460+  0000~                        wait2p16x 39
1461+  0000                         endm
1462+  0000             
1463+  0000                         macro   wait634
1464+  0000~                        wait626
1465+  0000~                        wait8
1466+  0000                         endm
1467+  0000             
1468+  0000                         macro   wait638
1469+  0000~                        wait626
1470+  0000~                        wait12
1471+  0000                         endm
0134   0000             
0135   0000             
0136   0000             ; handlePCMCommand
0137   0000             ; ----------------
0138   0000             ; ? ->  HL  -> ?
0139   0000             ; ? ->  BC  -> ?
0140   0000             ; ? ->  SP  -> ?
0141   0000             ;
0142   0000             ; handle PCM command for channel 'ch' (PCM id < 0x100)
0143   0000             ; = 157 cycles
0144   0000             
0145   0000                         macro handlePCMCommand ch
0146   0000~            
0147   0000~                        LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
0148   0000~                        LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
0149   0000~            
0150   0000~                        LD      A, C                    ; A = new prio              ' 4     |
0151   0000~                        CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
0152   0000~                        JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
0153   0000~            
0154   0000~                        wait96                          ; sync                      ' 96    |
0155   0000~                        JP      .end                    ;                           ' 10    | 106 (157)
0156   0000~            
0157   0000~            .play_new
0158   0000~                        LD      A, B                    ; A = SFX id                ' 4     |
0159   0000~                        OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
0160   0000~                        JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
0161   0000~            
0162   0000~                        LD      C, 0                    ; reset prio for stop       ' 7     | +2
0163   0000~            
0164   0000~            .PCM_play                                   ;                           ' 69
0165   0000~                        LD      (HL), C                 ; set new prio              ' 7     | (76)
0166   0000~            
0167   0000~                        LD      H, (ID_TABLE>>10)       ;                           ' 7     |
0168   0000~                        LD      L, A                    ;                           ' 4     |
0169   0000~                        ADD     HL, HL                  ;                           ' 6     |
0170   0000~                        ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
0171   0000~                        LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
0172   0000~            
0173   0000~                        POP     HL                      ; copy params               ' 10    |
0174   0000~                        LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
0175   0000~                        POP     HL                      ;                           ' 10    | 52 (157)
0176   0000~                        LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
0177   0000~            
0178   0000~            .end
0179   0000                         endm
0180   0000             
0181   0000             
0182   0000             ; handlePCMCommandXGM
0183   0000             ; -------------------
0184   0000             ; XGM data ->  DE  -> XGM data
0185   0000             ; PCM prio ->  C   -> ?
0186   0000             ; ?        ->  HL  -> ?
0187   0000             ; ?        ->  SP  -> ?
0188   0000             ;
0189   0000             ; handle PCM command for channel 'ch' for XGM music (PCM id < 0x40)
0190   0000             ; = 142 cycles
0191   0000             
0192   0000                         macro handlePCMCommandXGM ch
0193   0000~            
0194   0000~                        LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
0195   0000~                        LD      A, C                    ; A = new prio              ' 4     |
0196   0000~                        CP      (HL)                    ; compare new and old prio  ' 7     | (31)
0197   0000~                        JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
0198   0000~            
0199   0000~                        INC     E                       ; next XGM command          ' 4     |
0200   0000~                        wait97                          ; sync                      ' 97    | 111 (142)
0201   0000~                        JP      .end                    ; done                      ' 10    |
0202   0000~            
0203   0000~            .play_new
0204   0000~                        LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
0205   0000~                        INC     E                       ; next XGM command          ' 4     |
0206   0000~                        OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
0207   0000~                        JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
0208   0000~            
0209   0000~                        LD      C, 0                    ; reset prio for stop       ' 7     | +2
0210   0000~            
0211   0000~            .PCM_play
0212   0000~                        LD      (HL), C                 ; set new prio              ' 7     | (65)
0213   0000~            
0214   0000~                        LD      H, (ID_TABLE>>8)        ;                           ' 7     |
0215   0000~                        ADD     A                       ;                           ' 4     |
0216   0000~                        ADD     A                       ;                           ' 4     | 25 (90)
0217   0000~                        LD      L, A                    ; HL point on new PCM addr  ' 4     |
0218   0000~                        LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
0219   0000~            
0220   0000~                        POP     HL                      ; copy params               ' 10    |
0221   0000~                        LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
0222   0000~                        POP     HL                      ;                           ' 10    | 52 (142)
0223   0000~                        LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
0224   0000~            
0225   0000~            .end                                        ;                           ' 142
0226   0000~            
0227   0000                         endm
0228   0000             
0229   0000             
0230   0000             ; prepareChannelAlt
0231   0000             ; -----------------
0232   0000             ; ? ->  HL  ->  point to the sample source (ROM)
0233   0000             ; ? ->  DE  ->  point to write buffer
0234   0000             ;
0235   0000             ; set bank and prepare registers to play PCM channel 'ch'
0236   0000             ; = 176 cycles
0237   0000             
0238   0000                         macro prepareChannelAlt ch
0239   0000~            
0240   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0241   0000~            
0242   0000~                        LD      A, L                    ; A = bit 8-15          ' 4     |
0243   0000~                        RLA                             ; C flag = bit 15       ' 4     |
0244   0000~                        LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0245   0000~                        RLA                             ; A = bit 15-22         ' 4     |
0246   0000~            
0247   0000~                        setBank_DE                      ; set bank              ' 105   | (137)
0248   0000~            
0249   0000~                        LD      H, L                    ;                       ' 4     |
0250   0000~                        SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0251   0000~                        LD      L, 0                    ; HL = sample addr bank ' 7     |
0252   0000~            
0253   0000~                        LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0254   0000~            
0255   0000                         endm
0256   0000             
0257   0000             ; prepareChannel
0258   0000             ; --------------
0259   0000             ; ? ->  SP  ->  point to the sample source (ROM)
0260   0000             ; ? ->  HL  ->  point to write buffer
0261   0000             ;
0262   0000             ; set bank and prepare registers to play PCM channel 'ch'
0263   0000             ; = 178 cycles
0264   0000             
0265   0000                         macro prepareChannel ch
0266   0000~            
0267   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0268   0000~            
0269   0000~                        LD      A, L                    ; A = bit 8-15          ' 4     |
0270   0000~                        RLA                             ; C flag = bit 15       ' 4     |
0271   0000~                        LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0272   0000~                        RLA                             ; A = bit 15-22         ' 4     |
0273   0000~            
0274   0000~                        setBank_DE                      ; set bank              ' 105   | (137)
0275   0000~            
0276   0000~                        LD      H, L                    ;                       ' 4     |
0277   0000~                        SET     7, H                    ; HL |= 0x8000          ' 8     | 25 (162)
0278   0000~                        LD      L, 0                    ; HL = sample addr bank ' 7     |
0279   0000~                        LD      SP, HL                  ; SP point on sample    ' 6     |
0280   0000~            
0281   0000~                        LD      HL, (WRITEBUF)          ; HL = write buffer     ' 16    | (178)
0282   0000~            
0283   0000                         endm
0284   0000             
0285   0000             
0286   0000             ; stopChannel
0287   0000             ; -----------
0288   0000             ; ? ->  HL  -> STATUS
0289   0000             ;
0290   0000             ; set null sample play for channel 'ch'
0291   0000             ; = 75 cycles
0292   0000             
0293   0000                         macro stopChannel ch
0294   0000~            
0295   0000~                        LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0296   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0297   0000~                        LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0298   0000~                        LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0299   0000~            
0300   0000~                        XOR     A                       ;                           ' 4     |
0301   0000~                        LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0302   0000~            
0303   0000                         endm
0304   0000             
0305   0000             
0306   0000             ; updateChannelData
0307   0000             ; -----------------
0308   0000             ; ? ->  HL  -> ?
0309   0000             ;
0310   0000             ; update sample address and sample lenght
0311   0000             ; check if sample is done and stop it if needed
0312   0000             ; = 153 cycles
0313   0000             
0314   0000                         macro updateChannelData ch
0315   0000~            
0316   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0317   0000~                        INC     HL                      ;                       ' 6     | (38)
0318   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0319   0000~            
0320   0000~                        LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0321   0000~                        DEC     HL                      ;                       ' 6     | 22 (60)
0322   0000~            
0323   0000~                        LD      A, H                    ;                       ' 4     |
0324   0000~                        OR      L                       ;                       ' 4     | 18 (78)
0325   0000~                        JP      Z, .done                ; sample done ?         ' 10    |
0326   0000~            
0327   0000~                        LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
0328   0000~                        wait49                          ;                       ' 49    | 75 (153)
0329   0000~                        JP      .end                    ;                       ' 10    |
0330   0000~            
0331   0000~            .done
0332   0000~                        stopChannel ch                  ; stop channel          ' 75    | (153)
0333   0000~            
0334   0000~            .end
0335   0000~            
0336   0000                         endm
0337   0000             
0338   0000             
0339   0000             ; compareReadWrite
0340   0000             ; ----------------
0341   0000             ; read buffer  -> BC'
0342   0000             ; write buffer -> DE
0343   0000             ;                 ZF ->  Write == Read buffer
0344   0000             ;
0345   0000             ; compare read and write buffer
0346   0000             ; = 16 cycles
0347   0000             
0348   0000                         macro compareReadWrite
0349   0000~            
0350   0000~                        EXX                     ;                           ' 4     |
0351   0000~                        LD      A, B            ; A = read buffer high      ' 4     |
0352   0000~                        EXX                     ;                           ' 4     | 16
0353   0000~                        CP      D               ; compare write buffer high ' 4     |
0354   0000~            
0355   0000                         endm
0356   0000             
0357   0000             
0358   0000             ; readAndClear
0359   0000             ; ------------
0360   0000             ; point to sample source (ROM) ->  HL  ->  point to sample source (ROM)
0361   0000             ; point to write buffer        ->  DE  ->  point to write buffer
0362   0000             ; ?                            ->  PF  ->  0=done 1=not done
0363   0000             ;
0364   0000             ; read 1 sample from rom and write it in output buffer
0365   0000             ; = 19 cycles
0366   0000             
0367   0000                         macro readAndClear
0368   0000~            
0369   0000~                        LDI                     ;                           ' 16+3  | 19
0370   0000~            
0371   0000                         endm
0372   0000             
0373   0000             
0374   0000             ; readAndClear2
0375   0000             ; -------------
0376   0000             ; point to sample source (ROM) ->  HL  ->  point to sample source (ROM)
0377   0000             ; point to write buffer        ->  DE  ->  point to write buffer
0378   0000             ; ?                            ->  PF  ->  0=done 1=not done
0379   0000             ;
0380   0000             ; read 2 samples from rom and write them in write buffer
0381   0000             ; = 38 cycles
0382   0000             
0383   0000                         macro readAndClear2
0384   0000~            
0385   0000~                        LDI                     ;                           ' 16+3  |
0386   0000~                        LDI                     ;                           ' 16+3  | (38)
0387   0000~            
0388   0000                         endm
0389   0000             
0390   0000             
0391   0000             ; readAndMix2
0392   0000             ; -----------
0393   0000             ; point to sample source (ROM) ->  SP  ->  point to sample source (ROM)
0394   0000             ; point to write buffer        ->  HL  ->  point to write buffer
0395   0000             ; $80 ->  C
0396   0000             ;
0397   0000             ; read 2 samples and mix them in output buffer
0398   0000             ; = 80 (+22 when overflow)
0399   0000             
0400   0000                         macro readAndMix2
0401   0000~            
0402   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
0403   0000~            
0404   0000~                        LD      A, E            ; first sample              ' 4     |
0405   0000~                        ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
0406   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0407   0000~            
0408   0000~                        LD      A, C            ; fix overflow              ' 4     |
0409   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0410   0000~            
0411   0000~            .ok
0412   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0413   0000~                        INC     L               ;                           ' 4     | 11 (48)
0414   0000~            
0415   0000~                        LD      A, D            ; second sample             ' 4     |
0416   0000~                        ADD     (HL)            ; mix                       ' 7     | 21 (69)
0417   0000~                        JP      PO, .ok2        ; check overflow            ' 10    |
0418   0000~            
0419   0000~                        LD      A, C            ; fix overflow              ' 4     |
0420   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0421   0000~            
0422   0000~            .ok2
0423   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0424   0000~                        INC     L               ;                           ' 4     | 11 (80)
0425   0000~            
0426   0000                         endm                    ;                           ' 80 (+22)
0427   0000             
0428   0000             
0429   0000             ; readAndMix16WhilePlay3
0430   0000             ; ----------------------
0431   0000             ; point to sample source (ROM) ->  SP  ->  point to sample source (ROM)
0432   0000             ; point to write buffer        ->  HL  ->  point to write buffer
0433   0000             ; $80 ->  C
0434   0000             ;
0435   0000             ; read 16 samples and mix them in output buffer
0436   0000             ; = 2 samples + 240 cycles
0437   0000             
0438   0000                         macro readAndMix16WhilePlay3
0439   0000~            
0440   0000~                        sampleOutput            ;                           ' 36    | (36)
0441   0000~            
0442   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    |
0443   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    | 160 (196)
0444   0000~            
0445   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+6  | (212)
0446   0000~            
0447   0000~                        LD      A, E            ; first sample              ' 4     |
0448   0000~                        ADD     (HL)            ; mix with write buffer     ' 7     | 21 (233)
0449   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0450   0000~            
0451   0000~                        LD      A, C            ; fix overflow              ' 4     |
0452   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0453   0000~            
0454   0000~            .ok
0455   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0456   0000~                        INC     L               ;                           ' 4     | 11 (254-10)
0457   0000~            
0458   0000~                        sampleOutput            ; -10 --> too soon          ' 36    | (36-10)
0459   0000~            
0460   0000~                        LD      A, D            ; second sample             ' 4     |
0461   0000~                        ADD     (HL)            ; mix                       ' 7     | 21 (47)
0462   0000~                        JP      PO, .ok2        ; check overflow            ' 10    |
0463   0000~            
0464   0000~                        LD      A, C            ; fix overflow              ' 4     |
0465   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0466   0000~            
0467   0000~            .ok2
0468   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0469   0000~                        INC     L               ;                           ' 4     | 11 (58)
0470   0000~            
0471   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    |
0472   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    | 160 (218)
0473   0000~            
0474   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+6  | (234)
0475   0000~            
0476   0000~                        LD      A, E            ; first sample              ' 4     |
0477   0000~                        ADD     (HL)            ; mix with write buffer     ' 7     | 21 (254+1)
0478   0000~                        JP      PO, .ok3        ; check overflow            ' 10    |
0479   0000~            
0480   0000~                        LD      A, C            ; fix overflow              ' 4     |
0481   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0482   0000~            
0483   0000~            .ok3
0484   0000~                        LD      (HL), A         ; store it in write sample  ' 7     | (254+8)
0485   0000~            
0486   0000~                        sampleOutput            ; +8 --> too late           ' 36    | (36+8)
0487   0000~            
0488   0000~                        INC     L               ;                           ' 4     | (48)
0489   0000~            
0490   0000~                        LD      A, D            ; second sample             ' 4     |
0491   0000~                        ADD     (HL)            ; mix                       ' 7     | 21 (69)
0492   0000~                        JP      PO, .ok4        ; check overflow            ' 10    |
0493   0000~            
0494   0000~                        LD      A, C            ; fix overflow              ' 4     |
0495   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0496   0000~            
0497   0000~            .ok4
0498   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0499   0000~                        INC     L               ;                           ' 4     | 11 (80)
0500   0000~            
0501   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    |
0502   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    | 160 (240)
0503   0000~            
0504   0000                         endm                    ;                           ' 240
0505   0000             
0506   0000             
0507   0000             ; readMixAndUnsign
0508   0000             ; ----------------
0509   0000             ; point to sample source (ROM) ->  HL  ->  point to sample source (ROM)
0510   0000             ; point to write buffer        ->  DE  ->  point to write buffer
0511   0000             ; $80 ->  C
0512   0000             ;
0513   0000             ; read 1 sample and mix it with output buffer, then unsign it
0514   0000             ; = 46 (+11 when overflow)
0515   0000             
0516   0000                         macro readMixAndUnsign
0517   0000~            
0518   0000~                        LD      A, (DE)         ; read value in write buf   ' 7     |
0519   0000~                        ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
0520   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0521   0000~            
0522   0000~                        LD      A, C            ; fix overflow              ' 4     |
0523   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0524   0000~            
0525   0000~            .ok
0526   0000~                        ADD     C               ; unsign                    ' 4     |
0527   0000~                        LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
0528   0000~                        INC     E               ;                           ' 4     |
0529   0000~                        INC     L               ; next                      ' 4     |
0530   0000~            
0531   0000                         endm                    ;                           ' 46 (+11)
0532   0000             
0533   0000             
0534   0000             ; sampleOutput
0535   0000             ; ------------
0536   0000             ; YMPORT0     -> HL'
0537   0000             ; YMPORT1     -> DE'
0538   0000             ; read buffer -> BC' ->  read buffer
0539   0000             ;
0540   0000             ; output a sample to the DAC
0541   0000             ; = 36 cycles
0542   0000             
0543   0000                         macro sampleOutput
0544   0000~            
0545   0000~                        EXX                     ;                           ' 4     | 4
0546   0000~            
0547   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7     |
0548   0000~                        INC     BC              ; increment read address    ' 6     |
0549   0000~                        RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0550   0000~                        LD      (DE), A         ; play sample               ' 7     |
0551   0000~            
0552   0000~                        EXX                     ;                           ' 4     | (36)
0553   0000~            
0554   0000                         endm
0555   0000             
0556   0000             
0557   0000             ; sampleOutputSafe
0558   0000             ; ----------------
0559   0000             ; YMPORT0     -> HL'
0560   0000             ; YMPORT1     -> DE'
0561   0000             ; read buffer -> BC' ->  read buffer
0562   0000             ;
0563   0000             ; output a sample to the DAC
0564   0000             ; = 46 cycles
0565   0000             
0566   0000                         macro sampleOutputSafe
0567   0000~            
0568   0000~                        EXX                     ;                           ' 4     | 4
0569   0000~            
0570   0000~                        LD      (HL), $2A       ; prepare DAC write         ' 10    |
0571   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7     |
0572   0000~                        INC     BC              ; increment read address    ' 6     | 38 (42)
0573   0000~                        RES     2, B            ; read_address &= 0x03FF    ' 8     |
0574   0000~                        LD      (DE), A         ; play sample               ' 7     |
0575   0000~            
0576   0000~                        EXX                     ;                           ' 4     | (46)
0577   0000~            
0578   0000                         endm
0579   0000             
0580   0000             
0581   0000             ; waitYMReadyFast
0582   0000             ; ---------------
0583   0000             ; YMPORT0   -> HL
0584   0000             ;
0585   0000             ; wait until YM ready
0586   0000             ; = 22 cycles minimum (22 * X)
0587   0000             
0588   0000                         macro waitYMReadyFast
0589   0000~            
0590   0000~            .wait
0591   0000~                        BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
0592   0000~                        JP      NZ, .wait       ; wait while busy           ' 10    |
0593   0000~            
0594   0000                         endm
0595   0000             
0596   0000             
0597   0000             ; waitYMReady
0598   0000             ; -----------
0599   0000             ; YMPORT0   -> HL'
0600   0000             ;
0601   0000             ; wait until YM ready
0602   0000             ; = 30 cycles minimum (8 + (22 * X))
0603   0000             
0604   0000                         macro waitYMReady
0605   0000~            
0606   0000~                        EXX                     ;                           ' 4     | (4)
0607   0000~            
0608   0000~            .wait
0609   0000~                        BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
0610   0000~                        JP      NZ, .wait       ; wait while busy           ' 10    |
0611   0000~            
0612   0000~                        EXX                     ;                           ' 4     | (30)
0613   0000~            
0614   0000                         endm
0615   0000             
0616   0000             
0617   0000             ; ###########################       init       ##############################
0618   0000             
0619   0000                         ORG     $0000
0620   0000             
0621   0000             init
0622   0000 F3                      DI                      ; disable ints
0623   0001 31 00 16                LD      SP, STACK       ; setup stack
0624   0004 ED 56                   IM      $01             ; set int mode 1
0625   0006 AF                      XOR     A
0626   0007 32 02 01                LD      (STATUS), A     ; driver not ready
0627   000A 32 00 01                LD      (COMMAND), A    ; command cleared
0628   000D C3 00 02                JP      start           ; jump to start
0629   0010             
0630   0010             
0631   0010             ; ###########################       main       ##############################
0632   0010             
0633   0010 00                      BLOCK   $0200-$
0634   0200             
0635   0200             start
0636   0200             
0637   0200 21 04 01                LD      HL, PARAMS
0638   0203 3E 00                   LD      A, $00
0639   0205 06 40                   LD      B, $40
0640   0207             
0641   0207             cp_loop
0642   0207 77                      LD      (HL), A         ; clear parameters
0643   0208 23                      INC     HL
0644   0209 10 FC                   DJNZ    cp_loop
0645   020B             
0646   020B 21 64 01                LD      HL, YM_RR_OFF
0647   020E 3E FF                   LD      A, $FF
0648   0210 06 18                   LD      B, (6 * 4)
0649   0212             
0650   0212             off_loop
0651   0212 77                      LD      (HL), A         ; clear off settings
0652   0213 23                      INC     HL
0653   0214 10 FC                   DJNZ    off_loop
0654   0216             
0655   0216 21 7C 01                LD      HL, PSG_ENV_OFF
0656   0219             
0657   0219 36 9F                   LD      (HL), $9F       ; PSG channel 0 off
0658   021B 23                      INC     HL
0659   021C 36 BF                   LD      (HL), $BF       ; PSG channel 1 off
0660   021E 23                      INC     HL
0661   021F 36 DF                   LD      (HL), $DF       ; PSG channel 2 off
0662   0221 23                      INC     HL
0663   0222 36 FF                   LD      (HL), $FF       ; PSG channel 3 off
0664   0224             
0665   0224 21 64 01                LD      HL, YM_RR_OFF
0666   0227 11 44 01                LD      DE, YM_RR_SAV
0667   022A 01 1C 00                LD      BC, (6 * 4) + 4
0668   022D ED B0                   LDIR                    ; copy off settings to sav settings
0669   022F             
0670   022F 21 00 18                LD      HL, PCM_BUFFER
0671   0232 3E 80                   LD      A, $80
0672   0234 06 00                   LD      B, $00          ; for 256 * 4 bytes to clear
0673   0236             
0674   0236             cb_loop
0675   0236 77                      LD      (HL), A         ; initialise buffers to silent
0676   0237 23                      INC     HL
0677   0238 77                      LD      (HL), A
0678   0239 23                      INC     HL
0679   023A 77                      LD      (HL), A
0680   023B 23                      INC     HL
0681   023C 77                      LD      (HL), A
0682   023D 23                      INC     HL
0683   023E 10 F6                   DJNZ    cb_loop
0684   0240             
0685   0240 3E 00                   LD      A, $00
0686   0242             
0687   0242 21 60 01                LD      HL, YM_2B_SAV
0688   0245 77                      LD      (HL), A         ; DAC disabled by default
0689   0246 21 61 01                LD      HL, YM_2B_CNT
0690   0249 77                      LD      (HL), A         ; DAC disabled by default
0691   024A             
0692   024A 21 12 01                LD      HL, MODIFYING_F
0693   024D 77                      LD      (HL), A         ; clear modifying variable flag
0694   024E 21 13 01                LD      HL, PENDING_FRM
0695   0251 77                      LD      (HL), A         ; clear frame to process counter
0696   0252             
0697   0252 CD 59 14                CALL    initDAC         ; prepare DAC for output
0698   0255             
0699   0255 21 00 18                LD      HL, PCM_BUFFER0 ; initialise write and read buffer
0700   0258 22 38 01                LD      (WRITEBUF), HL
0701   025B 21 00 19                LD      HL, PCM_BUFFER1
0702   025E 22 3A 01                LD      (READBUF), HL
0703   0261             
0704   0261 44 4D                   LD      BC, HL          ; BC' point to read buffer
0705   0263 21 00 40                LD      HL, YMPORT0     ; HL' point to YMPORT0
0706   0266 11 01 40                LD      DE, YMPORT1     ; DE' point to YMPORT1
0707   0269 D9                      EXX
0708   026A             
0709   026A                         stopChannel 0           ; stop all channels
0709   026A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0709   026D 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0709   0270 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0709   0273 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0709   0276 AF          >            XOR     A                       ;                           ' 4     |
0709   0277 32 14 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0710   027A                         stopChannel 1
0710   027A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0710   027D 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0710   0280 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0710   0283 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0710   0286 AF          >            XOR     A                       ;                           ' 4     |
0710   0287 32 1C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0711   028A                         stopChannel 2
0711   028A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0711   028D 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0711   0290 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0711   0293 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0711   0296 AF          >            XOR     A                       ;                           ' 4     |
0711   0297 32 24 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0712   029A                         stopChannel 3
0712   029A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0712   029D 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0712   02A0 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0712   02A3 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0712   02A6 AF          >            XOR     A                       ;                           ' 4     |
0712   02A7 32 2C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0713   02AA             
0714   02AA 3E 80                   LD      A, STATREADY
0715   02AC 32 02 01                LD      (STATUS), A     ; driver ready
0716   02AF             
0717   02AF             main_loop
0718   02AF             
0719   02AF             ;    LD  A, (VCOUNTER)
0720   02AF             ;    LD  (DEBUG_1), A
0721   02AF             
0722   02AF             
0723   02AF             ; prepare XGM buffer
0724   02AF             ; ------------------
0725   02AF             
0726   02AF             ; $00
0727   02AF             
0728   02AF             ;    LD  A, (VCOUNTER)
0729   02AF             ;    LD  (DEBUG_6), A
0730   02AF             
0731   02AF                         sampleOutput                ;                       ' 36    | 36
0731   02AF D9          >            EXX                     ;                           ' 4     | 4
0731   02B0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0731   02B1 03          >            INC     BC              ; increment read address    ' 6     |
0731   02B2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0731   02B4 12          >            LD      (DE), A         ; play sample               ' 7     |
0731   02B5 D9          >            EXX                     ;                           ' 4     | (36)
0732   02B6             
0733   02B6 11 00 17                LD      DE, XGM_BUFFER      ; DE point to XGM buf   ' 10    |
0734   02B9 3A 02 01                LD      A, (STATUS)         ; A = STATUS            ' 13    |
0735   02BC CB 77                   BIT     XGM_PLAY_SFT, A     ; is XGM playing ?      ' 8     | 41 (77)
0736   02BE C2 CA 02                JP      NZ, has_xgm         ; go to prepare buf     ' 10    |
0737   02C1             
0738   02C1                         wait146                     ; sync                  ' 146   |
0738   02C1 3E 09       >            LD      A, w            ; 7-2
0738   02C3 3D          >            DEC     A               ; 4
0738   02C4 20 FD       >            JR      NZ, .loop       ; 12
0739   02C6 AF                      XOR     A                   ; A = 0                 ' 4     | 160 (237)
0740   02C7 C3 D8 04                JP      end_prep_xgm        ; preparation done      ' 10    |
0741   02CA             
0742   02CA             has_xgm
0743   02CA 2A 34 01                LD      HL, (XGM_ADDR)      ; XGM addr (b0-b15)     ' 16    |
0744   02CD 7C                      LD      A, H                ; A = XGM addr (b8-b15) ' 4     |
0745   02CE 17                      RLA                         ; CF = XGM addr b15     ' 4     | 146 (223)
0746   02CF 3A 36 01                LD      A, (XGM_ADDR+2)     ; A = sample addr (H)   ' 13    |
0747   02D2 17                      RLA                         ; sample addr (b22-b15) ' 4     |
0748   02D3                         setBank_BC                  ; setBank               ' 105   |
0748   02D3 01 00 60    >            LD  BC, BANKREG         ; BC = BANKREG              ' 10
0748   02D6 02          >            LD  (BC), A             ; #1 (bit 15)               ' 7
0748   02D7 1F          >            RRA                     ;                           ' 4
0748   02D8 02          >            LD  (BC), A             ; #2 (bit 16)               ' 7
0748   02D9 1F          >            RRA                     ;                           ' 4
0748   02DA 02          >            LD  (BC), A             ; #3 (bit 17)               ' 7
0748   02DB 1F          >            RRA                     ;                           ' 4
0748   02DC 02          >            LD  (BC), A             ; #4 (bit 18)               ' 7
0748   02DD 1F          >            RRA                     ;                           ' 4
0748   02DE 02          >            LD  (BC), A             ; #5 (bit 19)               ' 7
0748   02DF 1F          >            RRA                     ;                           ' 4
0748   02E0 02          >            LD  (BC), A             ; #6 (bit 20)               ' 7
0748   02E1 1F          >            RRA                     ;                           ' 4
0748   02E2 02          >            LD  (BC), A             ; #7 (bit 21)               ' 7
0748   02E3 1F          >            RRA                     ;                           ' 4
0748   02E4 02          >            LD  (BC), A             ; #8 (bit 22)               ' 7
0748   02E5 1F          >            RRA                     ;                           ' 4
0748   02E6 02          >            LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0749   02E7             
0750   02E7 7C                      LD      A, H                ; save H                ' 4     |
0751   02E8 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0752   02EA 06 00                   LD      B, $0               ; B = 0                 ' 7     | 30 (254-1)
0753   02EC 4E                      LD      C, (HL)             ; BC = bytes to process ' 7     |
0754   02ED 67                      LD      H, A                ; restore H             ' 4     |
0755   02EE             
0756   02EE             ; $00+X
0757   02EE                         sampleOutput                ;                       ' 36    | (36-1)
0757   02EE D9          >            EXX                     ;                           ' 4     | 4
0757   02EF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0757   02F0 03          >            INC     BC              ; increment read address    ' 6     |
0757   02F1 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0757   02F3 12          >            LD      (DE), A         ; play sample               ' 7     |
0757   02F4 D9          >            EXX                     ;                           ' 4     | (36)
0758   02F5             
0759   02F5 7D                      LD      A, L                ; A = addr low          ' 4     |
0760   02F6 81                      ADD     C                   ; compute new addr (L)  ' 4     |
0761   02F7 32 34 01                LD      (XGM_ADDR+0), A     ; store new addr (L)    ' 13    | 28 (63)
0762   02FA 38 1A                   JR      C, .split           ; carry --> separate    ' 7     |
0763   02FC             
0764   02FC             .no_split
0765   02FC                         wait104                     ; sync                  ' 104   | (167)
0765   02FC 3E 05       >            LD      A, w            ; 7-2
0765   02FE 3D          >            DEC     A               ; 4
0765   02FF 20 FD       >            JR      NZ, .loop       ; 12
0765   0301 ED 4F       >            LD      R, A
0765   0303 ED 4F       >            LD      R, A
0765   0305 00          >            NOP
0766   0306             
0767   0306 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0768   0308 23                      INC     HL                  ; HL = start frame data ' 6     |
0769   0309 AF                      XOR     A                   ; no second part        ' 4     |
0770   030A FD 67                   LD      IYH, A              ; IYH = sec part size   ' 8     | 44 (211)
0771   030C 00                      NOP                         ;                       ' 4     |
0772   030D 0D                      DEC     C                   ; first part size = 0 ? ' 4     |
0773   030E CA F5 03                JP      Z, .second_part     ; go to second part     ' 10    |
0774   0311             
0775   0311                         wait12                      ; sync                  ' 12    | 22 (233)
0775   0311 18 00       >            JR      .loop
0776   0313 C3 54 03                JP      .first_part_pre     ; start filling         ' 10    |
0777   0316             
0778   0316             .split
0779   0316 FD 67                   LD      IYH, A              ; IYH = sec part size   ' 8     |
0780   0318 91                      SUB     C                   ;                       ' 4     |
0781   0319 ED 44                   NEG                         ;                       ' 8     | 34 (97)
0782   031B 3D                      DEC     A                   ; A = (C - IYH) - 1     ' 4     |
0783   031C C2 3A 03                JP      NZ, .first_part_ok  ; not zero --> do it    ' 10    |
0784   031F             
0785   031F 7C                      LD      A, H                ; A = addr med (M)      ' 4     |
0786   0320 C6 01                   ADD     $1                  ; inc with CF set       ' 7     |
0787   0322 32 35 01                LD      (XGM_ADDR+1), A     ; store new addr (M)    ' 13    |
0788   0325 3A 36 01                LD      A, (XGM_ADDR+2)     ; load sample addr (H)  ' 13    |
0789   0328 88                      ADC     B                   ; inc                   ' 4     | 68 (164)
0790   0329 32 36 01                LD      (XGM_ADDR+2), A     ; store sample addr (H) ' 13    |
0791   032C CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0792   032E 23                      INC     HL                  ; HL = start frame data ' 6     |
0793   032F             
0794   032F                         wait36                      ; sync                  ' 36    |
0794   032F ED 4F       >            LD      R, A
0794   0331 ED 4F       >            LD      R, A
0794   0333 ED 4F       >            LD      R, A
0794   0335 ED 4F       >            LD      R, A
0795   0337 C3 F5 03                JP      .second_part        ; go second part        ' 10    | 65 (211)
0796   033A             
0797   033A             .first_part_ok
0798   033A 4F                      LD      C, A                ; C = first part size   ' 4     |
0799   033B 7C                      LD      A, H                ; A = addr med (M)      ' 4     |
0800   033C C6 01                   ADD     $1                  ; inc with CF set       ' 7     |
0801   033E 32 35 01                LD      (XGM_ADDR+1), A     ; store new addr (M)    ' 13    |
0802   0341 3A 36 01                LD      A, (XGM_ADDR+2)     ; load sample addr (H)  ' 13    | 72 (169)
0803   0344 88                      ADC     B                   ; inc                   ' 4     |
0804   0345 32 36 01                LD      (XGM_ADDR+2), A     ; store sample addr (H) ' 13    |
0805   0348 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0806   034A 23                      INC     HL                  ; HL = start frame data ' 6     |
0807   034B             
0808   034B                         wait64                      ; sync                  ' 64    | (233)
0808   034B 3E 03       >            LD      A, w            ; 7-2
0808   034D 3D          >            DEC     A               ; 4
0808   034E 20 FD       >            JR      NZ, .loop       ; 12
0808   0350 3E 00       >            LD      A, $0
0808   0352 3E 00       >            LD      A, $0
0809   0354             
0810   0354             .first_part_pre                         ;                       ' 233
0811   0354 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0812   0356 B9                      CP      C                   ; C < block size        ' 4     | 21 (254)
0813   0357 D2 80 03                JP      NC, .first_part_end ; go to last bytes      ' 10    |
0814   035A             
0815   035A             .first_part
0816   035A             ; $00+X
0817   035A                         sampleOutput                ;                       ' 36    | 36
0817   035A D9          >            EXX                     ;                           ' 4     | 4
0817   035B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0817   035C 03          >            INC     BC              ; increment read address    ' 6     |
0817   035D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0817   035F 12          >            LD      (DE), A         ; play sample               ' 7     |
0817   0360 D9          >            EXX                     ;                           ' 4     | (36)
0818   0361             
0819   0361 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0820   0363 ED A0                   LDI                         ; 11 bytes at once      ' 16+1  |
0821   0365 ED A0                   LDI                         ;                       ' 16+1  |
0822   0367 ED A0                   LDI                         ;                       ' 16+1  |
0823   0369 ED A0                   LDI                         ;                       ' 16+1  |
0824   036B ED A0                   LDI                         ;                       ' 16+1  | 187 (223)
0825   036D ED A0                   LDI                         ;                       ' 16+1  |
0826   036F ED A0                   LDI                         ;                       ' 16+1  |
0827   0371 ED A0                   LDI                         ;                       ' 16+1  |
0828   0373 ED A0                   LDI                         ;                       ' 16+1  |
0829   0375 ED A0                   LDI                         ;                       ' 16+1  |
0830   0377             
0831   0377                         wait10                      ; sync                  ' 10    |
0831   0377 C3 7A 03    >            JP      .loop
0832   037A 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0833   037C B9                      CP      C                   ; remaining > 11        ' 4     | 31 (254)
0834   037D DA 5A 03                JP      C, .first_part      ; continu block fill    ' 10    |
0835   0380             
0836   0380             .first_part_end
0837   0380             ; $00+X
0838   0380                         sampleOutput                ;                       ' 36    | 36
0838   0380 D9          >            EXX                     ;                           ' 4     | 4
0838   0381 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0838   0382 03          >            INC     BC              ; increment read address    ' 6     |
0838   0383 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0838   0385 12          >            LD      (DE), A         ; play sample               ' 7     |
0838   0386 D9          >            EXX                     ;                           ' 4     | (36)
0839   0387             
0840   0387 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0841   0389 E2 D4 03                JP      PO, .fst_part_d0    ;                       ' 10    | 27 (63)
0842   038C ED A0                   LDI                         ;                       ' 16+1  |
0843   038E E2 DA 03                JP      PO, .fst_part_d1    ;                       ' 10    | 27 (90)
0844   0391 ED A0                   LDI                         ;                       ' 16+1  |
0845   0393 E2 E0 03                JP      PO, .fst_part_d2    ;                       ' 10    | 27 (117)
0846   0396 ED A0                   LDI                         ;                       ' 16+1  |
0847   0398 E2 E6 03                JP      PO, .fst_part_d3    ;                       ' 10    | 27 (144)
0848   039B ED A0                   LDI                         ;                       ' 16+1  |
0849   039D E2 EC 03                JP      PO, .fst_part_d4    ;                       ' 10    | 27 (171)
0850   03A0 ED A0                   LDI                         ;                       ' 16+1  |
0851   03A2 E2 F2 03                JP      PO, .fst_part_d5    ;                       ' 10    | 27 (198)
0852   03A5             
0853   03A5                         wait56                      ; sync                  ' 56    | (254)
0853   03A5 3E 02       >            LD      A, w            ; 7-2
0853   03A7 3D          >            DEC     A               ; 4
0853   03A8 20 FD       >            JR      NZ, .loop       ; 12
0853   03AA ED 4F       >            LD      R, A
0853   03AC ED 4F       >            LD      R, A
0853   03AE 00          >            NOP
0854   03AF             
0855   03AF             ; $00+X
0856   03AF                         sampleOutput                ;                       ' 36    | 36
0856   03AF D9          >            EXX                     ;                           ' 4     | 4
0856   03B0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0856   03B1 03          >            INC     BC              ; increment read address    ' 6     |
0856   03B2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0856   03B4 12          >            LD      (DE), A         ; play sample               ' 7     |
0856   03B5 D9          >            EXX                     ;                           ' 4     | (36)
0857   03B6             
0858   03B6 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0859   03B8 E2 D4 03                JP      PO, .fst_part_d0    ;                       ' 10    | 27 (63)
0860   03BB ED A0                   LDI                         ;                       ' 16+1  |
0861   03BD E2 DA 03                JP      PO, .fst_part_d1    ;                       ' 10    | 27 (90)
0862   03C0 ED A0                   LDI                         ;                       ' 16+1  |
0863   03C2 E2 E0 03                JP      PO, .fst_part_d2    ;                       ' 10    | 27 (117)
0864   03C5 ED A0                   LDI                         ;                       ' 16+1  |
0865   03C7 E2 E6 03                JP      PO, .fst_part_d3    ;                       ' 10    | 27 (144)
0866   03CA ED A0                   LDI                         ;                       ' 16+1  |
0867   03CC E2 EC 03                JP      PO, .fst_part_d4    ;                       ' 10    | 27 (171)
0868   03CF ED A0                   LDI                         ;                       ' 16+1  |
0869   03D1 C3 F2 03                JP      .fst_part_d5        ;                       ' 10    | 27 (198)
0870   03D4             
0871   03D4             .fst_part_d0
0872   03D4                         wait27                      ; sync                  ' 27    | (90)
0872   03D4 ED 4F       >            LD      R, A
0872   03D6 ED 4F       >            LD      R, A
0872   03D8 ED 4F       >            LD      R, A
0873   03DA             .fst_part_d1
0874   03DA                         wait27                      ; sync                  ' 27    | (117)
0874   03DA ED 4F       >            LD      R, A
0874   03DC ED 4F       >            LD      R, A
0874   03DE ED 4F       >            LD      R, A
0875   03E0             .fst_part_d2
0876   03E0                         wait27                      ; sync                  ' 27    | (144)
0876   03E0 ED 4F       >            LD      R, A
0876   03E2 ED 4F       >            LD      R, A
0876   03E4 ED 4F       >            LD      R, A
0877   03E6             .fst_part_d3
0878   03E6                         wait27                      ; sync                  ' 27    | (171)
0878   03E6 ED 4F       >            LD      R, A
0878   03E8 ED 4F       >            LD      R, A
0878   03EA ED 4F       >            LD      R, A
0879   03EC             .fst_part_d4
0880   03EC                         wait27                      ; sync                  ' 27    | (198)
0880   03EC ED 4F       >            LD      R, A
0880   03EE ED 4F       >            LD      R, A
0880   03F0 ED 4F       >            LD      R, A
0881   03F2             .fst_part_d5
0882   03F2                         wait13                      ; sync                  ' 13    | (211)
0882   03F2 ED 4F       >            LD      R, A
0882   03F4 00          >            NOP
0883   03F5             
0884   03F5             .second_part                            ;                       ' 211
0885   03F5 00                      NOP                         ; sync                  ' 4
0886   03F6 FD 7C                   LD      A, IYH              ; A = second part size  ' 8     |
0887   03F8 B7                      OR      A                   ;                       ' 4     | 26 (237)
0888   03F9 CA D8 04                JP      Z, end_prep_xgm     ; done                  ' 10    |
0889   03FC             
0890   03FC                         wait17                      ; sync                  ' 17    | 254
0890   03FC C3 FF 03    >            JP      .loop
0890   03FF 3E 00       >            LD      A, $0
0891   0401             
0892   0401             ; $00+X
0893   0401                         sampleOutput                ;                       ' 36    | 36
0893   0401 D9          >            EXX                     ;                           ' 4     | 4
0893   0402 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0893   0403 03          >            INC     BC              ; increment read address    ' 6     |
0893   0404 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0893   0406 12          >            LD      (DE), A         ; play sample               ' 7     |
0893   0407 D9          >            EXX                     ;                           ' 4     | (36)
0894   0408             
0895   0408 2A 34 01                LD      HL, (XGM_ADDR)      ; XGM addr (b0-b15)     ' 16    |
0896   040B 7C                      LD      A, H                ; A = XGM addr (b8-b15) ' 4     |
0897   040C 17                      RLA                         ; CF = XGM addr b15     ' 4     | 146 (182)
0898   040D 3A 36 01                LD      A, (XGM_ADDR+2)     ; A = sample addr (H)   ' 13    |
0899   0410 17                      RLA                         ; sample addr (b22-b15) ' 4     |
0900   0411                         setBank_BC                  ; setBank               ' 105   |
0900   0411 01 00 60    >            LD  BC, BANKREG         ; BC = BANKREG              ' 10
0900   0414 02          >            LD  (BC), A             ; #1 (bit 15)               ' 7
0900   0415 1F          >            RRA                     ;                           ' 4
0900   0416 02          >            LD  (BC), A             ; #2 (bit 16)               ' 7
0900   0417 1F          >            RRA                     ;                           ' 4
0900   0418 02          >            LD  (BC), A             ; #3 (bit 17)               ' 7
0900   0419 1F          >            RRA                     ;                           ' 4
0900   041A 02          >            LD  (BC), A             ; #4 (bit 18)               ' 7
0900   041B 1F          >            RRA                     ;                           ' 4
0900   041C 02          >            LD  (BC), A             ; #5 (bit 19)               ' 7
0900   041D 1F          >            RRA                     ;                           ' 4
0900   041E 02          >            LD  (BC), A             ; #6 (bit 20)               ' 7
0900   041F 1F          >            RRA                     ;                           ' 4
0900   0420 02          >            LD  (BC), A             ; #7 (bit 21)               ' 7
0900   0421 1F          >            RRA                     ;                           ' 4
0900   0422 02          >            LD  (BC), A             ; #8 (bit 22)               ' 7
0900   0423 1F          >            RRA                     ;                           ' 4
0900   0424 02          >            LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0901   0425             
0902   0425 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     | 15 (197)
0903   0427 2E 00                   LD      L, 0                ;                       ' 7     |
0904   0429             
0905   0429                         wait21                      ; sync                  ' 21    | (218)
0905   0429 18 00       >            JR      .loop
0905   042B ED 4F       >            LD      R, A
0906   042D             
0907   042D 06 00                   LD      B, 0                ; B = 0                 ' 7     |
0908   042F FD 4C                   LD      C, IYH              ; BC = second part size ' 8     |
0909   0431 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     | 36 (254)
0910   0433 B9                      CP      C                   ; C < block size        ' 4     |
0911   0434 D2 5D 04                JP      NC, .sec_part_end   ; go to last bytes      ' 10    |
0912   0437             
0913   0437             ; $00+X
0914   0437             .sec_part_loop
0915   0437                         sampleOutput                ;                       ' 36    | 36
0915   0437 D9          >            EXX                     ;                           ' 4     | 4
0915   0438 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0915   0439 03          >            INC     BC              ; increment read address    ' 6     |
0915   043A CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0915   043C 12          >            LD      (DE), A         ; play sample               ' 7     |
0915   043D D9          >            EXX                     ;                           ' 4     | (36)
0916   043E             
0917   043E ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0918   0440 ED A0                   LDI                         ; 11 bytes at once      ' 16+1  |
0919   0442 ED A0                   LDI                         ;                       ' 16+1  |
0920   0444 ED A0                   LDI                         ;                       ' 16+1  |
0921   0446 ED A0                   LDI                         ;                       ' 16+1  |
0922   0448 ED A0                   LDI                         ;                       ' 16+1  | 187 (223)
0923   044A ED A0                   LDI                         ;                       ' 16+1  |
0924   044C ED A0                   LDI                         ;                       ' 16+1  |
0925   044E ED A0                   LDI                         ;                       ' 16+1  |
0926   0450 ED A0                   LDI                         ;                       ' 16+1  |
0927   0452 ED A0                   LDI                         ;                       ' 16+1  |
0928   0454             
0929   0454                         wait10                      ; sync                  ' 10    |
0929   0454 C3 57 04    >            JP      .loop
0930   0457 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0931   0459 B9                      CP      C                   ; remaining > 11        ' 4     | 31 (254)
0932   045A DA 37 04                JP      C, .sec_part_loop   ; continu block fill    ' 10    |
0933   045D             
0934   045D             .sec_part_end
0935   045D             ; $00+X
0936   045D                         sampleOutput                ;                       ' 36    | 36
0936   045D D9          >            EXX                     ;                           ' 4     | 4
0936   045E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0936   045F 03          >            INC     BC              ; increment read address    ' 6     |
0936   0460 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0936   0462 12          >            LD      (DE), A         ; play sample               ' 7     |
0936   0463 D9          >            EXX                     ;                           ' 4     | (36)
0937   0464             
0938   0464 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0939   0466 E2 B1 04                JP      PO, .sec_part_d0    ;                       ' 10    | 27 (63)
0940   0469 ED A0                   LDI                         ;                       ' 16+1  |
0941   046B E2 B7 04                JP      PO, .sec_part_d1    ;                       ' 10    | 27 (90)
0942   046E ED A0                   LDI                         ;                       ' 16+1  |
0943   0470 E2 BD 04                JP      PO, .sec_part_d2    ;                       ' 10    | 27 (117)
0944   0473 ED A0                   LDI                         ;                       ' 16+1  |
0945   0475 E2 C3 04                JP      PO, .sec_part_d3    ;                       ' 10    | 27 (144)
0946   0478 ED A0                   LDI                         ;                       ' 16+1  |
0947   047A E2 C9 04                JP      PO, .sec_part_d4    ;                       ' 10    | 27 (171)
0948   047D ED A0                   LDI                         ;                       ' 16+1  |
0949   047F E2 CF 04                JP      PO, .sec_part_d5    ;                       ' 10    | 27 (198)
0950   0482             
0951   0482                         wait56                      ; sync                  ' 56    | (254)
0951   0482 3E 02       >            LD      A, w            ; 7-2
0951   0484 3D          >            DEC     A               ; 4
0951   0485 20 FD       >            JR      NZ, .loop       ; 12
0951   0487 ED 4F       >            LD      R, A
0951   0489 ED 4F       >            LD      R, A
0951   048B 00          >            NOP
0952   048C             
0953   048C             ; $00+X
0954   048C                         sampleOutput                ;                       ' 36    | 36
0954   048C D9          >            EXX                     ;                           ' 4     | 4
0954   048D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0954   048E 03          >            INC     BC              ; increment read address    ' 6     |
0954   048F CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0954   0491 12          >            LD      (DE), A         ; play sample               ' 7     |
0954   0492 D9          >            EXX                     ;                           ' 4     | (36)
0955   0493             
0956   0493 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0957   0495 E2 B1 04                JP      PO, .sec_part_d0    ;                       ' 10    | 27 (63)
0958   0498 ED A0                   LDI                         ;                       ' 16+1  |
0959   049A E2 B7 04                JP      PO, .sec_part_d1    ;                       ' 10    | 27 (90)
0960   049D ED A0                   LDI                         ;                       ' 16+1  |
0961   049F E2 BD 04                JP      PO, .sec_part_d2    ;                       ' 10    | 27 (117)
0962   04A2 ED A0                   LDI                         ;                       ' 16+1  |
0963   04A4 E2 C3 04                JP      PO, .sec_part_d3    ;                       ' 10    | 27 (144)
0964   04A7 ED A0                   LDI                         ;                       ' 16+1  |
0965   04A9 E2 C9 04                JP      PO, .sec_part_d4    ;                       ' 10    | 27 (171)
0966   04AC ED A0                   LDI                         ;                       ' 16+1  |
0967   04AE C3 CF 04                JP      .sec_part_d5        ;                       ' 10    | 27 (198)
0968   04B1             
0969   04B1             .sec_part_d0
0970   04B1                         wait27                      ; sync                  '       | (90)
0970   04B1 ED 4F       >            LD      R, A
0970   04B3 ED 4F       >            LD      R, A
0970   04B5 ED 4F       >            LD      R, A
0971   04B7             .sec_part_d1
0972   04B7                         wait27                      ; sync                  '       | (117)
0972   04B7 ED 4F       >            LD      R, A
0972   04B9 ED 4F       >            LD      R, A
0972   04BB ED 4F       >            LD      R, A
0973   04BD             .sec_part_d2
0974   04BD                         wait27                      ; sync                  '       | (144)
0974   04BD ED 4F       >            LD      R, A
0974   04BF ED 4F       >            LD      R, A
0974   04C1 ED 4F       >            LD      R, A
0975   04C3             .sec_part_d3
0976   04C3                         wait27                      ; sync                  '       | (171)
0976   04C3 ED 4F       >            LD      R, A
0976   04C5 ED 4F       >            LD      R, A
0976   04C7 ED 4F       >            LD      R, A
0977   04C9             .sec_part_d4
0978   04C9                         wait27                      ; sync                  '       | (198)
0978   04C9 ED 4F       >            LD      R, A
0978   04CB ED 4F       >            LD      R, A
0978   04CD ED 4F       >            LD      R, A
0979   04CF             .sec_part_d5
0980   04CF                         wait35                      ; sync                  ' 35    |
0980   04CF 18 00       >            JR      .loop
0980   04D1 ED 4F       >            LD      R, A
0980   04D3 3E 00       >            LD      A, $0
0980   04D5 3E 00       >            LD      A, $0
0981   04D7 AF                      XOR     A                   ; A = 0                 ' 4     | 39 (237)
0982   04D8             
0983   04D8             end_prep_xgm                            ;                       ' 237
0984   04D8 12                      LD      (DE), A             ; XGM buf end with 0    ' 7     |
0985   04D9                         wait10                      ; sync                  ' 10    | 17 (254)
0985   04D9 C3 DC 04    >            JP      .loop
0986   04DC             
0987   04DC             
0988   04DC             ; XGM PREP DONE
0989   04DC             ; -------------
0990   04DC             
0991   04DC             ; $01+x
0992   04DC                         sampleOutput                ;                       ' 36    | (36)
0992   04DC D9          >            EXX                     ;                           ' 4     | 4
0992   04DD 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0992   04DE 03          >            INC     BC              ; increment read address    ' 6     |
0992   04DF CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0992   04E1 12          >            LD      (DE), A         ; play sample               ' 7     |
0992   04E2 D9          >            EXX                     ;                           ' 4     | (36)
0993   04E3             
0994   04E3                         wait172                     ; sync                  ' 172   | (208)
0994   04E3 3E 0A       >            LD      A, w            ; 7-2
0994   04E5 3D          >            DEC     A               ; 4
0994   04E6 20 FD       >            JR      NZ, .loop       ; 12
0994   04E8 C3 EB 04    >            JP      .loop
0995   04EB             
0996   04EB ED 5B 38 01             LD      DE, (WRITEBUF)      ; DE = write buf        ' 20    |
0997   04EF                         compareReadWrite            ; PCM buffer full ?     ' 16    | 46 (254)
0997   04EF D9          >            EXX                     ;                           ' 4     |
0997   04F0 78          >            LD      A, B            ; A = read buffer high      ' 4     |
0997   04F1 D9          >            EXX                     ;                           ' 4     | 16
0997   04F2 BA          >            CP      D               ; compare write buffer high ' 4     |
0998   04F3 CA C7 09                JP      Z, sync_frame       ; go to sync directly   ' 10    |
0999   04F6             
1000   04F6             pcm_mix
1001   04F6             
1002   04F6             ; PCM channel 0
1003   04F6             ; -------------
1004   04F6             
1005   04F6             ; $02+X
1006   04F6                         sampleOutput                ;                       ' 36    |
1006   04F6 D9          >            EXX                     ;                           ' 4     | 4
1006   04F7 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1006   04F8 03          >            INC     BC              ; increment read address    ' 6     |
1006   04F9 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1006   04FB 12          >            LD      (DE), A         ; play sample               ' 7     |
1006   04FC D9          >            EXX                     ;                           ' 4     | (36)
1007   04FD                         prepareChannelAlt 0         ;                       ' 176   |
1007   04FD 2A 16 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1007   0500 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1007   0501 17          >            RLA                             ; C flag = bit 15       ' 4     |
1007   0502 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1007   0503 17          >            RLA                             ; A = bit 15-22         ' 4     |
1007   0504 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1007   0507 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1007   0508 1F          >            RRA                     ;                           ' 4
1007   0509 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1007   050A 1F          >            RRA                     ;                           ' 4
1007   050B 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1007   050C 1F          >            RRA                     ;                           ' 4
1007   050D 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1007   050E 1F          >            RRA                     ;                           ' 4
1007   050F 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1007   0510 1F          >            RRA                     ;                           ' 4
1007   0511 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1007   0512 1F          >            RRA                     ;                           ' 4
1007   0513 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1007   0514 1F          >            RRA                     ;                           ' 4
1007   0515 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1007   0516 1F          >            RRA                     ;                           ' 4
1007   0517 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1007   0518 65          >            LD      H, L                    ;                       ' 4     |
1007   0519 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
1007   051B 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1007   051D ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
1008   0521 01 F2 00                LD      BC, 242             ; prepare loop counter  ' 10    | 254
1009   0524                         wait32                      ; sync                  ' 32    |
1009   0524 3E 00       >            LD      A, $0
1009   0526 00          >            NOP
1009   0527 ED 4F       >            LD      R, A
1009   0529 18 00       >            JR      .loop
1010   052B             
1011   052B             ; $03-$18+X
1012   052B             .loop_ch0
1013   052B                         sampleOutput                ;                       ' 36    |
1013   052B D9          >            EXX                     ;                           ' 4     | 4
1013   052C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1013   052D 03          >            INC     BC              ; increment read address    ' 6     |
1013   052E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1013   0530 12          >            LD      (DE), A         ; play sample               ' 7     |
1013   0531 D9          >            EXX                     ;                           ' 4     | (36)
1014   0532                         readAndClear2               ;                       ' 38    |
1014   0532 ED A0       >            LDI                     ;                           ' 16+3  |
1014   0534 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1015   0536                         readAndClear2               ; process 11 samples    ' 38    |
1015   0536 ED A0       >            LDI                     ;                           ' 16+3  |
1015   0538 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1016   053A                         readAndClear2               ;                       ' 38    | 254-1
1016   053A ED A0       >            LDI                     ;                           ' 16+3  |
1016   053C ED A0       >            LDI                     ;                           ' 16+3  | (38)
1017   053E                         readAndClear2               ;                       ' 38    |
1017   053E ED A0       >            LDI                     ;                           ' 16+3  |
1017   0540 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1018   0542                         readAndClear2               ;                       ' 38    |
1018   0542 ED A0       >            LDI                     ;                           ' 16+3  |
1018   0544 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1019   0546                         readAndClear                ;                       ' 19    |
1019   0546 ED A0       >            LDI                     ;                           ' 16+3  | 19
1020   0548                         wait8                       ; sync                  ' 8     |
1020   0548 00          >            NOP
1020   0549 00          >            NOP
1021   054A             
1022   054A                         sampleOutput                ; -1 --> a bit early    ' 36    |
1022   054A D9          >            EXX                     ;                           ' 4     | 4
1022   054B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1022   054C 03          >            INC     BC              ; increment read address    ' 6     |
1022   054D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1022   054F 12          >            LD      (DE), A         ; play sample               ' 7     |
1022   0550 D9          >            EXX                     ;                           ' 4     | (36)
1023   0551                         readAndClear2               ;                       ' 38    |
1023   0551 ED A0       >            LDI                     ;                           ' 16+3  |
1023   0553 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1024   0555                         readAndClear2               ; process 11 samples    ' 38    |
1024   0555 ED A0       >            LDI                     ;                           ' 16+3  |
1024   0557 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1025   0559                         readAndClear2               ;                       ' 38    | 254+1
1025   0559 ED A0       >            LDI                     ;                           ' 16+3  |
1025   055B ED A0       >            LDI                     ;                           ' 16+3  | (38)
1026   055D                         readAndClear2               ;                       ' 38    |
1026   055D ED A0       >            LDI                     ;                           ' 16+3  |
1026   055F ED A0       >            LDI                     ;                           ' 16+3  | (38)
1027   0561                         readAndClear2               ;                       ' 38    |
1027   0561 ED A0       >            LDI                     ;                           ' 16+3  |
1027   0563 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1028   0565                         readAndClear                ;                       ' 19    |
1028   0565 ED A0       >            LDI                     ;                           ' 16+3  | 19
1029   0567 EA 2B 05                JP      PE, .loop_ch0       ;                       ' 10    |
1030   056A             
1031   056A             ; $19+X
1032   056A                         sampleOutput                ;                       ' 36    |
1032   056A D9          >            EXX                     ;                           ' 4     | 4
1032   056B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1032   056C 03          >            INC     BC              ; increment read address    ' 6     |
1032   056D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1032   056F 12          >            LD      (DE), A         ; play sample               ' 7     |
1032   0570 D9          >            EXX                     ;                           ' 4     | (36)
1033   0571                         readAndClear2               ;                       ' 38    |
1033   0571 ED A0       >            LDI                     ;                           ' 16+3  |
1033   0573 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1034   0575                         readAndClear2               ; process 10 samples    ' 38    |
1034   0575 ED A0       >            LDI                     ;                           ' 16+3  |
1034   0577 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1035   0579                         readAndClear2               ;                       ' 38    | 254+10
1035   0579 ED A0       >            LDI                     ;                           ' 16+3  |
1035   057B ED A0       >            LDI                     ;                           ' 16+3  | (38)
1036   057D                         readAndClear2               ;                       ' 38    |
1036   057D ED A0       >            LDI                     ;                           ' 16+3  |
1036   057F ED A0       >            LDI                     ;                           ' 16+3  | (38)
1037   0581                         readAndClear2               ;                       ' 38    |
1037   0581 ED A0       >            LDI                     ;                           ' 16+3  |
1037   0583 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1038   0585                         readAndClear2               ;                       ' 38    |
1038   0585 ED A0       >            LDI                     ;                           ' 16+3  |
1038   0587 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1039   0589             
1040   0589             ; $1A+X
1041   0589                         sampleOutput                ; +10 --> too late      ' 36+10 |
1041   0589 D9          >            EXX                     ;                           ' 4     | 4
1041   058A 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1041   058B 03          >            INC     BC              ; increment read address    ' 6     |
1041   058C CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1041   058E 12          >            LD      (DE), A         ; play sample               ' 7     |
1041   058F D9          >            EXX                     ;                           ' 4     | (36)
1042   0590                         readAndClear2               ;                       ' 38    |
1042   0590 ED A0       >            LDI                     ;                           ' 16+3  |
1042   0592 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1043   0594                         updateChannelData 0         ; update channel data   ' 153   | 254
1043   0594 2A 16 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1043   0597 23          >            INC     HL                      ;                       ' 6     | (38)
1043   0598 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1043   059B 2A 18 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1043   059E 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1043   059F 7C          >            LD      A, H                    ;                       ' 4     |
1043   05A0 B5          >            OR      L                       ;                       ' 4     | 18 (78)
1043   05A1 CA B5 05    >            JP      Z, .done                ; sample done ?         ' 10    |
1043   05A4 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1043   05A7 ED 4F       >            LD      R, A
1043   05A9 ED 4F       >            LD      R, A
1043   05AB ED 4F       >            LD      R, A
1043   05AD ED 4F       >            LD      R, A
1043   05AF ED 4F       >            LD      R, A
1043   05B1 00          >            NOP
1043   05B2 C3 C5 05    >            JP      .end                    ;                       ' 10    |
1043   05B5 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1043   05B8 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1043   05BB 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1043   05BE 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1043   05C1 AF          >            XOR     A                       ;                           ' 4     |
1043   05C2 32 14 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1044   05C5                         wait17                      ; sync                  ' 17    |
1044   05C5 C3 C8 05    >            JP      .loop
1044   05C8 3E 00       >            LD      A, $0
1045   05CA             
1046   05CA             
1047   05CA             ;    LD  A, (VCOUNTER)
1048   05CA             ;    LD  (DEBUG_2), A
1049   05CA             
1050   05CA             ; PCM channel 1
1051   05CA             ; -------------
1052   05CA             
1053   05CA             ; $1B+X
1054   05CA                         sampleOutput                ;                       ' 36    |
1054   05CA D9          >            EXX                     ;                           ' 4     | 4
1054   05CB 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1054   05CC 03          >            INC     BC              ; increment read address    ' 6     |
1054   05CD CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1054   05CF 12          >            LD      (DE), A         ; play sample               ' 7     |
1054   05D0 D9          >            EXX                     ;                           ' 4     | (36)
1055   05D1                         prepareChannel 1            ;                       ' 178   | 254
1055   05D1 2A 1E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1055   05D4 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1055   05D5 17          >            RLA                             ; C flag = bit 15       ' 4     |
1055   05D6 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1055   05D7 17          >            RLA                             ; A = bit 15-22         ' 4     |
1055   05D8 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1055   05DB 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1055   05DC 1F          >            RRA                     ;                           ' 4
1055   05DD 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1055   05DE 1F          >            RRA                     ;                           ' 4
1055   05DF 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1055   05E0 1F          >            RRA                     ;                           ' 4
1055   05E1 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1055   05E2 1F          >            RRA                     ;                           ' 4
1055   05E3 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1055   05E4 1F          >            RRA                     ;                           ' 4
1055   05E5 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1055   05E6 1F          >            RRA                     ;                           ' 4
1055   05E7 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1055   05E8 1F          >            RRA                     ;                           ' 4
1055   05E9 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1055   05EA 1F          >            RRA                     ;                           ' 4
1055   05EB 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1055   05EC 65          >            LD      H, L                    ;                       ' 4     |
1055   05ED CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 25 (162)
1055   05EF 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1055   05F1 F9          >            LD      SP, HL                  ; SP point on sample    ' 6     |
1055   05F2 2A 38 01    >            LD      HL, (WRITEBUF)          ; HL = write buffer     ' 16    | (178)
1056   05F5 01 80 10                LD      BC, $1080           ; prepare loop counter  ' 10    |
1057   05F8                         wait30                      ; sync                  ' 30    |
1057   05F8 18 00       >            JR      .loop
1057   05FA ED 4F       >            LD      R, A
1057   05FC ED 4F       >            LD      R, A
1058   05FE             
1059   05FE             ; $1C-4B+X
1060   05FE             .loop_ch1
1061   05FE                         readAndMix16WhilePlay3      ;                       ' 240   |
1061   05FE D9          >            EXX                     ;                           ' 4     | 4
1061   05FF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1061   0600 03          >            INC     BC              ; increment read address    ' 6     |
1061   0601 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1061   0603 12          >            LD      (DE), A         ; play sample               ' 7     |
1061   0604 D9          >            EXX                     ;                           ' 4     | (36)
1061   0605 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1061   0606 7B          >            LD      A, E            ; first sample              ' 4     |
1061   0607 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1061   0608 E2 0E 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   060B 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   060C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   060E 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   060F 2C          >            INC     L               ;                           ' 4     | 11 (48)
1061   0610 7A          >            LD      A, D            ; second sample             ' 4     |
1061   0611 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   0612 E2 18 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   0615 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0616 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0618 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   0619 2C          >            INC     L               ;                           ' 4     | 11 (80)
1061   061A D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1061   061B 7B          >            LD      A, E            ; first sample              ' 4     |
1061   061C 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1061   061D E2 23 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   0620 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0621 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0623 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   0624 2C          >            INC     L               ;                           ' 4     | 11 (48)
1061   0625 7A          >            LD      A, D            ; second sample             ' 4     |
1061   0626 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   0627 E2 2D 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   062A 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   062B CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   062D 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   062E 2C          >            INC     L               ;                           ' 4     | 11 (80)
1061   062F D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (212)
1061   0630 7B          >            LD      A, E            ; first sample              ' 4     |
1061   0631 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (233)
1061   0632 E2 38 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   0635 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0636 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0638 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   0639 2C          >            INC     L               ;                           ' 4     | 11 (254-10)
1061   063A D9          >            EXX                     ;                           ' 4     | 4
1061   063B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1061   063C 03          >            INC     BC              ; increment read address    ' 6     |
1061   063D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1061   063F 12          >            LD      (DE), A         ; play sample               ' 7     |
1061   0640 D9          >            EXX                     ;                           ' 4     | (36)
1061   0641 7A          >            LD      A, D            ; second sample             ' 4     |
1061   0642 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (47)
1061   0643 E2 49 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   0646 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0647 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0649 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   064A 2C          >            INC     L               ;                           ' 4     | 11 (58)
1061   064B D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1061   064C 7B          >            LD      A, E            ; first sample              ' 4     |
1061   064D 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1061   064E E2 54 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   0651 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0652 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0654 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   0655 2C          >            INC     L               ;                           ' 4     | 11 (48)
1061   0656 7A          >            LD      A, D            ; second sample             ' 4     |
1061   0657 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   0658 E2 5E 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   065B 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   065C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   065E 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   065F 2C          >            INC     L               ;                           ' 4     | 11 (80)
1061   0660 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1061   0661 7B          >            LD      A, E            ; first sample              ' 4     |
1061   0662 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1061   0663 E2 69 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   0666 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0667 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0669 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   066A 2C          >            INC     L               ;                           ' 4     | 11 (48)
1061   066B 7A          >            LD      A, D            ; second sample             ' 4     |
1061   066C 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   066D E2 73 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   0670 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0671 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0673 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   0674 2C          >            INC     L               ;                           ' 4     | 11 (80)
1061   0675 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (234)
1061   0676 7B          >            LD      A, E            ; first sample              ' 4     |
1061   0677 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (254+1)
1061   0678 E2 7E 06    >            JP      PO, .ok3        ; check overflow            ' 10    |
1061   067B 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   067C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   067E 77          >            LD      (HL), A         ; store it in write sample  ' 7     | (254+8)
1061   067F D9          >            EXX                     ;                           ' 4     | 4
1061   0680 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1061   0681 03          >            INC     BC              ; increment read address    ' 6     |
1061   0682 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1061   0684 12          >            LD      (DE), A         ; play sample               ' 7     |
1061   0685 D9          >            EXX                     ;                           ' 4     | (36)
1061   0686 2C          >            INC     L               ;                           ' 4     | (48)
1061   0687 7A          >            LD      A, D            ; second sample             ' 4     |
1061   0688 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   0689 E2 8F 06    >            JP      PO, .ok4        ; check overflow            ' 10    |
1061   068C 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   068D CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   068F 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   0690 2C          >            INC     L               ;                           ' 4     | 11 (80)
1061   0691 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1061   0692 7B          >            LD      A, E            ; first sample              ' 4     |
1061   0693 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1061   0694 E2 9A 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   0697 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0698 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   069A 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   069B 2C          >            INC     L               ;                           ' 4     | 11 (48)
1061   069C 7A          >            LD      A, D            ; second sample             ' 4     |
1061   069D 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   069E E2 A4 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   06A1 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   06A2 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   06A4 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   06A5 2C          >            INC     L               ;                           ' 4     | 11 (80)
1061   06A6 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1061   06A7 7B          >            LD      A, E            ; first sample              ' 4     |
1061   06A8 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1061   06A9 E2 AF 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   06AC 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   06AD CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   06AF 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   06B0 2C          >            INC     L               ;                           ' 4     | 11 (48)
1061   06B1 7A          >            LD      A, D            ; second sample             ' 4     |
1061   06B2 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   06B3 E2 B9 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   06B6 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   06B7 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   06B9 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   06BA 2C          >            INC     L               ;                           ' 4     | 11 (80)
1062   06BB 05                      DEC     B                   ;                       ' 4     | 254*3
1063   06BC C2 FE 05                JP      NZ, .loop_ch1       ;                       ' 10    |
1064   06BF             
1065   06BF             ; $4C+X
1066   06BF                         sampleOutput                ;                       ' 36    |
1066   06BF D9          >            EXX                     ;                           ' 4     | 4
1066   06C0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1066   06C1 03          >            INC     BC              ; increment read address    ' 6     |
1066   06C2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1066   06C4 12          >            LD      (DE), A         ; play sample               ' 7     |
1066   06C5 D9          >            EXX                     ;                           ' 4     | (36)
1067   06C6                         updateChannelData 1         ; update channel data   ' 153   | 254
1067   06C6 2A 1E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1067   06C9 23          >            INC     HL                      ;                       ' 6     | (38)
1067   06CA 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1067   06CD 2A 20 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1067   06D0 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1067   06D1 7C          >            LD      A, H                    ;                       ' 4     |
1067   06D2 B5          >            OR      L                       ;                       ' 4     | 18 (78)
1067   06D3 CA E7 06    >            JP      Z, .done                ; sample done ?         ' 10    |
1067   06D6 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1067   06D9 ED 4F       >            LD      R, A
1067   06DB ED 4F       >            LD      R, A
1067   06DD ED 4F       >            LD      R, A
1067   06DF ED 4F       >            LD      R, A
1067   06E1 ED 4F       >            LD      R, A
1067   06E3 00          >            NOP
1067   06E4 C3 F7 06    >            JP      .end                    ;                       ' 10    |
1067   06E7 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1067   06EA 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1067   06ED 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1067   06F0 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1067   06F3 AF          >            XOR     A                       ;                           ' 4     |
1067   06F4 32 1C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1068   06F7                         wait65                      ; sync                  ' 65    |
1068   06F7 3E 03       >            LD      A, w            ; 7-2
1068   06F9 3D          >            DEC     A               ; 4
1068   06FA 20 FD       >            JR      NZ, .loop       ; 12
1068   06FC 00          >            NOP
1068   06FD 00          >            NOP
1068   06FE 3E 00       >            LD      A, $0
1069   0700             
1070   0700             
1071   0700             ;    LD  A, (VCOUNTER)
1072   0700             ;    LD  (DEBUG_3), A
1073   0700             
1074   0700             ; PCM channel 2
1075   0700             ; -------------
1076   0700             
1077   0700             ; $4D+X
1078   0700                         sampleOutput                ;                       ' 36    |
1078   0700 D9          >            EXX                     ;                           ' 4     | 4
1078   0701 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1078   0702 03          >            INC     BC              ; increment read address    ' 6     |
1078   0703 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1078   0705 12          >            LD      (DE), A         ; play sample               ' 7     |
1078   0706 D9          >            EXX                     ;                           ' 4     | (36)
1079   0707                         prepareChannel 2            ;                       ' 178   | 254
1079   0707 2A 26 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1079   070A 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1079   070B 17          >            RLA                             ; C flag = bit 15       ' 4     |
1079   070C 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1079   070D 17          >            RLA                             ; A = bit 15-22         ' 4     |
1079   070E 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1079   0711 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1079   0712 1F          >            RRA                     ;                           ' 4
1079   0713 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1079   0714 1F          >            RRA                     ;                           ' 4
1079   0715 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1079   0716 1F          >            RRA                     ;                           ' 4
1079   0717 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1079   0718 1F          >            RRA                     ;                           ' 4
1079   0719 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1079   071A 1F          >            RRA                     ;                           ' 4
1079   071B 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1079   071C 1F          >            RRA                     ;                           ' 4
1079   071D 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1079   071E 1F          >            RRA                     ;                           ' 4
1079   071F 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1079   0720 1F          >            RRA                     ;                           ' 4
1079   0721 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1079   0722 65          >            LD      H, L                    ;                       ' 4     |
1079   0723 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 25 (162)
1079   0725 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1079   0727 F9          >            LD      SP, HL                  ; SP point on sample    ' 6     |
1079   0728 2A 38 01    >            LD      HL, (WRITEBUF)          ; HL = write buffer     ' 16    | (178)
1080   072B 01 80 10                LD      BC, $1080           ; prepare loop counter  ' 10    |
1081   072E                         wait30                      ; sync                  ' 30    |
1081   072E 18 00       >            JR      .loop
1081   0730 ED 4F       >            LD      R, A
1081   0732 ED 4F       >            LD      R, A
1082   0734             
1083   0734             ; $4E-7D+X
1084   0734             .loop_ch2
1085   0734                         readAndMix16WhilePlay3      ;                       ' 240   |
1085   0734 D9          >            EXX                     ;                           ' 4     | 4
1085   0735 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1085   0736 03          >            INC     BC              ; increment read address    ' 6     |
1085   0737 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1085   0739 12          >            LD      (DE), A         ; play sample               ' 7     |
1085   073A D9          >            EXX                     ;                           ' 4     | (36)
1085   073B D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1085   073C 7B          >            LD      A, E            ; first sample              ' 4     |
1085   073D 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1085   073E E2 44 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   0741 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   0742 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   0744 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   0745 2C          >            INC     L               ;                           ' 4     | 11 (48)
1085   0746 7A          >            LD      A, D            ; second sample             ' 4     |
1085   0747 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   0748 E2 4E 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   074B 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   074C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   074E 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   074F 2C          >            INC     L               ;                           ' 4     | 11 (80)
1085   0750 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1085   0751 7B          >            LD      A, E            ; first sample              ' 4     |
1085   0752 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1085   0753 E2 59 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   0756 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   0757 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   0759 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   075A 2C          >            INC     L               ;                           ' 4     | 11 (48)
1085   075B 7A          >            LD      A, D            ; second sample             ' 4     |
1085   075C 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   075D E2 63 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   0760 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   0761 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   0763 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   0764 2C          >            INC     L               ;                           ' 4     | 11 (80)
1085   0765 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (212)
1085   0766 7B          >            LD      A, E            ; first sample              ' 4     |
1085   0767 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (233)
1085   0768 E2 6E 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   076B 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   076C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   076E 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   076F 2C          >            INC     L               ;                           ' 4     | 11 (254-10)
1085   0770 D9          >            EXX                     ;                           ' 4     | 4
1085   0771 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1085   0772 03          >            INC     BC              ; increment read address    ' 6     |
1085   0773 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1085   0775 12          >            LD      (DE), A         ; play sample               ' 7     |
1085   0776 D9          >            EXX                     ;                           ' 4     | (36)
1085   0777 7A          >            LD      A, D            ; second sample             ' 4     |
1085   0778 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (47)
1085   0779 E2 7F 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   077C 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   077D CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   077F 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   0780 2C          >            INC     L               ;                           ' 4     | 11 (58)
1085   0781 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1085   0782 7B          >            LD      A, E            ; first sample              ' 4     |
1085   0783 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1085   0784 E2 8A 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   0787 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   0788 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   078A 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   078B 2C          >            INC     L               ;                           ' 4     | 11 (48)
1085   078C 7A          >            LD      A, D            ; second sample             ' 4     |
1085   078D 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   078E E2 94 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   0791 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   0792 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   0794 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   0795 2C          >            INC     L               ;                           ' 4     | 11 (80)
1085   0796 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1085   0797 7B          >            LD      A, E            ; first sample              ' 4     |
1085   0798 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1085   0799 E2 9F 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   079C 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   079D CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   079F 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07A0 2C          >            INC     L               ;                           ' 4     | 11 (48)
1085   07A1 7A          >            LD      A, D            ; second sample             ' 4     |
1085   07A2 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   07A3 E2 A9 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   07A6 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07A7 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07A9 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07AA 2C          >            INC     L               ;                           ' 4     | 11 (80)
1085   07AB D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (234)
1085   07AC 7B          >            LD      A, E            ; first sample              ' 4     |
1085   07AD 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (254+1)
1085   07AE E2 B4 07    >            JP      PO, .ok3        ; check overflow            ' 10    |
1085   07B1 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07B2 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07B4 77          >            LD      (HL), A         ; store it in write sample  ' 7     | (254+8)
1085   07B5 D9          >            EXX                     ;                           ' 4     | 4
1085   07B6 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1085   07B7 03          >            INC     BC              ; increment read address    ' 6     |
1085   07B8 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1085   07BA 12          >            LD      (DE), A         ; play sample               ' 7     |
1085   07BB D9          >            EXX                     ;                           ' 4     | (36)
1085   07BC 2C          >            INC     L               ;                           ' 4     | (48)
1085   07BD 7A          >            LD      A, D            ; second sample             ' 4     |
1085   07BE 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   07BF E2 C5 07    >            JP      PO, .ok4        ; check overflow            ' 10    |
1085   07C2 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07C3 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07C5 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07C6 2C          >            INC     L               ;                           ' 4     | 11 (80)
1085   07C7 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1085   07C8 7B          >            LD      A, E            ; first sample              ' 4     |
1085   07C9 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1085   07CA E2 D0 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   07CD 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07CE CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07D0 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07D1 2C          >            INC     L               ;                           ' 4     | 11 (48)
1085   07D2 7A          >            LD      A, D            ; second sample             ' 4     |
1085   07D3 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   07D4 E2 DA 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   07D7 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07D8 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07DA 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07DB 2C          >            INC     L               ;                           ' 4     | 11 (80)
1085   07DC D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1085   07DD 7B          >            LD      A, E            ; first sample              ' 4     |
1085   07DE 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1085   07DF E2 E5 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   07E2 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07E3 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07E5 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07E6 2C          >            INC     L               ;                           ' 4     | 11 (48)
1085   07E7 7A          >            LD      A, D            ; second sample             ' 4     |
1085   07E8 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   07E9 E2 EF 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   07EC 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07ED CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07EF 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07F0 2C          >            INC     L               ;                           ' 4     | 11 (80)
1086   07F1 05                      DEC     B                   ;                       ' 4     | 254*3
1087   07F2 C2 34 07                JP      NZ, .loop_ch2       ;                       ' 10    |
1088   07F5             
1089   07F5             ; $7E+X
1090   07F5                         sampleOutput                ;                       ' 36    |
1090   07F5 D9          >            EXX                     ;                           ' 4     | 4
1090   07F6 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1090   07F7 03          >            INC     BC              ; increment read address    ' 6     |
1090   07F8 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1090   07FA 12          >            LD      (DE), A         ; play sample               ' 7     |
1090   07FB D9          >            EXX                     ;                           ' 4     | (36)
1091   07FC                         updateChannelData 2         ; update channel data   ' 153   | 254
1091   07FC 2A 26 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1091   07FF 23          >            INC     HL                      ;                       ' 6     | (38)
1091   0800 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1091   0803 2A 28 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1091   0806 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1091   0807 7C          >            LD      A, H                    ;                       ' 4     |
1091   0808 B5          >            OR      L                       ;                       ' 4     | 18 (78)
1091   0809 CA 1D 08    >            JP      Z, .done                ; sample done ?         ' 10    |
1091   080C 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1091   080F ED 4F       >            LD      R, A
1091   0811 ED 4F       >            LD      R, A
1091   0813 ED 4F       >            LD      R, A
1091   0815 ED 4F       >            LD      R, A
1091   0817 ED 4F       >            LD      R, A
1091   0819 00          >            NOP
1091   081A C3 2D 08    >            JP      .end                    ;                       ' 10    |
1091   081D 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1091   0820 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1091   0823 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1091   0826 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1091   0829 AF          >            XOR     A                       ;                           ' 4     |
1091   082A 32 24 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1092   082D                         wait65                      ; sync                  ' 65    |
1092   082D 3E 03       >            LD      A, w            ; 7-2
1092   082F 3D          >            DEC     A               ; 4
1092   0830 20 FD       >            JR      NZ, .loop       ; 12
1092   0832 00          >            NOP
1092   0833 00          >            NOP
1092   0834 3E 00       >            LD      A, $0
1093   0836             
1094   0836             
1095   0836             ;    LD  A, (VCOUNTER)
1096   0836             ;    LD  (DEBUG_4), A
1097   0836             
1098   0836             ; PCM channel 3
1099   0836             ; -------------
1100   0836             
1101   0836             ; $7F+X
1102   0836                         sampleOutput                ;                       ' 36    |
1102   0836 D9          >            EXX                     ;                           ' 4     | 4
1102   0837 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1102   0838 03          >            INC     BC              ; increment read address    ' 6     |
1102   0839 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1102   083B 12          >            LD      (DE), A         ; play sample               ' 7     |
1102   083C D9          >            EXX                     ;                           ' 4     | (36)
1103   083D                         prepareChannelAlt 3         ;                       ' 176   | 254
1103   083D 2A 2E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1103   0840 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1103   0841 17          >            RLA                             ; C flag = bit 15       ' 4     |
1103   0842 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1103   0843 17          >            RLA                             ; A = bit 15-22         ' 4     |
1103   0844 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1103   0847 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1103   0848 1F          >            RRA                     ;                           ' 4
1103   0849 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1103   084A 1F          >            RRA                     ;                           ' 4
1103   084B 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1103   084C 1F          >            RRA                     ;                           ' 4
1103   084D 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1103   084E 1F          >            RRA                     ;                           ' 4
1103   084F 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1103   0850 1F          >            RRA                     ;                           ' 4
1103   0851 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1103   0852 1F          >            RRA                     ;                           ' 4
1103   0853 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1103   0854 1F          >            RRA                     ;                           ' 4
1103   0855 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1103   0856 1F          >            RRA                     ;                           ' 4
1103   0857 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1103   0858 65          >            LD      H, L                    ;                       ' 4     |
1103   0859 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
1103   085B 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1103   085D ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
1104   0861 01 80 1C                LD      BC, $1C80           ; prepare loop counter  ' 10    |
1105   0864                         wait32                      ; sync                  ' 32    |
1105   0864 3E 00       >            LD      A, $0
1105   0866 00          >            NOP
1105   0867 ED 4F       >            LD      R, A
1105   0869 18 00       >            JR      .loop
1106   086B             
1107   086B             ; $80-$B7+X
1108   086B             .loop_ch3
1109   086B                         sampleOutput                ;                       ' 36    |
1109   086B D9          >            EXX                     ;                           ' 4     | 4
1109   086C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1109   086D 03          >            INC     BC              ; increment read address    ' 6     |
1109   086E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1109   0870 12          >            LD      (DE), A         ; play sample               ' 7     |
1109   0871 D9          >            EXX                     ;                           ' 4     | (36)
1110   0872                         readMixAndUnsign            ; mix/unsign 9 samples  ' 46    |
1110   0872 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1110   0873 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1110   0874 E2 7A 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1110   0877 79          >            LD      A, C            ; fix overflow              ' 4     |
1110   0878 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1110   087A 81          >            ADD     C               ; unsign                    ' 4     |
1110   087B 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1110   087C 1C          >            INC     E               ;                           ' 4     |
1110   087D 2C          >            INC     L               ; next                      ' 4     |
1111   087E                         readMixAndUnsign            ;                       ' 46    |
1111   087E 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1111   087F 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1111   0880 E2 86 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1111   0883 79          >            LD      A, C            ; fix overflow              ' 4     |
1111   0884 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1111   0886 81          >            ADD     C               ; unsign                    ' 4     |
1111   0887 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1111   0888 1C          >            INC     E               ;                           ' 4     |
1111   0889 2C          >            INC     L               ; next                      ' 4     |
1112   088A                         readMixAndUnsign            ;                       ' 46    | 254+12
1112   088A 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1112   088B 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1112   088C E2 92 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1112   088F 79          >            LD      A, C            ; fix overflow              ' 4     |
1112   0890 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1112   0892 81          >            ADD     C               ; unsign                    ' 4     |
1112   0893 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1112   0894 1C          >            INC     E               ;                           ' 4     |
1112   0895 2C          >            INC     L               ; next                      ' 4     |
1113   0896                         readMixAndUnsign            ;                       ' 46    |
1113   0896 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1113   0897 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1113   0898 E2 9E 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1113   089B 79          >            LD      A, C            ; fix overflow              ' 4     |
1113   089C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1113   089E 81          >            ADD     C               ; unsign                    ' 4     |
1113   089F 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1113   08A0 1C          >            INC     E               ;                           ' 4     |
1113   08A1 2C          >            INC     L               ; next                      ' 4     |
1114   08A2                         readMixAndUnsign            ;                       ' 46    |
1114   08A2 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1114   08A3 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1114   08A4 E2 AA 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1114   08A7 79          >            LD      A, C            ; fix overflow              ' 4     |
1114   08A8 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1114   08AA 81          >            ADD     C               ; unsign                    ' 4     |
1114   08AB 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1114   08AC 1C          >            INC     E               ;                           ' 4     |
1114   08AD 2C          >            INC     L               ; next                      ' 4     |
1115   08AE             
1116   08AE                         sampleOutput                ; +12 --> late          ' 36    |
1116   08AE D9          >            EXX                     ;                           ' 4     | 4
1116   08AF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1116   08B0 03          >            INC     BC              ; increment read address    ' 6     |
1116   08B1 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1116   08B3 12          >            LD      (DE), A         ; play sample               ' 7     |
1116   08B4 D9          >            EXX                     ;                           ' 4     | (36)
1117   08B5                         readMixAndUnsign            ;                       ' 46    |
1117   08B5 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1117   08B6 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1117   08B7 E2 BD 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1117   08BA 79          >            LD      A, C            ; fix overflow              ' 4     |
1117   08BB CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1117   08BD 81          >            ADD     C               ; unsign                    ' 4     |
1117   08BE 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1117   08BF 1C          >            INC     E               ;                           ' 4     |
1117   08C0 2C          >            INC     L               ; next                      ' 4     |
1118   08C1                         readMixAndUnsign            ;                       ' 46    |
1118   08C1 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1118   08C2 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1118   08C3 E2 C9 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1118   08C6 79          >            LD      A, C            ; fix overflow              ' 4     |
1118   08C7 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1118   08C9 81          >            ADD     C               ; unsign                    ' 4     |
1118   08CA 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1118   08CB 1C          >            INC     E               ;                           ' 4     |
1118   08CC 2C          >            INC     L               ; next                      ' 4     |
1119   08CD                         readMixAndUnsign            ;                       ' 46    | 254
1119   08CD 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1119   08CE 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1119   08CF E2 D5 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1119   08D2 79          >            LD      A, C            ; fix overflow              ' 4     |
1119   08D3 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1119   08D5 81          >            ADD     C               ; unsign                    ' 4     |
1119   08D6 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1119   08D7 1C          >            INC     E               ;                           ' 4     |
1119   08D8 2C          >            INC     L               ; next                      ' 4     |
1120   08D9                         readMixAndUnsign            ;                       ' 46    |
1120   08D9 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1120   08DA 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1120   08DB E2 E1 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1120   08DE 79          >            LD      A, C            ; fix overflow              ' 4     |
1120   08DF CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1120   08E1 81          >            ADD     C               ; unsign                    ' 4     |
1120   08E2 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1120   08E3 1C          >            INC     E               ;                           ' 4     |
1120   08E4 2C          >            INC     L               ; next                      ' 4     |
1121   08E5                         wait8                       ; sync                  ' 8     |
1121   08E5 00          >            NOP
1121   08E6 00          >            NOP
1122   08E7 05                      DEC     B                   ;                       ' 4     |
1123   08E8 C2 6B 08                JP      NZ, .loop_ch3       ;                       ' 10    |
1124   08EB             
1125   08EB             ; $B8+X
1126   08EB                         sampleOutput                ;                       ' 36    |
1126   08EB D9          >            EXX                     ;                           ' 4     | 4
1126   08EC 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1126   08ED 03          >            INC     BC              ; increment read address    ' 6     |
1126   08EE CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1126   08F0 12          >            LD      (DE), A         ; play sample               ' 7     |
1126   08F1 D9          >            EXX                     ;                           ' 4     | (36)
1127   08F2                         readMixAndUnsign            ;                       ' 46    |
1127   08F2 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1127   08F3 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1127   08F4 E2 FA 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1127   08F7 79          >            LD      A, C            ; fix overflow              ' 4     |
1127   08F8 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1127   08FA 81          >            ADD     C               ; unsign                    ' 4     |
1127   08FB 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1127   08FC 1C          >            INC     E               ;                           ' 4     |
1127   08FD 2C          >            INC     L               ; next                      ' 4     |
1128   08FE                         readMixAndUnsign            ;                       ' 46    | 254
1128   08FE 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1128   08FF 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1128   0900 E2 06 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1128   0903 79          >            LD      A, C            ; fix overflow              ' 4     |
1128   0904 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1128   0906 81          >            ADD     C               ; unsign                    ' 4     |
1128   0907 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1128   0908 1C          >            INC     E               ;                           ' 4     |
1128   0909 2C          >            INC     L               ; next                      ' 4     |
1129   090A                         readMixAndUnsign            ;                       ' 46    |
1129   090A 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1129   090B 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1129   090C E2 12 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1129   090F 79          >            LD      A, C            ; fix overflow              ' 4     |
1129   0910 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1129   0912 81          >            ADD     C               ; unsign                    ' 4     |
1129   0913 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1129   0914 1C          >            INC     E               ;                           ' 4     |
1129   0915 2C          >            INC     L               ; next                      ' 4     |
1130   0916                         readMixAndUnsign            ;                       ' 46    |
1130   0916 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1130   0917 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1130   0918 E2 1E 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1130   091B 79          >            LD      A, C            ; fix overflow              ' 4     |
1130   091C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1130   091E 81          >            ADD     C               ; unsign                    ' 4     |
1130   091F 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1130   0920 1C          >            INC     E               ;                           ' 4     |
1130   0921 2C          >            INC     L               ; next                      ' 4     |
1131   0922                         wait34                      ;                       ' 34    |
1131   0922 3E 02       >            LD      A, w            ; 7-2
1131   0924 3D          >            DEC     A               ; 4
1131   0925 20 FD       >            JR      NZ, .loop       ; 12
1132   0927             
1133   0927             ; $B9+X
1134   0927                         sampleOutput                ;                       ' 36    |
1134   0927 D9          >            EXX                     ;                           ' 4     | 4
1134   0928 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1134   0929 03          >            INC     BC              ; increment read address    ' 6     |
1134   092A CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1134   092C 12          >            LD      (DE), A         ; play sample               ' 7     |
1134   092D D9          >            EXX                     ;                           ' 4     | (36)
1135   092E                         updateChannelData 3         ; update channel data   ' 153   | 254
1135   092E 2A 2E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1135   0931 23          >            INC     HL                      ;                       ' 6     | (38)
1135   0932 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1135   0935 2A 30 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1135   0938 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1135   0939 7C          >            LD      A, H                    ;                       ' 4     |
1135   093A B5          >            OR      L                       ;                       ' 4     | 18 (78)
1135   093B CA 4F 09    >            JP      Z, .done                ; sample done ?         ' 10    |
1135   093E 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1135   0941 ED 4F       >            LD      R, A
1135   0943 ED 4F       >            LD      R, A
1135   0945 ED 4F       >            LD      R, A
1135   0947 ED 4F       >            LD      R, A
1135   0949 ED 4F       >            LD      R, A
1135   094B 00          >            NOP
1135   094C C3 5F 09    >            JP      .end                    ;                       ' 10    |
1135   094F 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1135   0952 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1135   0955 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1135   0958 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1135   095B AF          >            XOR     A                       ;                           ' 4     |
1135   095C 32 2C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1136   095F                         wait65                      ; sync                  ' 65    |
1136   095F 3E 03       >            LD      A, w            ; 7-2
1136   0961 3D          >            DEC     A               ; 4
1136   0962 20 FD       >            JR      NZ, .loop       ; 12
1136   0964 00          >            NOP
1136   0965 00          >            NOP
1136   0966 3E 00       >            LD      A, $0
1137   0968             
1138   0968             
1139   0968             ;    LD  A, (VCOUNTER)
1140   0968             ;    LD  (DEBUG_5), A
1141   0968             
1142   0968             ; next write buffer
1143   0968             ; -----------------
1144   0968             
1145   0968             ; $BA+X
1146   0968             next_write_buf
1147   0968                         sampleOutput                ;                       ' 36    | 36
1147   0968 D9          >            EXX                     ;                           ' 4     | 4
1147   0969 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1147   096A 03          >            INC     BC              ; increment read address    ' 6     |
1147   096B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1147   096D 12          >            LD      (DE), A         ; play sample               ' 7     |
1147   096E D9          >            EXX                     ;                           ' 4     | (36)
1148   096F             
1149   096F 3A 02 01                LD      A, (STATUS)         ; A = (STATUS)          ' 13    |
1150   0972 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1151   0975 36 2B                   LD      (HL), $2B           ; register = DAC enable ' 10    | 54 (90)
1152   0977 2C                      INC     L                   ; HL point on YM port1  ' 4     |
1153   0978 E6 0F                   AND     $0F                 ; PCM is playing ?      ' 7     |
1154   097A C2 8D 09                JP      NZ, .still_pcm      ;                       ' 10    |
1155   097D             
1156   097D 3A 61 01                LD      A, (YM_2B_CNT)      ;                       ' 13    |
1157   0980 B7                      OR      A                   ;                       ' 4     | 27 (117)
1158   0981 CA 9E 09                JP      Z, .no_pcm          ; DAC enabled expired ? ' 10    |
1159   0984             
1160   0984 3D                      DEC     A                   ; decrement expiration  ' 4     |
1161   0985 32 61 01                LD      (YM_2B_CNT), A      ;                       ' 13    |
1162   0988 3E 80                   LD      A, $80              ; DAC enabled           ' 7     | 34 (151)
1163   098A C3 A5 09                JP      .set_dac            ; assume still PCM      ' 10    |
1164   098D             
1165   098D             .still_pcm                              ;                       ' 90
1166   098D                         wait7                       ; sync                  ' 7     |
1166   098D 3E 00       >            LD      A, $0
1167   098F 3E 03                   LD      A, 3                ; set DAC ON expiration ' 7     | 27 (117)
1168   0991 32 61 01                LD      (YM_2B_CNT), A      ; 4 frames to expire    ' 13    |
1169   0994             
1170   0994                         wait17                      ; sync                  ' 17    |
1170   0994 C3 97 09    >            JP      .loop
1170   0997 3E 00       >            LD      A, $0
1171   0999 3E 80                   LD      A, $80              ; DAC enabled           ' 7     | 34 (151)
1172   099B C3 A5 09                JP      .set_dac            ; assume still PCM      ' 10    |
1173   099E             
1174   099E             .no_pcm                                 ;                       ' 117
1175   099E                         wait21                      ; sync                  ' 21    |
1175   099E 18 00       >            JR      .loop
1175   09A0 ED 4F       >            LD      R, A
1176   09A2 3A 60 01                LD      A, (YM_2B_SAV)      ; use current DAC on    ' 13    | 34 (151)
1177   09A5             
1178   09A5             .set_dac                                ;                       ' 151
1179   09A5 77                      LD      (HL), A             ; set DAC enabled       ' 7     |
1180   09A6 2D                      DEC     L                   ; HL point on YM port0  ' 4     | 11 (162)
1181   09A7             
1182   09A7 D9                      EXX                         ;                       ' 4     |
1183   09A8 78                      LD      A, B                ; A = read buffer high  ' 4     |
1184   09A9 32 3B 01                LD      (READBUF+1), A      ; save current read buf ' 13    | 25 (187)
1185   09AC D9                      EXX                         ;                       ' 4     |
1186   09AD             
1187   09AD BA                      CP      D                   ; prepare DAC write     ' 4     |
1188   09AE 36 2A                   LD      (HL), 0x2A          ; write buf == read buf ' 10    | 24 (211)
1189   09B0 CA BD 09                JP      Z, .continu_pcm     ; continu to fill pcm   ' 10    |
1190   09B3             
1191   09B3 14                      INC     D                   ; inc write addr        ' 4     |
1192   09B4 CB 92                   RES     2, D                ; write addr &= 0x03FF  ' 8     | 42 (254-1)
1193   09B6 ED 53 38 01             LD      (WRITEBUF), DE      ; save new write addr   ' 20    |
1194   09BA C3 C7 09                JP      sync_frame          ;                       ' 10    |
1195   09BD             
1196   09BD             .continu_pcm
1197   09BD 14                      INC     D                   ; inc write addr        ' 4     |
1198   09BE CB 92                   RES     2, D                ; write addr &= 0x03FF  ' 8     | 42 (254-1)
1199   09C0 ED 53 38 01             LD      (WRITEBUF), DE      ; save new write addr   ' 20    |
1200   09C4 C3 F6 04                JP      pcm_mix             ; do pcm mix again      ' 10    |
1201   09C7             
1202   09C7             ; sync
1203   09C7             ; ----
1204   09C7             
1205   09C7             ; $BB+X
1206   09C7             sync_frame                              ; DE point on write buf
1207   09C7                         sampleOutput                ;                       ' 36    | (36)
1207   09C7 D9          >            EXX                     ;                           ' 4     | 4
1207   09C8 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1207   09C9 03          >            INC     BC              ; increment read address    ' 6     |
1207   09CA CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1207   09CC 12          >            LD      (DE), A         ; play sample               ' 7     |
1207   09CD D9          >            EXX                     ;                           ' 4     | (36)
1208   09CE             
1209   09CE                         wait62                      ; sync                  ' 62    | (98)
1209   09CE 3E 03       >            LD      A, w            ; 7-2
1209   09D0 3D          >            DEC     A               ; 4
1209   09D1 20 FD       >            JR      NZ, .loop       ; 12
1209   09D3 18 00       >            JR      .loop
1210   09D5             
1211   09D5 2A 80 01                LD      HL, (IDLE_LOOP)     ;                       ' 16    |
1212   09D8 23                      INC     HL                  ; increment idle loop   ' 6     | 38 (136)
1213   09D9 22 80 01                LD      (IDLE_LOOP), HL     ;                       ' 16    |
1214   09DC             
1215   09DC 3A 13 01                LD      A, (PENDING_FRM)    ; A = frame to process  ' 13    |
1216   09DF B7                      OR      A                   ; something to do ?     ' 4     | 27 (163)
1217   09E0 C2 0B 0A                JP      NZ, .do_xgm         ; do the XGM frame      ' 10    |
1218   09E3             
1219   09E3 3A 11 01                LD      A, (PROTECT_ARG)    ; get BUS protect state ' 13    |
1220   09E6 B7                      OR      A                   ; protecting ?          ' 4     | 27 (190)
1221   09E7 C2 FB 09                JP      NZ, .wait_dma       ; wait for it           ' 10    |
1222   09EA             
1223   09EA D9                      EXX                         ;                       ' 4     |
1224   09EB 78                      LD      A, B                ; A = read buffer high  ' 4     |
1225   09EC 32 3B 01                LD      (READBUF+1), A      ; save current read buf ' 13    | 25 (215)
1226   09EF D9                      EXX                         ;                       ' 4     |
1227   09F0             
1228   09F0 C6 01                   ADD     $1                  ;                       ' 7     |
1229   09F2 CB 97                   RES     2, A                ; read pos &= 0x03FF    ' 8     |
1230   09F4 BA                      CP      D                   ; pcm buffer empty ?    ' 4     | 29 (244)
1231   09F5 CA 08 0A                JP      Z, .do_pcm          ; fill pcm              ' 10    |
1232   09F8             
1233   09F8 C3 C7 09                JP      sync_frame          ; wait for a frame      ' 10    | (254)
1234   09FB             
1235   09FB             .wait_dma                               ;                       ' 190
1236   09FB 2A 82 01                LD      HL, (WAIT_LOOP)     ;                       ' 16    |
1237   09FE 23                      INC     HL                  ; increment wait loop   ' 6     | 38 (228)
1238   09FF 22 82 01                LD      (WAIT_LOOP), HL     ;                       ' 16    |
1239   0A02             
1240   0A02                         wait16                      ; sync                  ' 16    |
1240   0A02 18 00       >            JR      .loop
1240   0A04 00          >            NOP
1241   0A05 C3 C7 09                JP      sync_frame          ; wait for a frame      ' 10    | 26 (254)
1242   0A08             
1243   0A08             .do_pcm                                 ;                       ' 244
1244   0A08 C3 F6 04                JP      pcm_mix             ; do pcm mix again      ' 10    | (254)
1245   0A0B             
1246   0A0B             .do_xgm                                 ;                       ' 163
1247   0A0B                         wait81                      ; sync                  ' 81    |
1247   0A0B 3E 04       >            LD      A, w            ; 7-2
1247   0A0D 3D          >            DEC     A               ; 4
1247   0A0E 20 FD       >            JR      NZ, .loop       ; 12
1247   0A10 00          >            NOP
1247   0A11 00          >            NOP
1247   0A12 3E 00       >            LD      A, $0
1248   0A14 11 00 17                LD      DE, XGM_BUFFER      ; DE point to XGM buf   ' 10    | 91 (254)
1249   0A17             
1250   0A17             
1251   0A17             ;    LD  A, (VCOUNTER)
1252   0A17             ;    LD  (DEBUG_7), A
1253   0A17             
1254   0A17             ; execute XGM command
1255   0A17             ; -------------------
1256   0A17             
1257   0A17             ; $BC+X+Y
1258   0A17             execute_xgm
1259   0A17                         sampleOutput                ;                       ' 36    | (36)
1259   0A17 D9          >            EXX                     ;                           ' 4     | 4
1259   0A18 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1259   0A19 03          >            INC     BC              ; increment read address    ' 6     |
1259   0A1A CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1259   0A1C 12          >            LD      (DE), A         ; play sample               ' 7     |
1259   0A1D D9          >            EXX                     ;                           ' 4     | (36)
1260   0A1E             
1261   0A1E 1A                      LD      A, (DE)             ; A = command           ' 7     |
1262   0A1F 32 24 0A                LD      (.ld_hl_xx + 1), A  ; set jump address      ' 13    |
1263   0A22 1C                      INC     E                   ; next command          ' 4     | 44 (80)
1264   0A23             .ld_hl_xx                               ;                       '       |
1265   0A23 2A 00 16                LD      HL, (JUMP_TABLE)    ; LD HL, (jt)           ' 16    |
1266   0A26 E9                      JP      (HL)                ;                       ' 4     |
1267   0A27             
1268   0A27             
1269   0A27             ; next frame command
1270   0A27             ; ------------------
1271   0A27             
1272   0A27             com_next_frame                          ; 00                    ' 80
1273   0A27 C3 F7 11                JP      xgm_done            ; XGM frame done        ' 10    | (90)
1274   0A2A             
1275   0A2A             
1276   0A2A             ; PSG command
1277   0A2A             ; -----------
1278   0A2A             
1279   0A2A             com_psg_tone_w0                         ; 10                    ' 80
1280   0A2A                         wait126                     ; sync                  ' 126   |
1280   0A2A 3E 07       >            LD      A, w            ; 7-2
1280   0A2C 3D          >            DEC     A               ; 4
1280   0A2D 20 FD       >            JR      NZ, .loop       ; 12
1280   0A2F 18 00       >            JR      .loop
1281   0A31 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 146 (226)
1282   0A34 C3 A1 0A                JP      psg_tone_write0     ;                       ' 10    |
1283   0A37             
1284   0A37             com_psg_tone_w1                         ; 11                    ' 80
1285   0A37                         wait108                     ; sync                  ' 108   |
1285   0A37 3E 06       >            LD      A, w            ; 7-2
1285   0A39 3D          >            DEC     A               ; 4
1285   0A3A 20 FD       >            JR      NZ, .loop       ; 12
1285   0A3C C3 3F 0A    >            JP      .loop
1286   0A3F 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 128 (208)
1287   0A42 C3 9E 0A                JP      psg_tone_write1     ;                       ' 10    |
1288   0A45             
1289   0A45             com_psg_tone_w2                         ; 12                    ' 80
1290   0A45                         wait90                      ; sync                  ' 90    |
1290   0A45 3E 05       >            LD      A, w            ; 7-2
1290   0A47 3D          >            DEC     A               ; 4
1290   0A48 20 FD       >            JR      NZ, .loop       ; 12
1290   0A4A 00          >            NOP
1290   0A4B 00          >            NOP
1291   0A4C 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 110 (190)
1292   0A4F C3 9B 0A                JP      psg_tone_write2     ;                       ' 10    |
1293   0A52             
1294   0A52             com_psg_tone_w3                         ; 13                    ' 80
1295   0A52                         wait72                      ; sync                  ' 72    |
1295   0A52 3E 03       >            LD      A, w            ; 7-2
1295   0A54 3D          >            DEC     A               ; 4
1295   0A55 20 FD       >            JR      NZ, .loop       ; 12
1295   0A57 ED 4F       >            LD      R, A
1295   0A59 ED 4F       >            LD      R, A
1295   0A5B 00          >            NOP
1296   0A5C 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 92 (172)
1297   0A5F C3 98 0A                JP      psg_tone_write3     ;                       ' 10    |
1298   0A62             
1299   0A62             com_psg_tone_w4                         ; 14                    ' 80
1300   0A62                         wait54                      ; sync                  ' 54    |
1300   0A62 3E 03       >            LD      A, w            ; 7-2
1300   0A64 3D          >            DEC     A               ; 4
1300   0A65 20 FD       >            JR      NZ, .loop       ; 12
1300   0A67 00          >            NOP
1301   0A68 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 74 (154)
1302   0A6B C3 95 0A                JP      psg_tone_write4     ;                       ' 10    |
1303   0A6E             
1304   0A6E             com_psg_tone_w5                         ; 15                    ' 80
1305   0A6E                         wait36                      ; sync                  ' 36    |
1305   0A6E ED 4F       >            LD      R, A
1305   0A70 ED 4F       >            LD      R, A
1305   0A72 ED 4F       >            LD      R, A
1305   0A74 ED 4F       >            LD      R, A
1306   0A76 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 56 (136)
1307   0A79 C3 92 0A                JP      psg_tone_write5     ;                       ' 10    |
1308   0A7C             
1309   0A7C             com_psg_tone_w6                         ; 16                    ' 80
1310   0A7C                         wait18                      ; sync                  ' 18    |
1310   0A7C ED 4F       >            LD      R, A
1310   0A7E ED 4F       >            LD      R, A
1311   0A80 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 38 (118)
1312   0A83 C3 8F 0A                JP      psg_tone_write6     ;                       ' 10    |
1313   0A86             
1314   0A86             com_psg_tone_w7                         ; 17                    ' 80
1315   0A86 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 20 (100)
1316   0A89 C3 8C 0A                JP      psg_tone_write7     ;                       ' 10    |
1317   0A8C             
1318   0A8C             
1319   0A8C             psg_tone_write7                         ;                       ' 100
1320   0A8C 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1321   0A8D 1C                      INC     E                   ; next data             ' 4     | 18 (118)
1322   0A8E 77                      LD      (HL), A             ; write to PSG          ' 7     |
1323   0A8F             
1324   0A8F             psg_tone_write6
1325   0A8F 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1326   0A90 1C                      INC     E                   ; next data             ' 4     | 18 (136)
1327   0A91 77                      LD      (HL), A             ; write to PSG          ' 7     |
1328   0A92             
1329   0A92             psg_tone_write5
1330   0A92 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1331   0A93 1C                      INC     E                   ; next data             ' 4     | 18 (154)
1332   0A94 77                      LD      (HL), A             ; write to PSG          ' 7     |
1333   0A95             
1334   0A95             psg_tone_write4
1335   0A95 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1336   0A96 1C                      INC     E                   ; next data             ' 4     | 18 (172)
1337   0A97 77                      LD      (HL), A             ; write to PSG          ' 7     |
1338   0A98             
1339   0A98             psg_tone_write3
1340   0A98 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1341   0A99 1C                      INC     E                   ; next data             ' 4     | 18 (190)
1342   0A9A 77                      LD      (HL), A             ; write to PSG          ' 7     |
1343   0A9B             
1344   0A9B             psg_tone_write2
1345   0A9B 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1346   0A9C 1C                      INC     E                   ; next data             ' 4     | 18 (208)
1347   0A9D 77                      LD      (HL), A             ; write to PSG          ' 7     |
1348   0A9E             
1349   0A9E             psg_tone_write1
1350   0A9E 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1351   0A9F 1C                      INC     E                   ; next data             ' 4     | 18 (226)
1352   0AA0 77                      LD      (HL), A             ; write to PSG          ' 7     |
1353   0AA1             
1354   0AA1             psg_tone_write0
1355   0AA1 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1356   0AA2 1C                      INC     E                   ; next data             ' 4     | 18 (244)
1357   0AA3 77                      LD      (HL), A             ; write to PSG          ' 7     |
1358   0AA4             
1359   0AA4 C3 17 0A                JP      execute_xgm         ;                       ' 10    | (254)
1360   0AA7             
1361   0AA7             
1362   0AA7             com_psg_env_w0                          ; 18                    ' 80
1363   0AA7                         wait72                      ; sync                  ' 72    |
1363   0AA7 3E 03       >            LD      A, w            ; 7-2
1363   0AA9 3D          >            DEC     A               ; 4
1363   0AAA 20 FD       >            JR      NZ, .loop       ; 12
1363   0AAC ED 4F       >            LD      R, A
1363   0AAE ED 4F       >            LD      R, A
1363   0AB0 00          >            NOP
1364   0AB1 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 102 (182)
1365   0AB4 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1366   0AB7 C3 1B 0B                JP      psg_env_write0      ;                       ' 10    |
1367   0ABA             
1368   0ABA             com_psg_env_w1                          ; 18                    ' 80
1369   0ABA                         wait10                      ; sync                  ' 10    |
1369   0ABA C3 BD 0A    >            JP      .loop
1370   0ABD 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 40 (120)
1371   0AC0 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1372   0AC3 C3 0E 0B                JP      psg_env_write1      ;                       ' 10    |
1373   0AC6             
1374   0AC6             com_psg_env_w2                          ; 18                    ' 80
1375   0AC6                         wait154                     ; sync                  ' 154   |
1375   0AC6 3E 09       >            LD      A, w            ; 7-2
1375   0AC8 3D          >            DEC     A               ; 4
1375   0AC9 20 FD       >            JR      NZ, .loop       ; 12
1375   0ACB 00          >            NOP
1375   0ACC 00          >            NOP
1376   0ACD 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 174 (254)
1377   0AD0 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1378   0AD3             
1379   0AD3                         sampleOutput                ;                       ' 36    | (36)
1379   0AD3 D9          >            EXX                     ;                           ' 4     | 4
1379   0AD4 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1379   0AD5 03          >            INC     BC              ; increment read address    ' 6     |
1379   0AD6 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1379   0AD8 12          >            LD      (DE), A         ; play sample               ' 7     |
1379   0AD9 D9          >            EXX                     ;                           ' 4     | (36)
1380   0ADA             
1381   0ADA                         wait12                      ; sync                  ' 12    |
1381   0ADA 18 00       >            JR      .loop
1382   0ADC C3 01 0B                JP      psg_env_write2      ;                       ' 10    | 22 (58)
1383   0ADF             
1384   0ADF             com_psg_env_w3                          ; 18                    ' 80
1385   0ADF                         wait110                     ; sync                  ' 110   |
1385   0ADF 3E 06       >            LD      A, w            ; 7-2
1385   0AE1 3D          >            DEC     A               ; 4
1385   0AE2 20 FD       >            JR      NZ, .loop       ; 12
1385   0AE4 18 00       >            JR      .loop
1386   0AE6 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 130 (210)
1387   0AE9 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1388   0AEC             
1389   0AEC             psg_env_write3
1390   0AEC 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1391   0AED 07                      RLCA                        ;                       ' 4     |
1392   0AEE 07                      RLCA                        ;                       ' 4     |
1393   0AEF 07                      RLCA                        ;                       ' 4     |
1394   0AF0 E6 03                   AND     $3                  ; A = channel number    ' 7     | 41 (254-3)
1395   0AF2 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     |
1396   0AF4 4F                      LD      C, A                ; BC point on save      ' 4     |
1397   0AF5                         wait4                       ; sync                  ' 4     |
1397   0AF5 00          >            NOP
1398   0AF6             
1399   0AF6                         sampleOutput                ;                       ' 36    | (36-3)
1399   0AF6 D9          >            EXX                     ;                           ' 4     | 4
1399   0AF7 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1399   0AF8 03          >            INC     BC              ; increment read address    ' 6     |
1399   0AF9 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1399   0AFB 12          >            LD      (DE), A         ; play sample               ' 7     |
1399   0AFC D9          >            EXX                     ;                           ' 4     | (36)
1400   0AFD             
1401   0AFD 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1402   0AFE 1C                      INC     E                   ; next data             ' 4     | 25 (58)
1403   0AFF 77                      LD      (HL), A             ; write to PSG          ' 7     |
1404   0B00 02                      LD      (BC), A             ; write to save         ' 7     |
1405   0B01             
1406   0B01             psg_env_write2                          ;                       ' 58
1407   0B01 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1408   0B02 07                      RLCA                        ;                       ' 4     |
1409   0B03 07                      RLCA                        ;                       ' 4     |
1410   0B04 07                      RLCA                        ;                       ' 4     |
1411   0B05 E6 03                   AND     $3                  ; A = channel number    ' 7     |
1412   0B07 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (120)
1413   0B09 4F                      LD      C, A                ; BC point on save      ' 4     |
1414   0B0A 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1415   0B0B 1C                      INC     E                   ; next data             ' 4     |
1416   0B0C 77                      LD      (HL), A             ; write to PSG          ' 7     |
1417   0B0D 02                      LD      (BC), A             ; write to save         ' 7     |
1418   0B0E             
1419   0B0E             psg_env_write1
1420   0B0E 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1421   0B0F 07                      RLCA                        ;                       ' 4     |
1422   0B10 07                      RLCA                        ;                       ' 4     |
1423   0B11 07                      RLCA                        ;                       ' 4     |
1424   0B12 E6 03                   AND     $3                  ; A = channel number    ' 7     |
1425   0B14 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (182)
1426   0B16 4F                      LD      C, A                ; BC point on save      ' 4     |
1427   0B17 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1428   0B18 1C                      INC     E                   ; next data             ' 4     |
1429   0B19 77                      LD      (HL), A             ; write to PSG          ' 7     |
1430   0B1A 02                      LD      (BC), A             ; write to save         ' 7     |
1431   0B1B             
1432   0B1B             psg_env_write0
1433   0B1B 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1434   0B1C 07                      RLCA                        ;                       ' 4     |
1435   0B1D 07                      RLCA                        ;                       ' 4     |
1436   0B1E 07                      RLCA                        ;                       ' 4     |
1437   0B1F E6 03                   AND     $3                  ; A = channel number    ' 7     |
1438   0B21 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (244)
1439   0B23 4F                      LD      C, A                ; BC point on save      ' 4     |
1440   0B24 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1441   0B25 1C                      INC     E                   ; next data             ' 4     |
1442   0B26 77                      LD      (HL), A             ; write to PSG          ' 7     |
1443   0B27 02                      LD      (BC), A             ; write to save         ' 7     |
1444   0B28             
1445   0B28 C3 17 0A                JP      execute_xgm         ;                       ' 10    | (254)
1446   0B2B             
1447   0B2B             
1448   0B2B             ; YM port0 command
1449   0B2B             ; ----------------
1450   0B2B             
1451   0B2B             com_ym_port0_w0                         ; 20                    ' 80
1452   0B2B                         wait36                      ; sync                  ' 36    |
1452   0B2B ED 4F       >            LD      R, A
1452   0B2D ED 4F       >            LD      R, A
1452   0B2F ED 4F       >            LD      R, A
1452   0B31 ED 4F       >            LD      R, A
1453   0B33 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 66 (146)
1454   0B36 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1455   0B39 C3 2B 0D                JP      ym_port_write0      ;                       ' 10    |
1456   0B3C             
1457   0B3C             com_ym_port0_w1                         ; 21                    ' 80
1458   0B3C 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1459   0B3F 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 30 (110)
1460   0B42 C3 25 0D                JP      ym_port_write1      ;                       ' 10    |
1461   0B45             
1462   0B45             com_ym_port0_w2                         ; 22                    ' 80
1463   0B45                         wait52                      ; sync                  ' 52    |
1463   0B45 3E 02       >            LD      A, w            ; 7-2
1463   0B47 3D          >            DEC     A               ; 4
1463   0B48 20 FD       >            JR      NZ, .loop       ; 12
1463   0B4A ED 4F       >            LD      R, A
1463   0B4C ED 4F       >            LD      R, A
1464   0B4E 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1465   0B51 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1466   0B54 C3 22 0E                JP      ym_port_write2      ;                       ' 10    |
1467   0B57             
1468   0B57             com_ym_port0_w3                         ; 23                    ' 80
1469   0B57 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1470   0B5A 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1471   0B5C 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1472   0B5D C3 01 0D                JP      com_ym_port_w3      ; execute               ' 10    |
1473   0B60             
1474   0B60             com_ym_port0_w4                         ; 24                    ' 80
1475   0B60                         wait144                     ; sync                  ' 144   |
1475   0B60 3E 08       >            LD      A, w            ; 7-2
1475   0B62 3D          >            DEC     A               ; 4
1475   0B63 20 FD       >            JR      NZ, .loop       ; 12
1475   0B65 3E 00       >            LD      A, $0
1475   0B67 3E 00       >            LD      A, $0
1476   0B69 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 178 (254+4)
1477   0B6C 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1478   0B6F D9                      EXX                         ;                       ' 4     |
1479   0B70 C3 00 0E                JP      ym_port_write4      ;                       ' 10    |
1480   0B73             
1481   0B73             com_ym_port0_w5                         ; 25                    ' 80
1482   0B73                         wait52                      ; sync                  ' 52    |
1482   0B73 3E 02       >            LD      A, w            ; 7-2
1482   0B75 3D          >            DEC     A               ; 4
1482   0B76 20 FD       >            JR      NZ, .loop       ; 12
1482   0B78 ED 4F       >            LD      R, A
1482   0B7A ED 4F       >            LD      R, A
1483   0B7C 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1484   0B7F 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1485   0B82 C3 ED 0D                JP      ym_port_write5      ;                       ' 10    |
1486   0B85             
1487   0B85             com_ym_port0_w6                         ; 26                    ' 80
1488   0B85 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1489   0B88 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1490   0B8A 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1491   0B8B C3 0A 0D                JP      com_ym_port_w6      ; execute               ' 10    |
1492   0B8E             
1493   0B8E             com_ym_port0_w7                         ; 27                    ' 80
1494   0B8E                         wait144                     ; sync                  ' 144   |
1494   0B8E 3E 08       >            LD      A, w            ; 7-2
1494   0B90 3D          >            DEC     A               ; 4
1494   0B91 20 FD       >            JR      NZ, .loop       ; 12
1494   0B93 3E 00       >            LD      A, $0
1494   0B95 3E 00       >            LD      A, $0
1495   0B97 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 178 (254+4)
1496   0B9A 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1497   0B9D D9                      EXX                         ;                       ' 4     |
1498   0B9E C3 CB 0D                JP      ym_port_write7      ;                       ' 10    |
1499   0BA1             
1500   0BA1             com_ym_port0_w8                         ; 28                    ' 80
1501   0BA1                         wait52                      ; sync                  ' 52    |
1501   0BA1 3E 02       >            LD      A, w            ; 7-2
1501   0BA3 3D          >            DEC     A               ; 4
1501   0BA4 20 FD       >            JR      NZ, .loop       ; 12
1501   0BA6 ED 4F       >            LD      R, A
1501   0BA8 ED 4F       >            LD      R, A
1502   0BAA 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1503   0BAD 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1504   0BB0 C3 B8 0D                JP      ym_port_write8      ;                       ' 10    |
1505   0BB3             
1506   0BB3             com_ym_port0_w9                         ; 29                    ' 80
1507   0BB3 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1508   0BB6 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1509   0BB8 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1510   0BB9 C3 13 0D                JP      com_ym_port_w9      ; execute               ' 10    |
1511   0BBC             
1512   0BBC             com_ym_port0_wA                         ; 2A                    ' 80
1513   0BBC                         wait144                     ; sync                  ' 144   |
1513   0BBC 3E 08       >            LD      A, w            ; 7-2
1513   0BBE 3D          >            DEC     A               ; 4
1513   0BBF 20 FD       >            JR      NZ, .loop       ; 12
1513   0BC1 3E 00       >            LD      A, $0
1513   0BC3 3E 00       >            LD      A, $0
1514   0BC5 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 178 (254+4)
1515   0BC8 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1516   0BCB D9                      EXX                         ;                       ' 4     |
1517   0BCC C3 96 0D                JP      ym_port_writeA      ;                       ' 10    |
1518   0BCF             
1519   0BCF             com_ym_port0_wB                         ; 2B                    ' 80
1520   0BCF                         wait52                      ; sync                  ' 52    |
1520   0BCF 3E 02       >            LD      A, w            ; 7-2
1520   0BD1 3D          >            DEC     A               ; 4
1520   0BD2 20 FD       >            JR      NZ, .loop       ; 12
1520   0BD4 ED 4F       >            LD      R, A
1520   0BD6 ED 4F       >            LD      R, A
1521   0BD8 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1522   0BDB 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1523   0BDE C3 83 0D                JP      ym_port_writeB      ;                       ' 10    |
1524   0BE1             
1525   0BE1             com_ym_port0_wC                         ; 2C                    ' 80
1526   0BE1 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1527   0BE4 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1528   0BE6 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1529   0BE7 C3 1C 0D                JP      com_ym_port_wC      ; execute               ' 10    |
1530   0BEA             
1531   0BEA             com_ym_port0_wD                         ; 2D                    ' 80
1532   0BEA                         wait144                     ; sync                  ' 144   |
1532   0BEA 3E 08       >            LD      A, w            ; 7-2
1532   0BEC 3D          >            DEC     A               ; 4
1532   0BED 20 FD       >            JR      NZ, .loop       ; 12
1532   0BEF 3E 00       >            LD      A, $0
1532   0BF1 3E 00       >            LD      A, $0
1533   0BF3 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1534   0BF6 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1535   0BF9 C3 60 0D                JP      ym_port_writeD      ;                       ' 10    |
1536   0BFC             
1537   0BFC             com_ym_port0_wE                         ; 2E                    ' 80
1538   0BFC                         wait36                      ; sync                  ' 36    |
1538   0BFC ED 4F       >            LD      R, A
1538   0BFE ED 4F       >            LD      R, A
1538   0C00 ED 4F       >            LD      R, A
1538   0C02 ED 4F       >            LD      R, A
1539   0C04 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 66 (146)
1540   0C07 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1541   0C0A C3 4A 0D                JP      ym_port_writeE      ;                       ' 10    |
1542   0C0D             
1543   0C0D             com_ym_port0_wF                         ; 2F                    ' 80
1544   0C0D 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1545   0C10 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 30 (110)
1546   0C13 C3 44 0D                JP      ym_port_writeF      ;                       ' 10    |
1547   0C16             
1548   0C16             
1549   0C16             ; YM port2 command
1550   0C16             ; ----------------
1551   0C16             
1552   0C16             com_ym_port2_w0                         ; 30                    ' 80
1553   0C16                         wait36                      ; sync                  ' 36    |
1553   0C16 ED 4F       >            LD      R, A
1553   0C18 ED 4F       >            LD      R, A
1553   0C1A ED 4F       >            LD      R, A
1553   0C1C ED 4F       >            LD      R, A
1554   0C1E 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 66 (146)
1555   0C21 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1556   0C24 C3 2B 0D                JP      ym_port_write0      ;                       ' 10    |
1557   0C27             
1558   0C27             com_ym_port2_w1                         ; 31                    ' 80
1559   0C27 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1560   0C2A 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    | 30 (110)
1561   0C2D C3 25 0D                JP      ym_port_write1      ;                       ' 10    |
1562   0C30             
1563   0C30             com_ym_port2_w2                         ; 32                    ' 80
1564   0C30                         wait52                      ; sync                  ' 52    |
1564   0C30 3E 02       >            LD      A, w            ; 7-2
1564   0C32 3D          >            DEC     A               ; 4
1564   0C33 20 FD       >            JR      NZ, .loop       ; 12
1564   0C35 ED 4F       >            LD      R, A
1564   0C37 ED 4F       >            LD      R, A
1565   0C39 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1566   0C3C 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1567   0C3F C3 22 0E                JP      ym_port_write2      ;                       ' 10    |
1568   0C42             
1569   0C42             com_ym_port2_w3                         ; 33                    ' 80
1570   0C42 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1571   0C45 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1572   0C47 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1573   0C48 C3 01 0D                JP      com_ym_port_w3      ; execute               ' 10    |
1574   0C4B             
1575   0C4B             com_ym_port2_w4                         ; 34                    ' 80
1576   0C4B                         wait144                     ; sync                  ' 144   |
1576   0C4B 3E 08       >            LD      A, w            ; 7-2
1576   0C4D 3D          >            DEC     A               ; 4
1576   0C4E 20 FD       >            JR      NZ, .loop       ; 12
1576   0C50 3E 00       >            LD      A, $0
1576   0C52 3E 00       >            LD      A, $0
1577   0C54 21 02 40                LD      HL, YMPORT2         ; HL point on YM port0  ' 10    | 178 (254+4)
1578   0C57 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1579   0C5A D9                      EXX                         ;                       ' 4     |
1580   0C5B C3 00 0E                JP      ym_port_write4      ;                       ' 10    |
1581   0C5E             
1582   0C5E             com_ym_port2_w5                         ; 35                    ' 80
1583   0C5E                         wait52                      ; sync                  ' 52    |
1583   0C5E 3E 02       >            LD      A, w            ; 7-2
1583   0C60 3D          >            DEC     A               ; 4
1583   0C61 20 FD       >            JR      NZ, .loop       ; 12
1583   0C63 ED 4F       >            LD      R, A
1583   0C65 ED 4F       >            LD      R, A
1584   0C67 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1585   0C6A 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1586   0C6D C3 ED 0D                JP      ym_port_write5      ;                       ' 10    |
1587   0C70             
1588   0C70             com_ym_port2_w6                         ; 36                    ' 80
1589   0C70 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1590   0C73 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1591   0C75 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1592   0C76 C3 0A 0D                JP      com_ym_port_w6      ; execute               ' 10    |
1593   0C79             
1594   0C79             com_ym_port2_w7                         ; 37                    ' 80
1595   0C79                         wait144                     ; sync                  ' 144   |
1595   0C79 3E 08       >            LD      A, w            ; 7-2
1595   0C7B 3D          >            DEC     A               ; 4
1595   0C7C 20 FD       >            JR      NZ, .loop       ; 12
1595   0C7E 3E 00       >            LD      A, $0
1595   0C80 3E 00       >            LD      A, $0
1596   0C82 21 02 40                LD      HL, YMPORT2         ; HL point on YM port0  ' 10    | 178 (254+4)
1597   0C85 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1598   0C88 D9                      EXX                         ;                       ' 4     |
1599   0C89 C3 CB 0D                JP      ym_port_write7      ;                       ' 10    |
1600   0C8C             
1601   0C8C             com_ym_port2_w8                         ; 38                    ' 80
1602   0C8C                         wait52                      ; sync                  ' 52    |
1602   0C8C 3E 02       >            LD      A, w            ; 7-2
1602   0C8E 3D          >            DEC     A               ; 4
1602   0C8F 20 FD       >            JR      NZ, .loop       ; 12
1602   0C91 ED 4F       >            LD      R, A
1602   0C93 ED 4F       >            LD      R, A
1603   0C95 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1604   0C98 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1605   0C9B C3 B8 0D                JP      ym_port_write8      ;                       ' 10    |
1606   0C9E             
1607   0C9E             com_ym_port2_w9                         ; 39                    ' 80
1608   0C9E 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1609   0CA1 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1610   0CA3 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1611   0CA4 C3 13 0D                JP      com_ym_port_w9      ; execute               ' 10    |
1612   0CA7             
1613   0CA7             com_ym_port2_wA                         ; 3A                    ' 80
1614   0CA7                         wait144                     ; sync                  ' 144   |
1614   0CA7 3E 08       >            LD      A, w            ; 7-2
1614   0CA9 3D          >            DEC     A               ; 4
1614   0CAA 20 FD       >            JR      NZ, .loop       ; 12
1614   0CAC 3E 00       >            LD      A, $0
1614   0CAE 3E 00       >            LD      A, $0
1615   0CB0 21 02 40                LD      HL, YMPORT2         ; HL point on YM port0  ' 10    | 178 (254+4)
1616   0CB3 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1617   0CB6 D9                      EXX                         ;                       ' 4     |
1618   0CB7 C3 96 0D                JP      ym_port_writeA      ;                       ' 10    |
1619   0CBA             
1620   0CBA             com_ym_port2_wB                         ; 3B                    ' 80
1621   0CBA                         wait52                      ; sync                  ' 52    |
1621   0CBA 3E 02       >            LD      A, w            ; 7-2
1621   0CBC 3D          >            DEC     A               ; 4
1621   0CBD 20 FD       >            JR      NZ, .loop       ; 12
1621   0CBF ED 4F       >            LD      R, A
1621   0CC1 ED 4F       >            LD      R, A
1622   0CC3 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1623   0CC6 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1624   0CC9 C3 83 0D                JP      ym_port_writeB      ;                       ' 10    |
1625   0CCC             
1626   0CCC             com_ym_port2_wC                         ; 3C                    ' 80
1627   0CCC 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1628   0CCF 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1629   0CD1 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1630   0CD2 C3 1C 0D                JP      com_ym_port_wC      ; execute               ' 10    |
1631   0CD5             
1632   0CD5             com_ym_port2_wD                         ; 3D                    ' 80
1633   0CD5                         wait144                     ; sync                  ' 144   |
1633   0CD5 3E 08       >            LD      A, w            ; 7-2
1633   0CD7 3D          >            DEC     A               ; 4
1633   0CD8 20 FD       >            JR      NZ, .loop       ; 12
1633   0CDA 3E 00       >            LD      A, $0
1633   0CDC 3E 00       >            LD      A, $0
1634   0CDE 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 174 (254)
1635   0CE1 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1636   0CE4 C3 60 0D                JP      ym_port_writeD      ;                       ' 10    |
1637   0CE7             
1638   0CE7             com_ym_port2_wE                         ; 3E                    ' 80
1639   0CE7                         wait36                      ; sync                  ' 36    |
1639   0CE7 ED 4F       >            LD      R, A
1639   0CE9 ED 4F       >            LD      R, A
1639   0CEB ED 4F       >            LD      R, A
1639   0CED ED 4F       >            LD      R, A
1640   0CEF 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 66 (146)
1641   0CF2 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1642   0CF5 C3 4A 0D                JP      ym_port_writeE      ;                       ' 10    |
1643   0CF8             
1644   0CF8             com_ym_port2_wF                         ; 3F                    ' 80
1645   0CF8 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1646   0CFB 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    | 30 (110)
1647   0CFE C3 44 0D                JP      ym_port_writeF      ;                       ' 10    |
1648   0D01             
1649   0D01             
1650   0D01             com_ym_port_w3                          ;                       ' 116
1651   0D01 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1652   0D02 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1653   0D03 1C                      INC     E                   ; next data             ' 4     |
1654   0D04 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1655   0D05 1C                      INC     E                   ; next data             ' 4     |
1656   0D06 02                      LD      (BC), A             ; write data to YM      ' 7     |
1657   0D07 C3 22 0E                JP      ym_port_write2      ;                       ' 10    | (162)
1658   0D0A             
1659   0D0A             com_ym_port_w6                          ;                       ' 116
1660   0D0A 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1661   0D0B 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1662   0D0C 1C                      INC     E                   ; next data             ' 4     |
1663   0D0D 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1664   0D0E 1C                      INC     E                   ; next data             ' 4     |
1665   0D0F 02                      LD      (BC), A             ; write data to YM      ' 7     |
1666   0D10 C3 ED 0D                JP      ym_port_write5      ;                       ' 10    | (162)
1667   0D13             
1668   0D13             com_ym_port_w9                          ;                       ' 116
1669   0D13 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1670   0D14 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1671   0D15 1C                      INC     E                   ; next data             ' 4     |
1672   0D16 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1673   0D17 1C                      INC     E                   ; next data             ' 4     |
1674   0D18 02                      LD      (BC), A             ; write data to YM      ' 7     |
1675   0D19 C3 B8 0D                JP      ym_port_write8      ;                       ' 10    | (162)
1676   0D1C             
1677   0D1C             com_ym_port_wC                          ;                       ' 116
1678   0D1C 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1679   0D1D 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1680   0D1E 1C                      INC     E                   ; next data             ' 4     |
1681   0D1F 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1682   0D20 1C                      INC     E                   ; next data             ' 4     |
1683   0D21 02                      LD      (BC), A             ; write data to YM      ' 7     |
1684   0D22 C3 83 0D                JP      ym_port_writeB      ;                       ' 10    | (162)
1685   0D25             
1686   0D25             
1687   0D25             ym_port_write1                          ;                       ' 110
1688   0D25 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1689   0D26 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1690   0D27 1C                      INC     E                   ; next data             ' 4     |
1691   0D28 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (146)
1692   0D29 1C                      INC     E                   ; next data             ' 4     |
1693   0D2A 02                      LD      (BC), A             ; write data to YM      ' 7     |
1694   0D2B             
1695   0D2B             ym_port_write0
1696   0D2B 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1697   0D2C                         waitYMReady                 ; wait YM to be ready   ' 30    |
1697   0D2C D9          >            EXX                     ;                           ' 4     | (4)
1697   0D2D CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1697   0D2F C2 2D 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1697   0D32 D9          >            EXX                     ;                           ' 4     | (30)
1698   0D33 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (212)
1699   0D34 1C                      INC     E                   ; next data             ' 4     |
1700   0D35 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1701   0D36 1C                      INC     E                   ; next data             ' 4     |
1702   0D37 02                      LD      (BC), A             ; write to YM           ' 7     |
1703   0D38             
1704   0D38 D9                      EXX                         ; switch to HL' (port0) ' 4     |
1705   0D39             .wait                                   ;                       '       |
1706   0D39 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1707   0D3B C2 39 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 40 (252)
1708   0D3E                                                     ;                       '       |
1709   0D3E 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1710   0D40 D9                      EXX                         ; switch back           ' 4     |
1711   0D41             
1712   0D41 C3 17 0A                JP      execute_xgm         ; +8 cycles here        ' 10    | (254+8)
1713   0D44             
1714   0D44             ym_port_writeF                          ;                       ' 110
1715   0D44 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1716   0D45 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1717   0D46 1C                      INC     E                   ; next data             ' 4     |
1718   0D47 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (146)
1719   0D48 1C                      INC     E                   ; next data             ' 4     |
1720   0D49 02                      LD      (BC), A             ; write data to YM      ' 7     |
1721   0D4A             
1722   0D4A             ym_port_writeE
1723   0D4A 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1724   0D4B                         waitYMReady                 ; wait YM to be ready   ' 30    |
1724   0D4B D9          >            EXX                     ;                           ' 4     | (4)
1724   0D4C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1724   0D4E C2 4C 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1724   0D51 D9          >            EXX                     ;                           ' 4     | (30)
1725   0D52 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (212)
1726   0D53 1C                      INC     E                   ; next data             ' 4     |
1727   0D54 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1728   0D55 1C                      INC     E                   ; next data             ' 4     |
1729   0D56 02                      LD      (BC), A             ; write to YM           ' 7     |
1730   0D57             
1731   0D57                         wait12                      ; sync                  ' 12    |
1731   0D57 18 00       >            JR      .loop
1732   0D59                         waitYMReady                 ; wait YM to be ready   ' 30    | 42 (254)
1732   0D59 D9          >            EXX                     ;                           ' 4     | (4)
1732   0D5A CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1732   0D5C C2 5A 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1732   0D5F D9          >            EXX                     ;                           ' 4     | (30)
1733   0D60             
1734   0D60             ym_port_writeD
1735   0D60                         sampleOutputSafe            ;                       ' 46    | (46)
1735   0D60 D9          >            EXX                     ;                           ' 4     | 4
1735   0D61 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
1735   0D63 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1735   0D64 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1735   0D65 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1735   0D67 12          >            LD      (DE), A         ; play sample               ' 7     |
1735   0D68 D9          >            EXX                     ;                           ' 4     | (46)
1736   0D69             
1737   0D69 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1738   0D6A                         waitYMReady                 ; wait YM to be ready   ' 30    |
1738   0D6A D9          >            EXX                     ;                           ' 4     | (4)
1738   0D6B CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1738   0D6D C2 6B 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1738   0D70 D9          >            EXX                     ;                           ' 4     | (30)
1739   0D71 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1740   0D72 1C                      INC     E                   ; next data             ' 4     |
1741   0D73 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1742   0D74 1C                      INC     E                   ; next data             ' 4     |
1743   0D75 02                      LD      (BC), A             ; write to YM           ' 7     |
1744   0D76             
1745   0D76             ;ym_port_writeC
1746   0D76 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1747   0D77                         waitYMReady                 ; wait YM to be ready   ' 30    |
1747   0D77 D9          >            EXX                     ;                           ' 4     | (4)
1747   0D78 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1747   0D7A C2 78 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1747   0D7D D9          >            EXX                     ;                           ' 4     | (30)
1748   0D7E 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1749   0D7F 1C                      INC     E                   ; next data             ' 4     |
1750   0D80 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1751   0D81 1C                      INC     E                   ; next data             ' 4     |
1752   0D82 02                      LD      (BC), A             ; write to YM           ' 7     |
1753   0D83             
1754   0D83             ym_port_writeB
1755   0D83 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1756   0D84                         waitYMReady                 ; wait YM to be ready   ' 30    |
1756   0D84 D9          >            EXX                     ;                           ' 4     | (4)
1756   0D85 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1756   0D87 C2 85 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1756   0D8A D9          >            EXX                     ;                           ' 4     | (30)
1757   0D8B 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1758   0D8C 1C                      INC     E                   ; next data             ' 4     |
1759   0D8D 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1760   0D8E 1C                      INC     E                   ; next data             ' 4     |
1761   0D8F 02                      LD      (BC), A             ; write to YM           ' 7     |
1762   0D90             
1763   0D90 D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1764   0D91             .wait                                   ;                       '       |
1765   0D91 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1766   0D93 C2 91 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1767   0D96             
1768   0D96             ym_port_writeA                          ;                       ' 4
1769   0D96 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1770   0D98 0A                      LD      A, (BC)             ;                       ' 7     |
1771   0D99 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1772   0D9A CB 90                   RES     2, B                ;                       ' 8     |
1773   0D9C 12                      LD      (DE), A             ;                       ' 7     |
1774   0D9D D9                      EXX                         ;                       ' 4     |
1775   0D9E             
1776   0D9E 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1777   0D9F                         waitYMReady                 ; wait YM to be ready   ' 30    |
1777   0D9F D9          >            EXX                     ;                           ' 4     | (4)
1777   0DA0 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1777   0DA2 C2 A0 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1777   0DA5 D9          >            EXX                     ;                           ' 4     | (30)
1778   0DA6 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1779   0DA7 1C                      INC     E                   ; next data             ' 4     |
1780   0DA8 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1781   0DA9 1C                      INC     E                   ; next data             ' 4     |
1782   0DAA 02                      LD      (BC), A             ; write to YM           ' 7     |
1783   0DAB             
1784   0DAB             ;ym_port_write9
1785   0DAB 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1786   0DAC                         waitYMReady                 ; wait YM to be ready   ' 30    |
1786   0DAC D9          >            EXX                     ;                           ' 4     | (4)
1786   0DAD CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1786   0DAF C2 AD 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1786   0DB2 D9          >            EXX                     ;                           ' 4     | (30)
1787   0DB3 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1788   0DB4 1C                      INC     E                   ; next data             ' 4     |
1789   0DB5 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1790   0DB6 1C                      INC     E                   ; next data             ' 4     |
1791   0DB7 02                      LD      (BC), A             ; write to YM           ' 7     |
1792   0DB8             
1793   0DB8             ym_port_write8
1794   0DB8 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1795   0DB9                         waitYMReady                 ; wait YM to be ready   ' 30    |
1795   0DB9 D9          >            EXX                     ;                           ' 4     | (4)
1795   0DBA CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1795   0DBC C2 BA 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1795   0DBF D9          >            EXX                     ;                           ' 4     | (30)
1796   0DC0 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1797   0DC1 1C                      INC     E                   ; next data             ' 4     |
1798   0DC2 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1799   0DC3 1C                      INC     E                   ; next data             ' 4     |
1800   0DC4 02                      LD      (BC), A             ; write to YM           ' 7     |
1801   0DC5             
1802   0DC5 D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1803   0DC6             .wait                                   ;                       '       |
1804   0DC6 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1805   0DC8 C2 C6 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1806   0DCB             
1807   0DCB             ym_port_write7                          ;                       ' 4
1808   0DCB 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1809   0DCD 0A                      LD      A, (BC)             ;                       ' 7     |
1810   0DCE 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1811   0DCF CB 90                   RES     2, B                ;                       ' 8     |
1812   0DD1 12                      LD      (DE), A             ;                       ' 7     |
1813   0DD2 D9                      EXX                         ;                       ' 4     |
1814   0DD3             
1815   0DD3 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1816   0DD4                         waitYMReady                 ; wait YM to be ready   ' 30    |
1816   0DD4 D9          >            EXX                     ;                           ' 4     | (4)
1816   0DD5 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1816   0DD7 C2 D5 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1816   0DDA D9          >            EXX                     ;                           ' 4     | (30)
1817   0DDB 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1818   0DDC 1C                      INC     E                   ; next data             ' 4     |
1819   0DDD 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1820   0DDE 1C                      INC     E                   ; next data             ' 4     |
1821   0DDF 02                      LD      (BC), A             ; write to YM           ' 7     |
1822   0DE0             
1823   0DE0             ;ym_port_write6
1824   0DE0 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1825   0DE1                         waitYMReady                 ; wait YM to be ready   ' 30    |
1825   0DE1 D9          >            EXX                     ;                           ' 4     | (4)
1825   0DE2 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1825   0DE4 C2 E2 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1825   0DE7 D9          >            EXX                     ;                           ' 4     | (30)
1826   0DE8 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1827   0DE9 1C                      INC     E                   ; next data             ' 4     |
1828   0DEA 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1829   0DEB 1C                      INC     E                   ; next data             ' 4     |
1830   0DEC 02                      LD      (BC), A             ; write to YM           ' 7     |
1831   0DED             
1832   0DED             ym_port_write5
1833   0DED 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1834   0DEE                         waitYMReady                 ; wait YM to be ready   ' 30    |
1834   0DEE D9          >            EXX                     ;                           ' 4     | (4)
1834   0DEF CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1834   0DF1 C2 EF 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1834   0DF4 D9          >            EXX                     ;                           ' 4     | (30)
1835   0DF5 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1836   0DF6 1C                      INC     E                   ; next data             ' 4     |
1837   0DF7 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1838   0DF8 1C                      INC     E                   ; next data             ' 4     |
1839   0DF9 02                      LD      (BC), A             ; write to YM           ' 7     |
1840   0DFA             
1841   0DFA D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1842   0DFB             .wait                                   ;                       '       |
1843   0DFB CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1844   0DFD C2 FB 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1845   0E00             
1846   0E00             ym_port_write4                          ;                       ' 4
1847   0E00 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1848   0E02 0A                      LD      A, (BC)             ;                       ' 7     |
1849   0E03 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1850   0E04 CB 90                   RES     2, B                ;                       ' 8     |
1851   0E06 12                      LD      (DE), A             ;                       ' 7     |
1852   0E07 D9                      EXX                         ;                       ' 4     |
1853   0E08             
1854   0E08 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1855   0E09                         waitYMReady                 ; wait YM to be ready   ' 30    |
1855   0E09 D9          >            EXX                     ;                           ' 4     | (4)
1855   0E0A CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1855   0E0C C2 0A 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1855   0E0F D9          >            EXX                     ;                           ' 4     | (30)
1856   0E10 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1857   0E11 1C                      INC     E                   ; next data             ' 4     |
1858   0E12 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1859   0E13 1C                      INC     E                   ; next data             ' 4     |
1860   0E14 02                      LD      (BC), A             ; write to YM           ' 7     |
1861   0E15             
1862   0E15             ;ym_port_write3
1863   0E15 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1864   0E16                         waitYMReady                 ; wait YM to be ready   ' 30    |
1864   0E16 D9          >            EXX                     ;                           ' 4     | (4)
1864   0E17 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1864   0E19 C2 17 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1864   0E1C D9          >            EXX                     ;                           ' 4     | (30)
1865   0E1D 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1866   0E1E 1C                      INC     E                   ; next data             ' 4     |
1867   0E1F 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1868   0E20 1C                      INC     E                   ; next data             ' 4     |
1869   0E21 02                      LD      (BC), A             ; write to YM           ' 7     |
1870   0E22             
1871   0E22             ym_port_write2
1872   0E22 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1873   0E23                         waitYMReady                 ; wait YM to be ready   ' 30    |
1873   0E23 D9          >            EXX                     ;                           ' 4     | (4)
1873   0E24 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1873   0E26 C2 24 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1873   0E29 D9          >            EXX                     ;                           ' 4     | (30)
1874   0E2A 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1875   0E2B 1C                      INC     E                   ; next data             ' 4     |
1876   0E2C 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1877   0E2D 1C                      INC     E                   ; next data             ' 4     |
1878   0E2E 02                      LD      (BC), A             ; write to YM           ' 7     |
1879   0E2F             
1880   0E2F D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1881   0E30             .wait                                   ;                       '       |
1882   0E30 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1883   0E32 C2 30 0E                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1884   0E35             
1885   0E35 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1886   0E37 0A                      LD      A, (BC)             ;                       ' 7     |
1887   0E38 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1888   0E39 CB 90                   RES     2, B                ;                       ' 8     |
1889   0E3B 12                      LD      (DE), A             ;                       ' 7     |
1890   0E3C D9                      EXX                         ;                       ' 4     |
1891   0E3D             
1892   0E3D                         wait24                      ; sync                  ' 24    | 54 (100)
1892   0E3D 18 00       >            JR      .loop
1892   0E3F 18 00       >            JR      .loop
1893   0E41                         waitYMReady                 ; wait YM to be ready   ' 30    |
1893   0E41 D9          >            EXX                     ;                           ' 4     | (4)
1893   0E42 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1893   0E44 C2 42 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1893   0E47 D9          >            EXX                     ;                           ' 4     | (30)
1894   0E48             
1895   0E48 C3 25 0D                JP      ym_port_write1      ; execute next          ' 10    | (110)
1896   0E4B             
1897   0E4B             
1898   0E4B             ; YM KEY command
1899   0E4B             ; --------------
1900   0E4B             
1901   0E4B             com_ym_key_w0                           ; 40                    ' 80
1902   0E4B                         wait18                      ; sync                  ' 40    |
1902   0E4B ED 4F       >            LD      R, A
1902   0E4D ED 4F       >            LD      R, A
1903   0E4F 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1904   0E52 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 84 (164)
1905   0E55                         wait4                       ; sync                  ' 4     |
1905   0E55 00          >            NOP
1906   0E56 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    |
1907   0E58 C3 C6 0E                JP      ym_key_write0       ;                       ' 10    |
1908   0E5B             
1909   0E5B             com_ym_key_w1                           ; 41                    ' 80
1910   0E5B 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1911   0E5E 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1912   0E61                         wait4                       ; sync                  ' 4     |
1912   0E61 00          >            NOP
1913   0E62 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 44 (124)
1914   0E64 C3 BE 0E                JP      ym_key_write1       ;                       ' 10    |
1915   0E67             
1916   0E67             com_ym_key_w2                           ; 43                    ' 80
1917   0E67                         wait134                     ; sync                  ' 134   |
1917   0E67 3E 08       >            LD      A, w            ; 7-2
1917   0E69 3D          >            DEC     A               ; 4
1917   0E6A 20 FD       >            JR      NZ, .loop       ; 12
1917   0E6C 00          >            NOP
1918   0E6D 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1919   0E70 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1920   0E73 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 174 (254)
1921   0E75 C3 F9 0E                JP      ym_key_write2       ;                       ' 10    |
1922   0E78             
1923   0E78             com_ym_key_w3                           ; 44                    ' 80
1924   0E78                         wait64                      ; sync                  ' 64    |
1924   0E78 3E 03       >            LD      A, w            ; 7-2
1924   0E7A 3D          >            DEC     A               ; 4
1924   0E7B 20 FD       >            JR      NZ, .loop       ; 12
1924   0E7D 3E 00       >            LD      A, $0
1924   0E7F 3E 00       >            LD      A, $0
1925   0E81 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1926   0E84 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1927   0E87 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 104 (184)
1928   0E89 C3 EA 0E                JP      ym_key_write3       ;                       ' 10    |
1929   0E8C             
1930   0E8C             com_ym_key_w4                           ; 45                    ' 80
1931   0E8C                         wait24                      ; sync                  ' 24    |
1931   0E8C 18 00       >            JR      .loop
1931   0E8E 18 00       >            JR      .loop
1932   0E90 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1933   0E93 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1934   0E96 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 64 (144)
1935   0E98 C3 E2 0E                JP      ym_key_write4       ;                       ' 10    |
1936   0E9B             
1937   0E9B             com_ym_key_w5                           ; 46                    ' 80
1938   0E9B                         wait154                     ; sync                  ' 174   |
1938   0E9B 3E 09       >            LD      A, w            ; 7-2
1938   0E9D 3D          >            DEC     A               ; 4
1938   0E9E 20 FD       >            JR      NZ, .loop       ; 12
1938   0EA0 00          >            NOP
1938   0EA1 00          >            NOP
1939   0EA2 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1940   0EA5 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1941   0EA8             
1942   0EA8                         sampleOutputSafe            ;                       ' 46    | (46)
1942   0EA8 D9          >            EXX                     ;                           ' 4     | 4
1942   0EA9 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
1942   0EAB 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1942   0EAC 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1942   0EAD CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1942   0EAF 12          >            LD      (DE), A         ; play sample               ' 7     |
1942   0EB0 D9          >            EXX                     ;                           ' 4     | (46)
1943   0EB1             
1944   0EB1                         wait16                      ; sync                  ' 16    |
1944   0EB1 18 00       >            JR      .loop
1944   0EB3 00          >            NOP
1945   0EB4                         waitYMReadyFast             ; wait YM to be ready   ' 22    |
1945   0EB4 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1945   0EB6 C2 B4 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1946   0EB9 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 58 (104)
1947   0EBB C3 DA 0E                JP      ym_key_write5       ;                       ' 10    |
1948   0EBE             
1949   0EBE             
1950   0EBE             ym_key_write1                           ;                       ' 124
1951   0EBE 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1952   0EBF 1C                      INC     E                   ; next data             ' 4     |
1953   0EC0                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (164)
1953   0EC0 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1953   0EC2 C2 C0 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1954   0EC5 02                      LD      (BC), A             ; write to YM           ' 7     |
1955   0EC6             
1956   0EC6             ym_key_write0
1957   0EC6 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1958   0EC7 1C                      INC     E                   ; next data             ' 4     |
1959   0EC8                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (204)
1959   0EC8 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1959   0ECA C2 C8 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1960   0ECD 02                      LD      (BC), A             ; write to YM           ' 7     |
1961   0ECE             
1962   0ECE                         wait8                       ; sync                  ' 8     |
1962   0ECE 00          >            NOP
1962   0ECF 00          >            NOP
1963   0ED0                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (244)
1963   0ED0 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1963   0ED2 C2 D0 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1964   0ED5 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1965   0ED7             
1966   0ED7 C3 17 0A                JP      execute_xgm         ;                       ' 10    | (254)
1967   0EDA             
1968   0EDA             ym_key_write5
1969   0EDA 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1970   0EDB 1C                      INC     E                   ; next data             ' 4     |
1971   0EDC                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (144)
1971   0EDC CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1971   0EDE C2 DC 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1972   0EE1 02                      LD      (BC), A             ; write to YM           ' 7     |
1973   0EE2             
1974   0EE2             ym_key_write4
1975   0EE2 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1976   0EE3 1C                      INC     E                   ; next data             ' 4     |
1977   0EE4                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (184)
1977   0EE4 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1977   0EE6 C2 E4 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1978   0EE9 02                      LD      (BC), A             ; write to YM           ' 7     |
1979   0EEA             
1980   0EEA             ym_key_write3
1981   0EEA 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1982   0EEB 1C                      INC     E                   ; next data             ' 4     |
1983   0EEC                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (224)
1983   0EEC CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1983   0EEE C2 EC 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1984   0EF1 02                      LD      (BC), A             ; write to YM           ' 7     |
1985   0EF2             
1986   0EF2                         wait8                       ; sync                  ' 8     |
1986   0EF2 00          >            NOP
1986   0EF3 00          >            NOP
1987   0EF4                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 30 (254)
1987   0EF4 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1987   0EF6 C2 F4 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1988   0EF9             
1989   0EF9             ym_key_write2
1990   0EF9                         sampleOutputSafe            ;                       ' 46    | (46)
1990   0EF9 D9          >            EXX                     ;                           ' 4     | 4
1990   0EFA 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
1990   0EFC 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1990   0EFD 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1990   0EFE CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1990   0F00 12          >            LD      (DE), A         ; play sample               ' 7     |
1990   0F01 D9          >            EXX                     ;                           ' 4     | (46)
1991   0F02             
1992   0F02                         wait8                       ; sync                  ' 8     |
1992   0F02 00          >            NOP
1992   0F03 00          >            NOP
1993   0F04                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (86)
1993   0F04 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1993   0F06 C2 04 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1994   0F09 36 28                   LD      (HL), $28           ; restore write to key  ' 10    |
1995   0F0B             
1996   0F0B 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1997   0F0C 13                      INC     DE                  ; next data             ' 6     |
1998   0F0D                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (126)
1998   0F0D CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1998   0F0F C2 0D 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1999   0F12 02                      LD      (BC), A             ; write to YM           ' 7     |
2000   0F13             
2001   0F13             .write1
2002   0F13 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
2003   0F14 1C                      INC     E                   ; next data             ' 4     |
2004   0F15                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (166)
2004   0F15 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2004   0F17 C2 15 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2005   0F1A 02                      LD      (BC), A             ; write to YM           ' 7     |
2006   0F1B             
2007   0F1B             .write0
2008   0F1B 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
2009   0F1C 1C                      INC     E                   ; next data             ' 4     |
2010   0F1D                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (206)
2010   0F1D CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2010   0F1F C2 1D 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2011   0F22 02                      LD      (BC), A             ; write to YM           ' 7     |
2012   0F23             
2013   0F23                         wait7                       ; sync                  ' 7     |
2013   0F23 3E 00       >            LD      A, $0
2014   0F25                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 39 (245)
2014   0F25 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2014   0F27 C2 25 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2015   0F2A 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
2016   0F2C             
2017   0F2C C3 17 0A                JP      execute_xgm         ;                       ' 10    | (254+1)
2018   0F2F             
2019   0F2F             
2020   0F2F             ; PCM command
2021   0F2F             ; -----------
2022   0F2F             
2023   0F2F             com_pcm_p0_ch0                          ; 50                    ' 80
2024   0F2F 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2025   0F31 C3 7F 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2026   0F34             
2027   0F34             com_pcm_p1_ch0                          ; 54                    ' 80
2028   0F34 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2029   0F36 C3 7F 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2030   0F39             
2031   0F39             com_pcm_p2_ch0                          ; 58                    ' 80
2032   0F39 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2033   0F3B C3 7F 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2034   0F3E             
2035   0F3E             com_pcm_p3_ch0                          ; 5C                    ' 80
2036   0F3E 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2037   0F40 C3 7F 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2038   0F43             
2039   0F43             com_pcm_p0_ch1                          ; 51                    ' 80
2040   0F43 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2041   0F45 C3 AE 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | 17 (97)
2042   0F48             
2043   0F48             com_pcm_p1_ch1                          ; 55                    ' 80
2044   0F48 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2045   0F4A C3 7F 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2046   0F4D             
2047   0F4D             com_pcm_p2_ch1                          ; 59                    ' 80
2048   0F4D 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2049   0F4F C3 AE 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | (119)
2050   0F52             
2051   0F52             com_pcm_p3_ch1                          ; 5D                    ' 80
2052   0F52 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2053   0F54 C3 AE 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | (119)
2054   0F57             
2055   0F57             com_pcm_p0_ch2                          ; 52                    ' 80
2056   0F57 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2057   0F59 C3 DD 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2058   0F5C             
2059   0F5C             com_pcm_p1_ch2                          ; 56                    ' 80
2060   0F5C 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2061   0F5E C3 DD 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2062   0F61             
2063   0F61             com_pcm_p2_ch2                          ; 5A                    ' 80
2064   0F61 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2065   0F63 C3 DD 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2066   0F66             
2067   0F66             com_pcm_p3_ch2                          ; 5E                    ' 80
2068   0F66 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2069   0F68 C3 DD 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2070   0F6B             
2071   0F6B             com_pcm_p0_ch3                          ; 53                    ' 80
2072   0F6B 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2073   0F6D C3 0C 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2074   0F70             
2075   0F70             com_pcm_p1_ch3                          ; 57                    ' 80
2076   0F70 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2077   0F72 C3 0C 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2078   0F75             
2079   0F75             com_pcm_p2_ch3                          ; 5B                    ' 80
2080   0F75 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2081   0F77 C3 0C 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2082   0F7A             
2083   0F7A             com_pcm_p3_ch3                          ; 5F                    ' 80
2084   0F7A 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2085   0F7C C3 0C 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2086   0F7F             
2087   0F7F             
2088   0F7F             com_pcm_ch0                             ;                       ' 97
2089   0F7F                         handlePCMCommandXGM 0       ; handle command        ' 142   |
2089   0F7F 21 14 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2089   0F82 79          >            LD      A, C                    ; A = new prio              ' 4     |
2089   0F83 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2089   0F84 D2 94 0F    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2089   0F87 1C          >            INC     E                       ; next XGM command          ' 4     |
2089   0F88 3E 05       >            LD      A, w            ; 7-2
2089   0F8A 3D          >            DEC     A               ; 4
2089   0F8B 20 FD       >            JR      NZ, .loop       ; 12
2089   0F8D 00          >            NOP
2089   0F8E 00          >            NOP
2089   0F8F 3E 00       >            LD      A, $0
2089   0F91 C3 AA 0F    >            JP      .end                    ; done                      ' 10    |
2089   0F94 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2089   0F95 1C          >            INC     E                       ; next XGM command          ' 4     |
2089   0F96 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2089   0F97 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2089   0F99 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2089   0F9B 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2089   0F9C 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2089   0F9E 87          >            ADD     A                       ;                           ' 4     |
2089   0F9F 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2089   0FA0 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2089   0FA1 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2089   0FA2 E1          >            POP     HL                      ; copy params               ' 10    |
2089   0FA3 22 16 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2089   0FA6 E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2089   0FA7 22 18 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2090   0FAA                         wait4                       ; sync                  ' 4     | 156 (254-1)
2090   0FAA 00          >            NOP
2091   0FAB C3 17 0A                JP      execute_xgm         ;                       ' 10    |
2092   0FAE             
2093   0FAE             com_pcm_ch1                             ;                       ' 97
2094   0FAE                         handlePCMCommandXGM 1       ; handle command        ' 142   |
2094   0FAE 21 1C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2094   0FB1 79          >            LD      A, C                    ; A = new prio              ' 4     |
2094   0FB2 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2094   0FB3 D2 C3 0F    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2094   0FB6 1C          >            INC     E                       ; next XGM command          ' 4     |
2094   0FB7 3E 05       >            LD      A, w            ; 7-2
2094   0FB9 3D          >            DEC     A               ; 4
2094   0FBA 20 FD       >            JR      NZ, .loop       ; 12
2094   0FBC 00          >            NOP
2094   0FBD 00          >            NOP
2094   0FBE 3E 00       >            LD      A, $0
2094   0FC0 C3 D9 0F    >            JP      .end                    ; done                      ' 10    |
2094   0FC3 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2094   0FC4 1C          >            INC     E                       ; next XGM command          ' 4     |
2094   0FC5 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2094   0FC6 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2094   0FC8 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2094   0FCA 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2094   0FCB 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2094   0FCD 87          >            ADD     A                       ;                           ' 4     |
2094   0FCE 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2094   0FCF 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2094   0FD0 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2094   0FD1 E1          >            POP     HL                      ; copy params               ' 10    |
2094   0FD2 22 1E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2094   0FD5 E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2094   0FD6 22 20 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2095   0FD9                         wait4                       ; sync                  ' 4     | 156 (254-1)
2095   0FD9 00          >            NOP
2096   0FDA C3 17 0A                JP      execute_xgm         ;                       ' 10    |
2097   0FDD             
2098   0FDD             com_pcm_ch2                             ;                       ' 97
2099   0FDD                         handlePCMCommandXGM 2       ; handle command        ' 142   |
2099   0FDD 21 24 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2099   0FE0 79          >            LD      A, C                    ; A = new prio              ' 4     |
2099   0FE1 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2099   0FE2 D2 F2 0F    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2099   0FE5 1C          >            INC     E                       ; next XGM command          ' 4     |
2099   0FE6 3E 05       >            LD      A, w            ; 7-2
2099   0FE8 3D          >            DEC     A               ; 4
2099   0FE9 20 FD       >            JR      NZ, .loop       ; 12
2099   0FEB 00          >            NOP
2099   0FEC 00          >            NOP
2099   0FED 3E 00       >            LD      A, $0
2099   0FEF C3 08 10    >            JP      .end                    ; done                      ' 10    |
2099   0FF2 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2099   0FF3 1C          >            INC     E                       ; next XGM command          ' 4     |
2099   0FF4 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2099   0FF5 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2099   0FF7 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2099   0FF9 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2099   0FFA 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2099   0FFC 87          >            ADD     A                       ;                           ' 4     |
2099   0FFD 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2099   0FFE 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2099   0FFF F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2099   1000 E1          >            POP     HL                      ; copy params               ' 10    |
2099   1001 22 26 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2099   1004 E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2099   1005 22 28 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2100   1008                         wait4                       ; sync                  ' 4     | 156 (254-1)
2100   1008 00          >            NOP
2101   1009 C3 17 0A                JP      execute_xgm         ;                       ' 10    |
2102   100C             
2103   100C             com_pcm_ch3                             ;                       ' 97
2104   100C                         handlePCMCommandXGM 3       ; handle command        ' 142   |
2104   100C 21 2C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2104   100F 79          >            LD      A, C                    ; A = new prio              ' 4     |
2104   1010 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2104   1011 D2 21 10    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2104   1014 1C          >            INC     E                       ; next XGM command          ' 4     |
2104   1015 3E 05       >            LD      A, w            ; 7-2
2104   1017 3D          >            DEC     A               ; 4
2104   1018 20 FD       >            JR      NZ, .loop       ; 12
2104   101A 00          >            NOP
2104   101B 00          >            NOP
2104   101C 3E 00       >            LD      A, $0
2104   101E C3 37 10    >            JP      .end                    ; done                      ' 10    |
2104   1021 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2104   1022 1C          >            INC     E                       ; next XGM command          ' 4     |
2104   1023 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2104   1024 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2104   1026 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2104   1028 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2104   1029 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2104   102B 87          >            ADD     A                       ;                           ' 4     |
2104   102C 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2104   102D 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2104   102E F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2104   102F E1          >            POP     HL                      ; copy params               ' 10    |
2104   1030 22 2E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2104   1033 E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2104   1034 22 30 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2105   1037                         wait4                       ; sync                  ' 4     | 156 (254-1)
2105   1037 00          >            NOP
2106   1038 C3 17 0A                JP      execute_xgm         ;                       ' 10    |
2107   103B             
2108   103B             
2109   103B             
2110   103B             ; STATE command
2111   103B             ; -------------
2112   103B             
2113   103B             com_state_w0                            ; 60                    ' 80
2114   103B                         wait114                     ; sync                  ' 114   |
2114   103B 3E 07       >            LD      A, w            ; 7-2
2114   103D 3D          >            DEC     A               ; 4
2114   103E 20 FD       >            JR      NZ, .loop       ; 12
2115   1040 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 131 (211)
2116   1042 C3 88 11                JP      state_w0            ; execute               ' 10    |
2117   1045             
2118   1045             com_state_w1                            ; 61                    ' 80
2119   1045                         wait81                      ; sync                  ' 81    |
2119   1045 3E 04       >            LD      A, w            ; 7-2
2119   1047 3D          >            DEC     A               ; 4
2119   1048 20 FD       >            JR      NZ, .loop       ; 12
2119   104A 00          >            NOP
2119   104B 00          >            NOP
2119   104C 3E 00       >            LD      A, $0
2120   104E 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 98 (178)
2121   1050 C3 82 11                JP      state_w1            ; execute               ' 10    |
2122   1053             
2123   1053             com_state_w2                            ; 62                    ' 80
2124   1053                         wait48                      ; sync                  ' 48    |
2124   1053 ED 4F       >            LD      R, A
2124   1055 ED 4F       >            LD      R, A
2124   1057 ED 4F       >            LD      R, A
2124   1059 ED 4F       >            LD      R, A
2124   105B 18 00       >            JR      .loop
2125   105D 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 65 (145)
2126   105F C3 7C 11                JP      state_w2            ; execute               ' 10    |
2127   1062             
2128   1062             com_state_w3                            ; 63                    ' 80
2129   1062                         wait15                      ; sync                  ' 15    |
2129   1062 00          >            NOP
2129   1063 00          >            NOP
2129   1064 3E 00       >            LD      A, $0
2130   1066 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 32 (112)
2131   1068 C3 76 11                JP      state_w3            ; execute               ' 10    |
2132   106B             
2133   106B             com_state_w4                            ; 64                    ' 80
2134   106B                         wait174                     ; sync                  ' 174   | (254)
2134   106B 3E 0A       >            LD      A, w            ; 7-2
2134   106D 3D          >            DEC     A               ; 4
2134   106E 20 FD       >            JR      NZ, .loop       ; 12
2134   1070 18 00       >            JR      .loop
2135   1072                         sampleOutput                ; sample output         ' 36    | (36)
2135   1072 D9          >            EXX                     ;                           ' 4     | 4
2135   1073 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2135   1074 03          >            INC     BC              ; increment read address    ' 6     |
2135   1075 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2135   1077 12          >            LD      (DE), A         ; play sample               ' 7     |
2135   1078 D9          >            EXX                     ;                           ' 4     | (36)
2136   1079             
2137   1079                         wait26                      ; sync                  ' 26    |
2137   1079 ED 4F       >            LD      R, A
2137   107B ED 4F       >            LD      R, A
2137   107D 00          >            NOP
2137   107E 00          >            NOP
2138   107F 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 43 (79)
2139   1081 C3 70 11                JP      state_w4            ; execute               ' 10    |
2140   1084             
2141   1084             com_state_w5                            ; 65                    ' 80
2142   1084                         wait157                     ; sync                  ' 157   |
2142   1084 3E 09       >            LD      A, w            ; 7-2
2142   1086 3D          >            DEC     A               ; 4
2142   1087 20 FD       >            JR      NZ, .loop       ; 12
2142   1089 3E 00       >            LD      A, $0
2142   108B 00          >            NOP
2143   108C 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 174 (254)
2144   108E C3 60 11                JP      state_w5            ; execute               ' 10    |
2145   1091             
2146   1091             com_state_w6                            ; 66                    ' 80
2147   1091                         wait124                     ; sync                  ' 124   |
2147   1091 3E 07       >            LD      A, w            ; 7-2
2147   1093 3D          >            DEC     A               ; 4
2147   1094 20 FD       >            JR      NZ, .loop       ; 12
2147   1096 C3 99 10    >            JP      .loop
2148   1099 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 141 (221)
2149   109B C3 5A 11                JP      state_w6            ; execute               ' 10    |
2150   109E             
2151   109E             com_state_w7                            ; 67                    ' 80
2152   109E                         wait91                      ; sync                  ' 91    |
2152   109E 3E 05       >            LD      A, w            ; 7-2
2152   10A0 3D          >            DEC     A               ; 4
2152   10A1 20 FD       >            JR      NZ, .loop       ; 12
2152   10A3 ED 4F       >            LD      R, A
2153   10A5 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 108 (188)
2154   10A7 C3 54 11                JP      state_w7            ; execute               ' 10    |
2155   10AA             
2156   10AA             com_state_w8                            ; 68                    ' 80
2157   10AA                         wait58                      ; sync                  ' 58    |
2157   10AA 3E 03       >            LD      A, w            ; 7-2
2157   10AC 3D          >            DEC     A               ; 4
2157   10AD 20 FD       >            JR      NZ, .loop       ; 12
2157   10AF 00          >            NOP
2157   10B0 00          >            NOP
2158   10B1 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 75 (155)
2159   10B3 C3 4E 11                JP      state_w8            ; execute               ' 10    |
2160   10B6             
2161   10B6             com_state_w9                            ; 69                    ' 80
2162   10B6                         wait25                      ; sync                  ' 25    |
2162   10B6 ED 4F       >            LD      R, A
2162   10B8 ED 4F       >            LD      R, A
2162   10BA 3E 00       >            LD      A, $0
2163   10BC 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 42 (122)
2164   10BE C3 48 11                JP      state_w9            ; execute               ' 10    |
2165   10C1             
2166   10C1             com_state_wA                            ; 6A                    ' 80
2167   10C1                         wait174                     ; sync                  ' 174   | (254)
2167   10C1 3E 0A       >            LD      A, w            ; 7-2
2167   10C3 3D          >            DEC     A               ; 4
2167   10C4 20 FD       >            JR      NZ, .loop       ; 12
2167   10C6 18 00       >            JR      .loop
2168   10C8                         sampleOutput                ; sample output         ' 36    | (36)
2168   10C8 D9          >            EXX                     ;                           ' 4     | 4
2168   10C9 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2168   10CA 03          >            INC     BC              ; increment read address    ' 6     |
2168   10CB CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2168   10CD 12          >            LD      (DE), A         ; play sample               ' 7     |
2168   10CE D9          >            EXX                     ;                           ' 4     | (36)
2169   10CF             
2170   10CF                         wait36                      ; sync                  ' 36    |
2170   10CF ED 4F       >            LD      R, A
2170   10D1 ED 4F       >            LD      R, A
2170   10D3 ED 4F       >            LD      R, A
2170   10D5 ED 4F       >            LD      R, A
2171   10D7 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 53 (89)
2172   10D9 C3 42 11                JP      state_wA            ; execute               ' 10    |
2173   10DC             
2174   10DC             com_state_wB                            ; 6B                    ' 80
2175   10DC                         wait157                     ; sync                  ' 157   |
2175   10DC 3E 09       >            LD      A, w            ; 7-2
2175   10DE 3D          >            DEC     A               ; 4
2175   10DF 20 FD       >            JR      NZ, .loop       ; 12
2175   10E1 3E 00       >            LD      A, $0
2175   10E3 00          >            NOP
2176   10E4 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 174 (254)
2177   10E6 C3 30 11                JP      state_wB            ; execute               ' 10    |
2178   10E9             
2179   10E9             com_state_wC                            ; 6C                    ' 80
2180   10E9                         wait124                     ; sync                  ' 124   |
2180   10E9 3E 07       >            LD      A, w            ; 7-2
2180   10EB 3D          >            DEC     A               ; 4
2180   10EC 20 FD       >            JR      NZ, .loop       ; 12
2180   10EE C3 F1 10    >            JP      .loop
2181   10F1 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 141 (221)
2182   10F3 C3 2A 11                JP      state_wC            ; execute               ' 10    |
2183   10F6             
2184   10F6             com_state_wD                            ; 6D                    ' 80
2185   10F6                         wait91                      ; sync                  ' 91    |
2185   10F6 3E 05       >            LD      A, w            ; 7-2
2185   10F8 3D          >            DEC     A               ; 4
2185   10F9 20 FD       >            JR      NZ, .loop       ; 12
2185   10FB ED 4F       >            LD      R, A
2186   10FD 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 108 (188)
2187   10FF C3 24 11                JP      state_wD            ; execute               ' 10    |
2188   1102             
2189   1102             com_state_wE                            ; 6E                    ' 80
2190   1102                         wait58                      ; sync                  ' 58    |
2190   1102 3E 03       >            LD      A, w            ; 7-2
2190   1104 3D          >            DEC     A               ; 4
2190   1105 20 FD       >            JR      NZ, .loop       ; 12
2190   1107 00          >            NOP
2190   1108 00          >            NOP
2191   1109 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 75 (155)
2192   110B C3 1E 11                JP      state_wE            ; execute               ' 10    |
2193   110E             
2194   110E             com_state_wF                            ; 6F                    ' 80
2195   110E                         wait35                      ; sync                  ' 35    |
2195   110E 18 00       >            JR      .loop
2195   1110 ED 4F       >            LD      R, A
2195   1112 3E 00       >            LD      A, $0
2195   1114 3E 00       >            LD      A, $0
2196   1116 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 42 (122)
2197   1118             
2198   1118             state_wF                                ;                       ' 122
2199   1118 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2200   1119 1C                      INC     E                   ; next data             ' 4     |
2201   111A 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (155)
2202   111B 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2203   111C 1C                      INC     E                   ; next data             ' 4     |
2204   111D 77                      LD      (HL), A             ; write to save         ' 7     |
2205   111E             
2206   111E             state_wE
2207   111E 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2208   111F 1C                      INC     E                   ; next data             ' 4     |
2209   1120 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (188)
2210   1121 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2211   1122 1C                      INC     E                   ; next data             ' 4     |
2212   1123 77                      LD      (HL), A             ; write to save         ' 7     |
2213   1124             
2214   1124             state_wD
2215   1124 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2216   1125 1C                      INC     E                   ; next data             ' 4     |
2217   1126 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (221)
2218   1127 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2219   1128 1C                      INC     E                   ; next data             ' 4     |
2220   1129 77                      LD      (HL), A             ; write to save         ' 7     |
2221   112A             
2222   112A             state_wC
2223   112A 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2224   112B 1C                      INC     E                   ; next data             ' 4     |
2225   112C 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (254)
2226   112D 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2227   112E 1C                      INC     E                   ; next data             ' 4     |
2228   112F 77                      LD      (HL), A             ; write to save         ' 7     |
2229   1130             
2230   1130             state_wB
2231   1130                         sampleOutput                ; sample output         ' 36    |
2231   1130 D9          >            EXX                     ;                           ' 4     | 4
2231   1131 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2231   1132 03          >            INC     BC              ; increment read address    ' 6     |
2231   1133 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2231   1135 12          >            LD      (DE), A         ; play sample               ' 7     |
2231   1136 D9          >            EXX                     ;                           ' 4     | (36)
2232   1137                         wait20                      ; wait                  ' 20    | (56)
2232   1137 3E 00       >            LD      A, $0
2232   1139 00          >            NOP
2232   113A ED 4F       >            LD      R, A
2233   113C             
2234   113C 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2235   113D 1C                      INC     E                   ; next data             ' 4     |
2236   113E 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (89)
2237   113F 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2238   1140 1C                      INC     E                   ; next data             ' 4     |
2239   1141 77                      LD      (HL), A             ; write to save         ' 7     |
2240   1142             
2241   1142             state_wA
2242   1142 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2243   1143 1C                      INC     E                   ; next data             ' 4     |
2244   1144 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (122)
2245   1145 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2246   1146 1C                      INC     E                   ; next data             ' 4     |
2247   1147 77                      LD      (HL), A             ; write to save         ' 7     |
2248   1148             
2249   1148             state_w9
2250   1148 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2251   1149 1C                      INC     E                   ; next data             ' 4     |
2252   114A 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (155)
2253   114B 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2254   114C 1C                      INC     E                   ; next data             ' 4     |
2255   114D 77                      LD      (HL), A             ; write to save         ' 7     |
2256   114E             
2257   114E             state_w8
2258   114E 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2259   114F 1C                      INC     E                   ; next data             ' 4     |
2260   1150 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (188)
2261   1151 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2262   1152 1C                      INC     E                   ; next data             ' 4     |
2263   1153 77                      LD      (HL), A             ; write to save         ' 7     |
2264   1154             
2265   1154             state_w7
2266   1154 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2267   1155 1C                      INC     E                   ; next data             ' 4     |
2268   1156 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (221)
2269   1157 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2270   1158 1C                      INC     E                   ; next data             ' 4     |
2271   1159 77                      LD      (HL), A             ; write to save         ' 7     |
2272   115A             
2273   115A             state_w6
2274   115A 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2275   115B 1C                      INC     E                   ; next data             ' 4     |
2276   115C 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (254)
2277   115D 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2278   115E 1C                      INC     E                   ; next data             ' 4     |
2279   115F 77                      LD      (HL), A             ; write to save         ' 7     |
2280   1160             
2281   1160             state_w5
2282   1160                         sampleOutput                ; sample output         ' 36    |
2282   1160 D9          >            EXX                     ;                           ' 4     | 4
2282   1161 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2282   1162 03          >            INC     BC              ; increment read address    ' 6     |
2282   1163 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2282   1165 12          >            LD      (DE), A         ; play sample               ' 7     |
2282   1166 D9          >            EXX                     ;                           ' 4     | (36)
2283   1167                         wait10                      ; wait                  ' 10    | (46)
2283   1167 C3 6A 11    >            JP      .loop
2284   116A             
2285   116A 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2286   116B 1C                      INC     E                   ; next data             ' 4     |
2287   116C 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (79)
2288   116D 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2289   116E 1C                      INC     E                   ; next data             ' 4     |
2290   116F 77                      LD      (HL), A             ; write to save         ' 7     |
2291   1170             
2292   1170             state_w4
2293   1170 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2294   1171 1C                      INC     E                   ; next data             ' 4     |
2295   1172 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (112)
2296   1173 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2297   1174 1C                      INC     E                   ; next data             ' 4     |
2298   1175 77                      LD      (HL), A             ; write to save         ' 7     |
2299   1176             
2300   1176             state_w3
2301   1176 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2302   1177 1C                      INC     E                   ; next data             ' 4     |
2303   1178 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (145)
2304   1179 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2305   117A 1C                      INC     E                   ; next data             ' 4     |
2306   117B 77                      LD      (HL), A             ; write to save         ' 7     |
2307   117C             
2308   117C             state_w2
2309   117C 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2310   117D 1C                      INC     E                   ; next data             ' 4     |
2311   117E 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (178)
2312   117F 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2313   1180 1C                      INC     E                   ; next data             ' 4     |
2314   1181 77                      LD      (HL), A             ; write to save         ' 7     |
2315   1182             
2316   1182             state_w1
2317   1182 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2318   1183 1C                      INC     E                   ; next data             ' 4     |
2319   1184 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (211)
2320   1185 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2321   1186 1C                      INC     E                   ; next data             ' 4     |
2322   1187 77                      LD      (HL), A             ; write to save         ' 7     |
2323   1188             
2324   1188             state_w0
2325   1188 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2326   1189 1C                      INC     E                   ; next data             ' 4     |
2327   118A 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (244)
2328   118B 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2329   118C 1C                      INC     E                   ; next data             ' 4     |
2330   118D 77                      LD      (HL), A             ; write to save         ' 7     |
2331   118E             
2332   118E C3 17 0A                JP      execute_xgm         ;                       ' 10    | (254)
2333   1191             
2334   1191             
2335   1191             ; NULL command
2336   1191             ; ------------
2337   1191             
2338   1191             com_null                                ; 01-0F / 60-7D         ' 80
2339   1191                         wait164                     ; sync                  ' 164   |
2339   1191 3E 09       >            LD      A, w            ; 7-2
2339   1193 3D          >            DEC     A               ; 4
2339   1194 20 FD       >            JR      NZ, .loop       ; 12
2339   1196 ED 4F       >            LD      R, A
2339   1198 ED 4F       >            LD      R, A
2340   119A C3 17 0A                JP      execute_xgm         ;                       ' 10    | 174 (254)
2341   119D             
2342   119D             
2343   119D             ; EXTRA FRAME command
2344   119D             ; -------------------
2345   119D             
2346   119D             com_extra_frm                           ; FD                            ' 80
2347   119D             
2348   119D 3E 01                   LD      A, $1               ;                               ' 7     |
2349   119F 32 12 01                LD      (MODIFYING_F), A    ; we are modifying variable     ' 13    | 20 (100)
2350   11A2             
2351   11A2 3A 13 01                LD      A, (PENDING_FRM)    ;                               ' 13    |
2352   11A5 3C                      INC     A                   ; force process 1 more frame    ' 4     | 30 (130)
2353   11A6 32 13 01                LD      (PENDING_FRM), A    ;                               ' 13    |
2354   11A9             
2355   11A9 AF                      XOR     A                   ;                               ' 4     |
2356   11AA 32 12 01                LD      (MODIFYING_F), A    ; no more modifying variable    ' 13    | 17 (147)
2357   11AD             
2358   11AD                         wait97                      ; sync                          ' 97    | 107 (254)
2358   11AD 3E 05       >            LD      A, w            ; 7-2
2358   11AF 3D          >            DEC     A               ; 4
2358   11B0 20 FD       >            JR      NZ, .loop       ; 12
2358   11B2 00          >            NOP
2358   11B3 00          >            NOP
2358   11B4 3E 00       >            LD      A, $0
2359   11B6 C3 17 0A                JP      execute_xgm         ;                               ' 10    |
2360   11B9             
2361   11B9             
2362   11B9             ; LOOP command
2363   11B9             ; ------------
2364   11B9             
2365   11B9             com_loop                                ; FE                        ' 80
2366   11B9 1A                      LD      A, (DE)             ; A = loop addr b7-b0       ' 7     |
2367   11BA 6F                      LD      L, A                ; L = loop addr b7-b0       ' 4     |
2368   11BB 1C                      INC     E                   ; next param                ' 4     |
2369   11BC 1A                      LD      A, (DE)             ; A = loop addr b15-b8      ' 7     | 30 (110)
2370   11BD 67                      LD      H, A                ; HL = loop addr b15-b0     ' 4     |
2371   11BE 1C                      INC     E                   ; next param                ' 4     |
2372   11BF             
2373   11BF ED 4B 04 01             LD      BC, (XGM_ARG_A+0)   ; BC = XGM base addr (ML)   ' 20    |
2374   11C3 09                      ADD     HL, BC              ; HL = XGM base addr + loop ' 11    | 47 (157)
2375   11C4 22 34 01                LD      (XGM_ADDR+0), HL    ; set new XGM addr (ML)     ' 16    |
2376   11C7             
2377   11C7 1A                      LD      A, (DE)             ; A = loop addr b23-b16     ' 7     |
2378   11C8 21 06 01                LD      HL, XGM_ARG_A+2     ; HL point XGM base adr H   ' 10    |
2379   11CB 8E                      ADC     (HL)                ; A = XGM base addr + loop  ' 7     | 41 (198)
2380   11CC 1C                      INC     E                   ; next param                ' 4     |
2381   11CD 32 36 01                LD      (XGM_ADDR+2), A     ; set new XGM addr (H)      ' 13    |
2382   11D0             
2383   11D0                         wait46                      ; sync                      ' 46    |
2383   11D0 3E 02       >            LD      A, w            ; 7-2
2383   11D2 3D          >            DEC     A               ; 4
2383   11D3 20 FD       >            JR      NZ, .loop       ; 12
2383   11D5 18 00       >            JR      .loop
2384   11D7 C3 17 0A                JP      execute_xgm         ;                           ' 10    | 56 (254)
2385   11DA             
2386   11DA             
2387   11DA             ; END XGM command
2388   11DA             ; ---------------
2389   11DA             
2390   11DA             com_end                                 ; FF                        ' 80
2391   11DA 21 02 01                LD      HL, STATUS          ; HL = STATUS               ' 10    | 25 (105)
2392   11DD CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status         ' 15    |
2393   11DF             
2394   11DF                         wait139                     ; sync                      ' 139   |
2394   11DF 3E 08       >            LD      A, w            ; 7-2
2394   11E1 3D          >            DEC     A               ; 4
2394   11E2 20 FD       >            JR      NZ, .loop       ; 12
2394   11E4 ED 4F       >            LD      R, A
2395   11E6 C3 17 0A                JP      execute_xgm         ;                           ' 10    | 149 (254)
2396   11E9             
2397   11E9             
2398   11E9             ; $BC+X+Y+Z
2399   11E9             do_xgm_again                            ;                           ' 135
2400   11E9 2D                      DEC     L                   ; HL point on MODIFYING_F   ' 4     |
2401   11EA 36 00                   LD      (HL), $0            ; no more modifying         ' 10    | 14 (149)
2402   11EC             
2403   11EC                         wait95                      ; sync                      ' 95    |
2403   11EC 3E 05       >            LD      A, w            ; 7-2
2403   11EE 3D          >            DEC     A               ; 4
2403   11EF 20 FD       >            JR      NZ, .loop       ; 12
2403   11F1 ED 4F       >            LD      R, A
2403   11F3 00          >            NOP
2404   11F4 C3 AF 02                JP      main_loop           ; restart loop (prep xgm)   ' 10    | 105 (254)
2405   11F7             
2406   11F7             ; $BC+X+Y+Z
2407   11F7             xgm_done                                ;                               ' 90
2408   11F7             
2409   11F7             ;    LD  A, (VCOUNTER)
2410   11F7             ;    LD  (DEBUG_8), A
2411   11F7             
2412   11F7 21 12 01                LD      HL, MODIFYING_F     ;                               ' 10    |
2413   11FA 36 01                   LD      (HL), $1            ; we are modifying variable     ' 10    | 24 (114)
2414   11FC 2C                      INC     L                   ; HL point on PENDING_FRM       ' 4     |
2415   11FD             
2416   11FD 35                      DEC     (HL)                ; still have frame to process ? ' 11    |
2417   11FE C2 E9 11                JP      NZ, do_xgm_again    ; do XGM process again          ' 10    | 21 (135)
2418   1201             
2419   1201 2D                      DEC     L                   ; HL point on MODIFYING_F       ' 4     |
2420   1202 36 00                   LD      (HL), $0            ; no more modifying variable    ' 10    | 14 (149)
2421   1204             
2422   1204             
2423   1204             ; execute external command
2424   1204             ; ------------------------
2425   1204             
2426   1204             ; $BC+X+Y+Z
2427   1204             external_com                            ;                           ' 149
2428   1204 31 00 16                LD      SP, STACK           ; restore stack             ' 10    |
2429   1207 21 00 01                LD      HL, COMMAND         ; HL point on COMMAND       ' 10    | 20 (159)
2430   120A             
2431   120A             .chk_xgm_play
2432   120A CB 76                   BIT     XGM_PLAY_SFT, (HL)  ; play XGM command ?        ' 12    |
2433   120C CA 27 12                JP      Z, .chk_xgm_resume  ;                           ' 10    | 22 (181)
2434   120F             
2435   120F CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear command             ' 15    |
2436   1211 2C                      INC     L                   ;                           ' 4     |
2437   1212 2C                      INC     L                   ; HL point on status        ' 4     | 38 (219)
2438   1213 CB F6                   SET     XGM_PLAY_SFT, (HL)  ; set play status           ' 15    |
2439   1215             
2440   1215 2A 04 01                LD      HL, (XGM_ARG_A)     ; set new XGM address       ' 16    |
2441   1218 22 34 01                LD      (XGM_ADDR), HL      ;                           ' 16    | 58 (277)
2442   121B 3A 06 01                LD      A, (XGM_ARG_A+2)    ;                           ' 13    |
2443   121E 32 36 01                LD      (XGM_ADDR+2),A      ;                           ' 13    |
2444   1221             
2445   1221 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2446   1224 C3 B9 12                JP      external_com_pcm    ; do PCM commands           ' 10    | 20 (254+43)
2447   1227                                                     ; +43 cycles here, ignore
2448   1227             
2449   1227             .chk_xgm_resume
2450   1227 CB 6E                   BIT     XGM_RESUME_SFT, (HL)    ; play XGM command ?    ' 12    |
2451   1229 CA 48 12                JP      Z, .chk_xgm_stop        ;                       ' 10    | 22 (203)
2452   122C             
2453   122C CB AE                   RES     XGM_RESUME_SFT, (HL)    ; clear command         ' 15    |
2454   122E 2C                      INC     L                       ;                       ' 4     |
2455   122F 2C                      INC     L                       ; HL point on status    ' 4     | 38 (241)
2456   1230 CB F6                   SET     XGM_PLAY_SFT, (HL)      ; set play status       ' 15    |
2457   1232             
2458   1232 11 44 01                LD      DE, YM_RR_SAV       ; DE point on save state    ' 10    |
2459   1235 31 00 16                LD      SP, STACK           ; set STACK                 ' 10    | 20 (254+7)
2460   1238                                                     ; +7 cycles here, ignore
2461   1238             
2462   1238 CD 84 14                CALL    loadState           ; load state                ' 140+  | (140)
2463   123B             
2464   123B                         wait94                      ; sync                      ' 94    |
2464   123B 3E 05       >            LD      A, w            ; 7-2
2464   123D 3D          >            DEC     A               ; 4
2464   123E 20 FD       >            JR      NZ, .loop       ; 12
2464   1240 18 00       >            JR      .loop
2465   1242 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    | 114 (254)
2466   1245 C3 B9 12                JP      external_com_pcm    ; do PCM commands           ' 10    |
2467   1248             
2468   1248             .chk_xgm_stop
2469   1248 CB 66                   BIT     XGM_STOP_SFT, (HL)  ; stop XGM command ?        ' 12    |
2470   124A CA B2 12                JP      Z, .chk_pcm0_pre    ;                           ' 10    | 22 (225)
2471   124D             
2472   124D CB A6                   RES     XGM_STOP_SFT, (HL)  ; clear command             ' 15    |
2473   124F 2C                      INC     L                   ;                           ' 4     |
2474   1250 2C                      INC     L                   ; HL point on status        ' 4     | 38 (263)
2475   1251 CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status         ' 15    |
2476   1253             
2477   1253 11 64 01                LD      DE, YM_RR_OFF       ; DE point on off state     ' 10    |
2478   1256 31 00 16                LD      SP, STACK           ; set STACK                 ' 10    | 20 (254+29)
2479   1259                                                     ; +29 cycles here, ignore
2480   1259             
2481   1259 CD 84 14                CALL    loadState           ; stop music                ' 140+  | (140)
2482   125C             
2483   125C 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0      ' 10    |
2484   125F 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1      ' 10    | 20 (160)
2485   1262             
2486   1262 36 28                   LD      (HL), $28           ; set reg num to YM         ' 10    |
2487   1264                         waitYMReadyFast             ; wait YM to be ready       ' 22    | 32 (192)
2487   1264 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2487   1266 C2 64 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2488   1269             
2489   1269 AF                      XOR     A                   ; A = $00                   ' 4     |
2490   126A 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2491   126B 3C                      INC     A                   ; A = $01                   ' 4     | 37 (229)
2492   126C                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2492   126C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2492   126E C2 6C 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2493   1271             
2494   1271 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2495   1272                         waitYMReadyFast             ; wait YM to be ready       ' 22    | 29 (254+4)
2495   1272 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2495   1274 C2 72 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2496   1277             
2497   1277                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+4)
2497   1277 D9          >            EXX                     ;                           ' 4     | 4
2497   1278 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
2497   127A 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2497   127B 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2497   127C CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2497   127E 12          >            LD      (DE), A         ; play sample               ' 7     |
2497   127F D9          >            EXX                     ;                           ' 4     | (46)
2498   1280             
2499   1280                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2499   1280 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2499   1282 C2 80 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2500   1285 36 28                   LD      (HL), $28           ; set reg num to YM         ' 10    |
2501   1287 3E 02                   LD      A, $02              ; A = $02                   ' 7     | 61 (111)
2502   1289                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2502   1289 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2502   128B C2 89 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2503   128E             
2504   128E 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2505   128F C6 02                   ADD     $2                  ; A = $04                   ' 7     | 36 (147)
2506   1291                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2506   1291 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2506   1293 C2 91 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2507   1296             
2508   1296 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2509   1297 3C                      INC     A                   ; A = $05                   ' 4     | 33 (180)
2510   1298                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2510   1298 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2510   129A C2 98 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2511   129D             
2512   129D 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2513   129E 3C                      INC     A                   ; A = $06                   ' 4     | 33 (213)
2514   129F                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2514   129F CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2514   12A1 C2 9F 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2515   12A4             
2516   12A4 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2517   12A5                         waitYMReadyFast             ; wait YM to be ready       ' 22    | 39 (252)
2517   12A5 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2517   12A7 C2 A5 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2518   12AA 36 2A                   LD      (HL), $2A           ; restore DAC write         ' 10    |
2519   12AC             
2520   12AC 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2521   12AF C3 B9 12                JP      external_com_pcm    ; continue                  ' 10    | 20 (254+18)
2522   12B2                                                     ; +18 cycles here, ignore
2523   12B2             
2524   12B2             .chk_pcm0_pre                           ;                           ' 225
2525   12B2 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2526   12B5                         wait19                      ; sync                      ' 19    | 29 (254)
2526   12B5 18 00       >            JR      .loop
2526   12B7 3E 00       >            LD      A, $0
2527   12B9             
2528   12B9             ; $BD+X+Y+Z
2529   12B9             external_com_pcm
2530   12B9                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2530   12B9 D9          >            EXX                     ;                           ' 4     | 4
2530   12BA 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2530   12BB 03          >            INC     BC              ; increment read address    ' 6     |
2530   12BC CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2530   12BE 12          >            LD      (DE), A         ; play sample               ' 7     |
2530   12BF D9          >            EXX                     ;                           ' 4     | (36)
2531   12C0             
2532   12C0             .chk_pcm0
2533   12C0 CB 46                   BIT     CH0_SFT, (HL)       ; play PCM0 command ?       ' 12    |
2534   12C2 CA 07 13                JP      Z, .chk_pcm1        ;                           ' 10    | 22 (58)
2535   12C5             
2536   12C5 CB 86                   RES     CH0_SFT, (HL)       ; clear command             ' 15    | (73)
2537   12C7             
2538   12C7                         handlePCMCommand 0          ; handle play PCM command   ' 157   | 167 (240)
2538   12C7 ED 4B 08 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2538   12CB 21 14 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2538   12CE 79          >            LD      A, C                    ; A = new prio              ' 4     |
2538   12CF BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2538   12D0 D2 DF 12    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2538   12D3 3E 05       >            LD      A, w            ; 7-2
2538   12D5 3D          >            DEC     A               ; 4
2538   12D6 20 FD       >            JR      NZ, .loop       ; 12
2538   12D8 3E 00       >            LD      A, $0
2538   12DA 3E 00       >            LD      A, $0
2538   12DC C3 F4 12    >            JP      .end                    ;                           ' 10    | 106 (157)
2538   12DF 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2538   12E0 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2538   12E1 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2538   12E3 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2538   12E5 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2538   12E6 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2538   12E8 6F          >            LD      L, A                    ;                           ' 4     |
2538   12E9 29          >            ADD     HL, HL                  ;                           ' 6     |
2538   12EA 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2538   12EB F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2538   12EC E1          >            POP     HL                      ; copy params               ' 10    |
2538   12ED 22 16 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2538   12F0 E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2538   12F1 22 18 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2539   12F4 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2540   12F7             
2541   12F7                         wait14                      ; sync                      ' 14    | (254)
2541   12F7 3E 00       >            LD      A, $0
2541   12F9 3E 00       >            LD      A, $0
2542   12FB             
2543   12FB                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2543   12FB D9          >            EXX                     ;                           ' 4     | 4
2543   12FC 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2543   12FD 03          >            INC     BC              ; increment read address    ' 6     |
2543   12FE CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2543   1300 12          >            LD      (DE), A         ; play sample               ' 7     |
2543   1301 D9          >            EXX                     ;                           ' 4     | (36)
2544   1302             
2545   1302                         wait22                      ; sync                      ' 22    | (58)
2545   1302 ED 4F       >            LD      R, A
2545   1304 ED 4F       >            LD      R, A
2545   1306 00          >            NOP
2546   1307             
2547   1307             .chk_pcm1
2548   1307 CB 4E                   BIT     CH1_SFT, (HL)       ; play PCM1 command ?       ' 12    |
2549   1309 CA 4D 13                JP      Z, .chk_pcm2        ;                           ' 10    | 22 (80)
2550   130C             
2551   130C CB 8E                   RES     CH1_SFT, (HL)       ; clear command             ' 15    | (95)
2552   130E             
2553   130E                         handlePCMCommand 1          ; handle play PCM command   ' 157   | (254-2)
2553   130E ED 4B 0A 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2553   1312 21 1C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2553   1315 79          >            LD      A, C                    ; A = new prio              ' 4     |
2553   1316 BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2553   1317 D2 26 13    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2553   131A 3E 05       >            LD      A, w            ; 7-2
2553   131C 3D          >            DEC     A               ; 4
2553   131D 20 FD       >            JR      NZ, .loop       ; 12
2553   131F 3E 00       >            LD      A, $0
2553   1321 3E 00       >            LD      A, $0
2553   1323 C3 3B 13    >            JP      .end                    ;                           ' 10    | 106 (157)
2553   1326 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2553   1327 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2553   1328 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2553   132A 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2553   132C 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2553   132D 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2553   132F 6F          >            LD      L, A                    ;                           ' 4     |
2553   1330 29          >            ADD     HL, HL                  ;                           ' 6     |
2553   1331 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2553   1332 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2553   1333 E1          >            POP     HL                      ; copy params               ' 10    |
2553   1334 22 1E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2553   1337 E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2553   1338 22 20 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2554   133B             
2555   133B                         sampleOutput                ; *** sample output ****    ' 36    | (36-2)
2555   133B D9          >            EXX                     ;                           ' 4     | 4
2555   133C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2555   133D 03          >            INC     BC              ; increment read address    ' 6     |
2555   133E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2555   1340 12          >            LD      (DE), A         ; play sample               ' 7     |
2555   1341 D9          >            EXX                     ;                           ' 4     | (36)
2556   1342             
2557   1342                         wait36                      ; sync                      ' 36    | 46 (80)
2557   1342 ED 4F       >            LD      R, A
2557   1344 ED 4F       >            LD      R, A
2557   1346 ED 4F       >            LD      R, A
2557   1348 ED 4F       >            LD      R, A
2558   134A 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2559   134D             
2560   134D             .chk_pcm2
2561   134D CB 56                   BIT     CH2_SFT, (HL)       ; play PCM2 command ?       ' 12    |
2562   134F CA 93 13                JP      Z, .chk_pcm3        ;                           ' 10    | 22 (102)
2563   1352             
2564   1352 CB 96                   RES     CH2_SFT, (HL)       ; clear command             ' 15    | (117)
2565   1354             
2566   1354                         handlePCMCommand 2          ; handle play PCM command   ' 157   | (254+20)
2566   1354 ED 4B 0C 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2566   1358 21 24 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2566   135B 79          >            LD      A, C                    ; A = new prio              ' 4     |
2566   135C BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2566   135D D2 6C 13    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2566   1360 3E 05       >            LD      A, w            ; 7-2
2566   1362 3D          >            DEC     A               ; 4
2566   1363 20 FD       >            JR      NZ, .loop       ; 12
2566   1365 3E 00       >            LD      A, $0
2566   1367 3E 00       >            LD      A, $0
2566   1369 C3 81 13    >            JP      .end                    ;                           ' 10    | 106 (157)
2566   136C 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2566   136D B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2566   136E 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2566   1370 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2566   1372 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2566   1373 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2566   1375 6F          >            LD      L, A                    ;                           ' 4     |
2566   1376 29          >            ADD     HL, HL                  ;                           ' 6     |
2566   1377 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2566   1378 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2566   1379 E1          >            POP     HL                      ; copy params               ' 10    |
2566   137A 22 26 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2566   137D E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2566   137E 22 28 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2567   1381             
2568   1381                         sampleOutput                ; *** sample output ****    ' 36    | (36+20)
2568   1381 D9          >            EXX                     ;                           ' 4     | 4
2568   1382 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2568   1383 03          >            INC     BC              ; increment read address    ' 6     |
2568   1384 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2568   1386 12          >            LD      (DE), A         ; play sample               ' 7     |
2568   1387 D9          >            EXX                     ;                           ' 4     | (36)
2569   1388             
2570   1388                         wait36                      ; sync                      ' 36    | 46 (102)
2570   1388 ED 4F       >            LD      R, A
2570   138A ED 4F       >            LD      R, A
2570   138C ED 4F       >            LD      R, A
2570   138E ED 4F       >            LD      R, A
2571   1390 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2572   1393             
2573   1393             .chk_pcm3
2574   1393 CB 5E                   BIT     CH3_SFT, (HL)       ; play PCM3 command ?       ' 12    |
2575   1395 CA D5 13                JP      Z, ext_com_done     ;                           ' 10    | 22 (124)
2576   1398             
2577   1398 CB 9E                   RES     CH3_SFT, (HL)       ; clear command             ' 15    | (139)
2578   139A             
2579   139A                         handlePCMCommand 3          ; handle play PCM command   ' 157   | (254+42)
2579   139A ED 4B 0E 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2579   139E 21 2C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2579   13A1 79          >            LD      A, C                    ; A = new prio              ' 4     |
2579   13A2 BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2579   13A3 D2 B2 13    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2579   13A6 3E 05       >            LD      A, w            ; 7-2
2579   13A8 3D          >            DEC     A               ; 4
2579   13A9 20 FD       >            JR      NZ, .loop       ; 12
2579   13AB 3E 00       >            LD      A, $0
2579   13AD 3E 00       >            LD      A, $0
2579   13AF C3 C7 13    >            JP      .end                    ;                           ' 10    | 106 (157)
2579   13B2 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2579   13B3 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2579   13B4 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2579   13B6 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2579   13B8 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2579   13B9 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2579   13BB 6F          >            LD      L, A                    ;                           ' 4     |
2579   13BC 29          >            ADD     HL, HL                  ;                           ' 6     |
2579   13BD 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2579   13BE F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2579   13BF E1          >            POP     HL                      ; copy params               ' 10    |
2579   13C0 22 2E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2579   13C3 E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2579   13C4 22 30 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2580   13C7             
2581   13C7                         sampleOutput                ; *** sample output ****    ' 36    | (36+42)
2581   13C7 D9          >            EXX                     ;                           ' 4     | 4
2581   13C8 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2581   13C9 03          >            INC     BC              ; increment read address    ' 6     |
2581   13CA CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2581   13CC 12          >            LD      (DE), A         ; play sample               ' 7     |
2581   13CD D9          >            EXX                     ;                           ' 4     | (36)
2582   13CE             
2583   13CE                         wait46                      ; sync                      ' 46    | (124)
2583   13CE 3E 02       >            LD      A, w            ; 7-2
2583   13D0 3D          >            DEC     A               ; 4
2583   13D1 20 FD       >            JR      NZ, .loop       ; 12
2583   13D3 18 00       >            JR      .loop
2584   13D5             
2585   13D5             ; $BD+X+Y+Z
2586   13D5             ext_com_done                                ;                           ' 124
2587   13D5 01 02 01                LD      BC, STATUS              ; BC point on STATUS        ' 10    |
2588   13D8 0A                      LD      A, (BC)                 ; A = STATUS                ' 7     | 24 (148)
2589   13D9 E6 F0                   AND     $F0                     ; clear PCM play status     ' 7     |
2590   13DB             
2591   13DB 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2592   13DE ED 5B 16 01             LD      DE, (PCM_ADDR+(0*8))    ; DE = PCM ch0 addr         ' 20    |
2593   13E2 ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (211)
2594   13E4 28 02                   JR      Z, .ch0_silent          ; ch0 is not playing        ' 12    |
2595   13E6             
2596   13E6 F6 01                   OR      A, $01                  ; set play status for ch0   ' +2
2597   13E8             
2598   13E8             .ch0_silent
2599   13E8 08                      EX      AF,AF'                  ; preserve AF               ' 4     |
2600   13E9                         wait35                          ; sync                      ' 35    | 39 (254-4)
2600   13E9 18 00       >            JR      .loop
2600   13EB ED 4F       >            LD      R, A
2600   13ED 3E 00       >            LD      A, $0
2600   13EF 3E 00       >            LD      A, $0
2601   13F1             
2602   13F1             ; $BE+X+Y+Z
2603   13F1                         sampleOutput                    ; sample output             ' 36-4  | (36)
2603   13F1 D9          >            EXX                     ;                           ' 4     | 4
2603   13F2 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2603   13F3 03          >            INC     BC              ; increment read address    ' 6     |
2603   13F4 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2603   13F6 12          >            LD      (DE), A         ; play sample               ' 7     |
2603   13F7 D9          >            EXX                     ;                           ' 4     | (36)
2604   13F8 08                      EX      AF,AF'                  ; restore AF                ' 4     |
2605   13F9             
2606   13F9 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2607   13FC ED 5B 1E 01             LD      DE, (PCM_ADDR+(1*8))    ; DE = PCM ch1 addr         ' 20    |
2608   1400 ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (99)
2609   1402 28 02                   JR      Z, .ch1_silent          ; ch1 is not playing        ' 12    |
2610   1404             
2611   1404 F6 02                   OR      A, $02                  ; set play status for ch1   ' +2
2612   1406             
2613   1406             .ch1_silent
2614   1406 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2615   1409 ED 5B 26 01             LD      DE, (PCM_ADDR+(2*8))    ; DE = PCM ch2 addr         ' 20    |
2616   140D ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (162)
2617   140F 28 02                   JR      Z, .ch2_silent          ; ch2 is not playing        ' 12    |
2618   1411             
2619   1411 F6 04                   OR      A, $04                  ; set play status for ch2   ' +2
2620   1413             
2621   1413             .ch2_silent
2622   1413 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2623   1416 ED 5B 2E 01             LD      DE, (PCM_ADDR+(3*8))    ; DE = PCM ch3 addr         ' 20    |
2624   141A ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (225)
2625   141C 28 02                   JR      Z, .ch3_silent          ; ch3 is not playing        ' 12    |
2626   141E             
2627   141E F6 08                   OR      A, $08                  ; set play status for ch3   ' +2
2628   1420             
2629   1420             .ch3_silent
2630   1420 02                      LD      (BC), A                 ; set new status            ' 7     | (229)
2631   1421             
2632   1421 3A 11 01                LD      A, (PROTECT_ARG)        ; get BUS protect state     ' 13    |
2633   1424 B7                      OR      A                       ; no protecting ?           ' 4     | 27 (254+2)
2634   1425 CA AF 02                JP      Z, main_loop            ; process next frame        ' 10    |
2635   1428                                                         ; +2 cycles here, ignore...
2636   1428             
2637   1428             ; frame done
2638   1428             ;
2639   1428             ; 1 frame of PCM sample (256 bytes) is ~287 lines.
2640   1428             ;
2641   1428             ; NTSC: we should be <= 0xE8 to respect frame time here and we need to update PCM buffer 0.9 time per frame
2642   1428             ; so we have a free PCM mix frame from time to time.
2643   1428             ; Median (X+Y+Z) should be < 0x2A (< 42) plus some lines from the free PCM mix
2644   1428             ;
2645   1428             ; PAL: we should be <= 0118 to respect frame time here but we need to update PCM buffer 1.1 time per frame
2646   1428             ; so we have a penalty PCM mix frame from time to time.
2647   1428             ; Median (X+Y+Z) should be < 0x5A (< 90) minus some lines for the extra PCM mix
2648   1428             ; -------------------------------------------------------------------------------------
2649   1428             
2650   1428             
2651   1428             ; BUS protection wait (to avoid BUS contention with DMA)
2652   1428             ;
2653   1428             ; $BF+X+Y+Z
2654   1428             
2655   1428             bus_protect_wait
2656   1428                         sampleOutput                ; *** sample output *** ' 36    | (36)
2656   1428 D9          >            EXX                     ;                           ' 4     | 4
2656   1429 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2656   142A 03          >            INC     BC              ; increment read address    ' 6     |
2656   142B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2656   142D 12          >            LD      (DE), A         ; play sample               ' 7     |
2656   142E D9          >            EXX                     ;                           ' 4     | (36)
2657   142F             
2658   142F                         wait105                     ; sync                  ' 105   | (141)
2658   142F 3E 06       >            LD      A, w            ; 7-2
2658   1431 3D          >            DEC     A               ; 4
2658   1432 20 FD       >            JR      NZ, .loop       ; 12
2658   1434 3E 00       >            LD      A, $0
2659   1436             
2660   1436 3A 11 01                LD      A, (PROTECT_ARG)    ; get BUS protect state ' 13    |
2661   1439 B7                      OR      A                   ; no more protecting ?  ' 4     | 27 (168)
2662   143A CA 4E 14                JP      Z, .continue        ; continue              ' 10    |
2663   143D             
2664   143D 2A 80 01                LD      HL, (IDLE_LOOP)     ;                       ' 16    |
2665   1440 23                      INC     HL                  ; increment idle loop   ' 6     | 38 (206)
2666   1441 22 80 01                LD      (IDLE_LOOP), HL     ;                       ' 16    |
2667   1444             
2668   1444 2A 82 01                LD      HL, (WAIT_LOOP)     ;                       ' 16    |
2669   1447 23                      INC     HL                  ; increment wait loop   ' 6     | 38 (244)
2670   1448 22 82 01                LD      (WAIT_LOOP), HL     ;                       ' 16    |
2671   144B             
2672   144B C3 28 14                JP      bus_protect_wait    ; wait until bus is ok  ' 10    | (254)
2673   144E             
2674   144E             .continue                               ;                       ' 168
2675   144E             
2676   144E             ;    LD  A, (VCOUNTER)
2677   144E             ;    LD  (DEBUG_A), A
2678   144E             
2679   144E                         wait76                      ; sync                  ' 76    |
2679   144E 3E 04       >            LD      A, w            ; 7-2
2679   1450 3D          >            DEC     A               ; 4
2679   1451 20 FD       >            JR      NZ, .loop       ; 12
2679   1453 C3 56 14    >            JP      .loop
2680   1456 C3 AF 02                JP      main_loop           ; process next frame    ' 10    | 86 (254)
2681   1459             
2682   1459             
2683   1459             
2684   1459             ; ##############################  functions  ################################
2685   1459             
2686   1459                         INCLUDE "z80_fct.i80"   ; basic functions
0001+  1459             ; ########################### function #############################
0002+  1459             
0003+  1459             ; initDAC
0004+  1459             ; -----------
0005+  1459             ; HL <-  YMPORT0
0006+  1459             ; DE <-  $2A80
0007+  1459             ;
0008+  1459             ; prepare DAC for output
0009+  1459             
0010+  1459             initDAC
0011+  1459 11 80 2B                LD      DE, $2B80
0012+  145C CD 66 14                CALL    writeYM0        ; enable DAC
0013+  145F 11 80 2A                LD      DE, $2A80
0014+  1462 CD 66 14                CALL    writeYM0        ; DAC data to silent
0015+  1465 C9                      RET
0016+  1466             
0017+  1466             ; writeYM0 / writeYM1
0018+  1466             ; -------------------
0019+  1466             ; D   -> address
0020+  1466             ; E   -> value
0021+  1466             ; HL <-  YMPORT0 / YMPORT2
0022+  1466             ;
0023+  1466             ; write to YM2612
0024+  1466             
0025+  1466             writeYM0
0026+  1466 21 00 40                LD      HL, YMPORT0
0027+  1469                         writeYM
0027+  1469 CB 7E       >            BIT     7, (HL)         ; test YM not busy
0027+  146B 20 FC       >            JR      NZ, .wait0
0027+  146D 72          >            LD      (HL), D         ; write address
0027+  146E CB 7E       >            BIT     7, (HL)         ; test YM not busy
0027+  1470 20 FC       >            JR      NZ, .wait1
0027+  1472 2C          >            INC     L
0027+  1473 73          >            LD      (HL), E         ; write value
0028+  1474 C9                      RET
0029+  1475             writeYM1
0030+  1475 21 02 40                LD      HL, YMPORT2
0031+  1478                         writeYM
0031+  1478 CB 7E       >            BIT     7, (HL)         ; test YM not busy
0031+  147A 20 FC       >            JR      NZ, .wait0
0031+  147C 72          >            LD      (HL), D         ; write address
0031+  147D CB 7E       >            BIT     7, (HL)         ; test YM not busy
0031+  147F 20 FC       >            JR      NZ, .wait1
0031+  1481 2C          >            INC     L
0031+  1482 73          >            LD      (HL), E         ; write value
0032+  1483 C9                      RET
0033+  1484             
2687   1484             
2688   1484             
2689   1484             ; loadState
2690   1484             ; ---------
2691   1484             ;     ?       ->  HL  -> ?
2692   1484             ;     ?       ->  BC  -> ?
2693   1484             ; reg source  ->  DE  -> ?
2694   1484             ;
2695   1484             ; load the YM and PSG state
2696   1484             ; = 8 samples + 140 cycles
2697   1484             
2698   1484             loadState
2699   1484             
2700   1484                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2700   1484 D9          >            EXX                     ;                           ' 4     | 4
2700   1485 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2700   1486 03          >            INC     BC              ; increment read address    ' 6     |
2700   1487 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2700   1489 12          >            LD      (DE), A         ; play sample               ' 7     |
2700   148A D9          >            EXX                     ;                           ' 4     | (36)
2701   148B             
2702   148B 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0      ' 10    |
2703   148E 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1      ' 10    | 20 (56)
2704   1491             
2705   1491 CD B3 14                CALL    loadYMState         ; load YM state             ' 188+  | (244)
2706   1494             
2707   1494 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2      ' 10    |
2708   1497 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3      ' 10    | 20 (254+10)
2709   149A             
2710   149A                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+10)
2710   149A D9          >            EXX                     ;                           ' 4     | 4
2710   149B 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
2710   149D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2710   149E 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2710   149F CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2710   14A1 12          >            LD      (DE), A         ; play sample               ' 7     |
2710   14A2 D9          >            EXX                     ;                           ' 4     | (46)
2711   14A3             
2712   14A3 CD B3 14                CALL    loadYMState         ; load YM state             ' 188+  | (244)
2713   14A6             
2714   14A6 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG           ' 10    | (254)
2715   14A9             
2716   14A9                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2716   14A9 D9          >            EXX                     ;                           ' 4     | 4
2716   14AA 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2716   14AB 03          >            INC     BC              ; increment read address    ' 6     |
2716   14AC CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2716   14AE 12          >            LD      (DE), A         ; play sample               ' 7     |
2716   14AF D9          >            EXX                     ;                           ' 4     | (36)
2717   14B0             
2718   14B0 C3 78 15                JP      loadPSGState        ; load PSG state            ' 10+94 | (140)
2719   14B3             
2720   14B3             
2721   14B3             ; loadYMState
2722   14B3             ; -----------
2723   14B3             ; YMPORT0/2   ->  HL
2724   14B3             ; YMPORT1/3   ->  BC
2725   14B3             ; reg source  ->  DE  -> ?
2726   14B3             ;
2727   14B3             ; load the YM RR state
2728   14B3             ; = 4 samples (244 cycles)
2729   14B3             
2730   14B3             loadYMState                             ;                           ' 56
2731   14B3             
2732   14B3                         waitYMReady                 ; wait YM to be ready       ' 30    |
2732   14B3 D9          >            EXX                     ;                           ' 4     | (4)
2732   14B4 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2732   14B6 C2 B4 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2732   14B9 D9          >            EXX                     ;                           ' 4     | (30)
2733   14BA 36 80                   LD      (HL), $80           ; set reg num to YM         ' 10    |
2734   14BC 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2735   14BD 1C                      INC     E                   ; next                      ' 4     | 62 (118)
2736   14BE                         wait4                       ; wait YM to be ready       ' 4     |
2736   14BE 00          >            NOP
2737   14BF 02                      LD      (BC), A             ; restore state             ' 7     |
2738   14C0             
2739   14C0                         waitYMReady                 ; wait YM to be ready       ' 30    |
2739   14C0 D9          >            EXX                     ;                           ' 4     | (4)
2739   14C1 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2739   14C3 C2 C1 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2739   14C6 D9          >            EXX                     ;                           ' 4     | (30)
2740   14C7 36 81                   LD      (HL), $81           ; set reg num to YM         ' 10    |
2741   14C9 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (180)
2742   14CA 1C                      INC     E                   ; next                      ' 4     |
2743   14CB                         wait4                       ; wait YM to be ready       ' 4     |
2743   14CB 00          >            NOP
2744   14CC 02                      LD      (BC), A             ; restore state             ' 7     |
2745   14CD             
2746   14CD                         waitYMReady                 ; wait YM to be ready       ' 30    |
2746   14CD D9          >            EXX                     ;                           ' 4     | (4)
2746   14CE CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2746   14D0 C2 CE 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2746   14D3 D9          >            EXX                     ;                           ' 4     | (30)
2747   14D4 36 82                   LD      (HL), $82           ; set reg num to YM         ' 10    |
2748   14D6 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (242)
2749   14D7 1C                      INC     E                   ; next                      ' 4     |
2750   14D8                         wait4                       ; wait YM to be ready       ' 4     |
2750   14D8 00          >            NOP
2751   14D9 02                      LD      (BC), A             ; restore state             ' 7     |
2752   14DA             
2753   14DA D9                      EXX                         ;                           ' 4     | (246)
2754   14DB             
2755   14DB             .wait1
2756   14DB CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2757   14DD C2 DB 14                JP      NZ, .wait1          ; wait while busy           ' 10    | 22 (254+14)
2758   14E0             
2759   14E0 36 2A                   LD      (HL), $2A           ;                           ' 10    |
2760   14E2 0A                      LD      A, (BC)             ;                           ' 7     |
2761   14E3 03                      INC     BC                  ; *** sample output ****    ' 6     | 38 (52)
2762   14E4 CB 90                   RES     2, B                ;                           ' 8     |
2763   14E6 12                      LD      (DE), A             ;                           ' 7     |
2764   14E7             
2765   14E7             .wait2
2766   14E7 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2767   14E9 C2 E7 14                JP      NZ, .wait2          ; wait while busy           ' 10    | 22 (74)
2768   14EC             
2769   14EC D9                      EXX                         ;                           ' 4     | (78)
2770   14ED             
2771   14ED 36 84                   LD      (HL), $84           ; set reg num to YM         ' 10    |
2772   14EF 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2773   14F0 1C                      INC     E                   ; next                      ' 4     | 32 (110)
2774   14F1                         wait4                       ; wait YM to be ready       ' 4     |
2774   14F1 00          >            NOP
2775   14F2 02                      LD      (BC), A             ; restore state             ' 7     |
2776   14F3             
2777   14F3                         waitYMReady                 ; wait YM to be ready       ' 30    |
2777   14F3 D9          >            EXX                     ;                           ' 4     | (4)
2777   14F4 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2777   14F6 C2 F4 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2777   14F9 D9          >            EXX                     ;                           ' 4     | (30)
2778   14FA 36 85                   LD      (HL), $85           ; set reg num to YM         ' 10    |
2779   14FC 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2780   14FD 1C                      INC     E                   ; next                      ' 4     |
2781   14FE                         wait4                       ; wait YM to be ready       ' 4     |
2781   14FE 00          >            NOP
2782   14FF 02                      LD      (BC), A             ; restore state             ' 7     |
2783   1500             
2784   1500                         waitYMReady                 ; wait YM to be ready       ' 30    |
2784   1500 D9          >            EXX                     ;                           ' 4     | (4)
2784   1501 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2784   1503 C2 01 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2784   1506 D9          >            EXX                     ;                           ' 4     | (30)
2785   1507 36 86                   LD      (HL), $86           ; set reg num to YM         ' 10    |
2786   1509 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2787   150A 1C                      INC     E                   ; next                      ' 4     |
2788   150B                         wait4                       ; wait YM to be ready       ' 4     |
2788   150B 00          >            NOP
2789   150C 02                      LD      (BC), A             ; restore state             ' 7     |
2790   150D             
2791   150D D9                      EXX                         ;                           ' 4     | (238)
2792   150E             
2793   150E             .wait3
2794   150E CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2795   1510 C2 0E 15                JP      NZ, .wait3          ; wait while busy           ' 10    | 22 (254+6)
2796   1513             
2797   1513 36 2A                   LD      (HL), $2A           ;                           ' 10    |
2798   1515 0A                      LD      A, (BC)             ;                           ' 7     |
2799   1516 03                      INC     BC                  ; *** sample output ****    ' 6     | 38 (44)
2800   1517 CB 90                   RES     2, B                ;                           ' 8     |
2801   1519 12                      LD      (DE), A             ;                           ' 7     |
2802   151A             
2803   151A             .wait4
2804   151A CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2805   151C C2 1A 15                JP      NZ, .wait4          ; wait while busy           ' 10    | 22 (66)
2806   151F             
2807   151F D9                      EXX                         ;                           ' 4     | (78)
2808   1520                         wait8                       ; sync                      ' 8     |
2808   1520 00          >            NOP
2808   1521 00          >            NOP
2809   1522             
2810   1522 36 88                   LD      (HL), $88           ; set reg num to YM         ' 10    |
2811   1524 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2812   1525 1C                      INC     E                   ; next                      ' 4     | 32 (110)
2813   1526                         wait4                       ; wait YM to be ready       ' 4     |
2813   1526 00          >            NOP
2814   1527 02                      LD      (BC), A             ; restore state             ' 7     |
2815   1528             
2816   1528                         waitYMReady                 ; wait YM to be ready       ' 30    |
2816   1528 D9          >            EXX                     ;                           ' 4     | (4)
2816   1529 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2816   152B C2 29 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2816   152E D9          >            EXX                     ;                           ' 4     | (30)
2817   152F 36 89                   LD      (HL), $89           ; set reg num to YM         ' 10    |
2818   1531 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2819   1532 1C                      INC     E                   ; next                      ' 4     |
2820   1533                         wait4                       ; wait YM to be ready       ' 4     |
2820   1533 00          >            NOP
2821   1534 02                      LD      (BC), A             ; restore state             ' 7     |
2822   1535             
2823   1535                         waitYMReady                 ; wait YM to be ready       ' 30    |
2823   1535 D9          >            EXX                     ;                           ' 4     | (4)
2823   1536 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2823   1538 C2 36 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2823   153B D9          >            EXX                     ;                           ' 4     | (30)
2824   153C 36 8A                   LD      (HL), $8A           ; set reg num to YM         ' 10    |
2825   153E 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2826   153F 1C                      INC     E                   ; next                      ' 4     |
2827   1540                         wait4                       ; wait YM to be ready       ' 4     |
2827   1540 00          >            NOP
2828   1541 02                      LD      (BC), A             ; restore state             ' 7     |
2829   1542             
2830   1542 D9                      EXX                         ;                           ' 4     | (238)
2831   1543             
2832   1543             .wait5
2833   1543 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2834   1545 C2 43 15                JP      NZ, .wait5          ; wait while busy           ' 10    | 22 (254+6)
2835   1548             
2836   1548 36 2A                   LD      (HL), $2A           ;                           ' 10    |
2837   154A 0A                      LD      A, (BC)             ;                           ' 7     |
2838   154B 03                      INC     BC                  ; *** sample output ****    ' 6     | 38 (44)
2839   154C CB 90                   RES     2, B                ;                           ' 8     |
2840   154E 12                      LD      (DE), A             ;                           ' 7     |
2841   154F             
2842   154F             .wait6
2843   154F CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2844   1551 C2 4F 15                JP      NZ, .wait6          ; wait while busy           ' 10    | 22 (66)
2845   1554             
2846   1554 D9                      EXX                         ;                           ' 4     | (78)
2847   1555                         wait8                       ; sync                      ' 8     |
2847   1555 00          >            NOP
2847   1556 00          >            NOP
2848   1557             
2849   1557 36 8C                   LD      (HL), $8C           ; set reg num to YM         ' 10    |
2850   1559 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2851   155A 1C                      INC     E                   ; next                      ' 4     | 32 (110)
2852   155B                         wait4                       ; wait YM to be ready       ' 4     |
2852   155B 00          >            NOP
2853   155C 02                      LD      (BC), A             ; restore state             ' 7     |
2854   155D             
2855   155D                         waitYMReady                 ; wait YM to be ready       ' 30    |
2855   155D D9          >            EXX                     ;                           ' 4     | (4)
2855   155E CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2855   1560 C2 5E 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2855   1563 D9          >            EXX                     ;                           ' 4     | (30)
2856   1564 36 8D                   LD      (HL), $8D           ; set reg num to YM         ' 10    |
2857   1566 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2858   1567 1C                      INC     E                   ; next                      ' 4     |
2859   1568                         wait4                       ; wait YM to be ready       ' 4     |
2859   1568 00          >            NOP
2860   1569 02                      LD      (BC), A             ; restore state             ' 7     |
2861   156A             
2862   156A                         waitYMReady                 ; wait YM to be ready       ' 30    |
2862   156A D9          >            EXX                     ;                           ' 4     | (4)
2862   156B CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2862   156D C2 6B 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2862   1570 D9          >            EXX                     ;                           ' 4     | (30)
2863   1571 36 8E                   LD      (HL), $8E           ; set reg num to YM         ' 10    |
2864   1573 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2865   1574 1C                      INC     E                   ; next                      ' 4     |
2866   1575                         wait4                       ; wait YM to be ready       ' 4     |
2866   1575 00          >            NOP
2867   1576 02                      LD      (BC), A             ; restore state             ' 7     |
2868   1577             
2869   1577 C9                      RET                         ; done                      ' 10    | (244)
2870   1578             
2871   1578             
2872   1578             ; loadPSGState
2873   1578             ; ------------
2874   1578             ; PSGPORT     ->  HL
2875   1578             ; reg source  ->  DE  -> ?
2876   1578             ;
2877   1578             ; load the PSG env state
2878   1578             ; 94 cycles
2879   1578             
2880   1578             loadPSGState
2881   1578             
2882   1578 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2883   1579 1C                      INC     E                   ; next                      ' 4     | (21)
2884   157A 77                      LD      (HL), A             ; PSG restore channel 0 env ' 10    |
2885   157B             
2886   157B 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2887   157C 1C                      INC     E                   ; next                      ' 4     | 21 (42)
2888   157D 77                      LD      (HL), A             ; PSG restore channel 1 env ' 10    |
2889   157E             
2890   157E 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2891   157F 1C                      INC     E                   ; next                      ' 4     | 21 (63)
2892   1580 77                      LD      (HL), A             ; PSG restore channel 2 env ' 10    |
2893   1581             
2894   1581 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2895   1582 1C                      INC     E                   ; next                      ' 4     | 21 (84)
2896   1583 77                      LD      (HL), A             ; PSG restore channel 3 env ' 10    |
2897   1584             
2898   1584 C9                      RET                         ; done                      ' 10    | (94)
2899   1585             
2900   1585             
2901   1585             ; ##############################  jump table  ################################
2902   1585             
2903   1585 00                      BLOCK   $1600-$
2904   1600             
2905   1600 27 0A                   DW      com_next_frame                                                                  ; 00
2906   1602             
2907   1602                         DW      com_null, com_null, com_null                                                    ; 01-03
2907   1602 911191119111
2908   1608                         DW      com_null, com_null, com_null, com_null                                          ; 04-07
2908   1608 9111911191119111
2909   1610                         DW      com_null, com_null, com_null, com_null                                          ; 08-0B
2909   1610 9111911191119111
2910   1618                         DW      com_null, com_null, com_null, com_null                                          ; 0C-0F
2910   1618 9111911191119111
2911   1620             
2912   1620                         DW      com_psg_tone_w0, com_psg_tone_w1, com_psg_tone_w2, com_psg_tone_w3              ; 10-13
2912   1620 2A0A370A450A520A
2913   1628                         DW      com_psg_tone_w4, com_psg_tone_w5, com_psg_tone_w6, com_psg_tone_w7              ; 14-17
2913   1628 620A6E0A7C0A860A
2914   1630                         DW      com_psg_env_w0, com_psg_env_w1, com_psg_env_w2, com_psg_env_w3                  ; 18-1B
2914   1630 A70ABA0AC60ADF0A
2915   1638                         DW      com_null, com_null, com_null, com_null                                          ; 1C-1F
2915   1638 9111911191119111
2916   1640             
2917   1640                         DW      com_ym_port0_w0, com_ym_port0_w1, com_ym_port0_w2, com_ym_port0_w3              ; 20-23
2917   1640 2B0B3C0B450B570B
2918   1648                         DW      com_ym_port0_w4, com_ym_port0_w5, com_ym_port0_w6, com_ym_port0_w7              ; 24-27
2918   1648 600B730B850B8E0B
2919   1650                         DW      com_ym_port0_w8, com_ym_port0_w9, com_ym_port0_wA, com_ym_port0_wB              ; 28-2B
2919   1650 A10BB30BBC0BCF0B
2920   1658                         DW      com_ym_port0_wC, com_ym_port0_wD, com_ym_port0_wE, com_ym_port0_wF              ; 2C-2F
2920   1658 E10BEA0BFC0B0D0C
2921   1660             
2922   1660                         DW      com_ym_port2_w0, com_ym_port2_w1, com_ym_port2_w2, com_ym_port2_w3              ; 30-33
2922   1660 160C270C300C420C
2923   1668                         DW      com_ym_port2_w4, com_ym_port2_w5, com_ym_port2_w6, com_ym_port2_w7              ; 34-37
2923   1668 4B0C5E0C700C790C
2924   1670                         DW      com_ym_port2_w8, com_ym_port2_w9, com_ym_port2_wA, com_ym_port2_wB              ; 38-3B
2924   1670 8C0C9E0CA70CBA0C
2925   1678                         DW      com_ym_port2_wC, com_ym_port2_wD, com_ym_port2_wE, com_ym_port2_wF              ; 3C-3F
2925   1678 CC0CD50CE70CF80C
2926   1680             
2927   1680                         DW      com_ym_key_w0, com_ym_key_w1, com_ym_key_w2, com_ym_key_w3                      ; 40-43
2927   1680 4B0E5B0E670E780E
2928   1688                         DW      com_ym_key_w4, com_ym_key_w5, com_null, com_null                                ; 44-47
2928   1688 8C0E9B0E91119111
2929   1690                         DW      com_null, com_null, com_null, com_null                                          ; 48-4B
2929   1690 9111911191119111
2930   1698                         DW      com_null, com_null, com_null, com_null                                          ; 4C-4F
2930   1698 9111911191119111
2931   16A0             
2932   16A0                         DW      com_pcm_p0_ch0, com_pcm_p0_ch1, com_pcm_p0_ch2, com_pcm_p0_ch3                  ; 50-53
2932   16A0 2F0F430F570F6B0F
2933   16A8                         DW      com_pcm_p1_ch0, com_pcm_p1_ch1, com_pcm_p1_ch2, com_pcm_p1_ch3                  ; 54-57
2933   16A8 340F480F5C0F700F
2934   16B0                         DW      com_pcm_p2_ch0, com_pcm_p2_ch1, com_pcm_p2_ch2, com_pcm_p2_ch3                  ; 58-5B
2934   16B0 390F4D0F610F750F
2935   16B8                         DW      com_pcm_p3_ch0, com_pcm_p3_ch1, com_pcm_p3_ch2, com_pcm_p3_ch3                  ; 5C-5F
2935   16B8 3E0F520F660F7A0F
2936   16C0             
2937   16C0                         DW      com_state_w0, com_state_w1, com_state_w2, com_state_w3                          ; 60-63
2937   16C0 3B10451053106210
2938   16C8                         DW      com_state_w4, com_state_w5, com_state_w6, com_state_w7                          ; 64-67
2938   16C8 6B10841091109E10
2939   16D0                         DW      com_state_w8, com_state_w9, com_state_wA, com_state_wB                          ; 68-6B
2939   16D0 AA10B610C110DC10
2940   16D8                         DW      com_state_wC, com_state_wD, com_state_wE, com_state_wF                          ; 6C-6F
2940   16D8 E910F61002110E11
2941   16E0             
2942   16E0                         DW      com_null, com_null, com_null, com_null                                          ; 70-74
2942   16E0 9111911191119111
2943   16E8                         DW      com_null, com_null, com_null, com_null                                          ; 74-77
2943   16E8 9111911191119111
2944   16F0                         DW      com_null, com_null, com_null, com_null                                          ; 78-7B
2944   16F0 9111911191119111
2945   16F8 91 11                   DW      com_null                                                                        ; 7C
2946   16FA             
2947   16FA 9D 11                   DW      com_extra_frm                                                                   ; 7D
2948   16FC B9 11                   DW      com_loop                                                                        ; 7E
2949   16FE DA 11                   DW      com_end                                                                         ; 7F
2950   1700             
2951   1700             
2952   1700                         END
